%!PS-Adobe-3.1 EPSF-3.0%ADO_DSC_Encoding: MacOS Roman%%Title: Fernet-EAGLE Logo B-W.eps%%Creator: Adobe Illustrator(R) 12%%AI8_CreatorVersion: 12.0.1%AI9_PrintingDataBegin%%For: ass%%CreationDate: 9/12/07%%BoundingBox: 0 0 548 669%%HiResBoundingBox: 0 0 547.2212 668.1602%%CropBox: 0 0 547.2212 668.1602%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0%%+ procset Adobe_CoolType_Utility_T42 1.0 0%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%+ procset Adobe_CoolType_Core 2.23 0%%+ procset Adobe_AGM_Core 2.0 0%%+ procset Adobe_AGM_Utils 1.0 0%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_BuildNumber: Adobe Illustrator(R) 12.0.1 x205 R agm 4.3861 ct 5.530%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 108 128 8%%BeginData: 8566 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDF4FF7D52FD68FF52F8F87DFD63FFA8FFA87DF8F8%F8A8FD62FFA8A8A852F8F82752A8A8FD60FFA8A8A87DF8F8F827527DF8A8%FD5FFFA8A85227FD07F87DFD5FFFA8A827FD06F82752FD5FFFA8A87DFD07%F8FD0427FD5CFFA8FFA852FD09F8277DFD5CFFA8A87D27FD07F827277DA8%FD5CFFA8FF52FD09F8275252FD5CFFA8A827FD0AF8527DFD5CFFA8FF52FD%07F8277D7DFD5EFF7DFF7DFD0AF852A8FD5CFF7DA8FF27FD07F82752FD5E%FF7D7DFF7DFD08F827A8FD5DFFA87DFFFF27FD06F8527DFD5FFF52A8FF7D%FD06F82752FD5FFFA87DFFFF27FD06F8A8FD60FF52FFFF7DFD05F8277DFD%60FF7D7DFFFF27FD05F8A8FD60FFA852A8FFA8FD05F852FD61FF7D7DFFFF%7DFD05F8FD62FF52FFFFFF52FD04F8A8FD34FFA8A8A87DA87DA87DA8A8FF%FFFFA8FD1FFF7DA8FFFFFF52F8F8F8A8FD2DFFA87D52522727FD0DF82752%7D527D7D7DA8FD19FFA852A8FFFFFFF8F8F827FD27FFA8A87D7D2727FD15%F82752A8A8A87D7D527D7DFD16FF7D7DFFFFFFA827F8F87DFD22FF7D5227%27FD1FF827277DA8FFA8A87D7D7DA8FD12FF52FD04FF7DF8F8F8A8FD21FF%27FD15F82727FD11F8527DA8A8A85252A8FD0FFF7DFD05FF52F8F87DFD23%FF7D52FD11F8272727FD16F852FF7D2752FD0DFF7D7DFD05FF27F8F8A8FD%25FF7D525252272727F827F827FD05F8272727F8F8F8275252FD04F82727%FD0CF827FFFF7D52FD0CFF7DFD06FFF8F852FD2AFFFD12F82727F8F8F827%5252FD0FF87DFFA8F87DFD09FF7D7DFD05FF525252FD057DA8A8A8FD24FF%7DA8FD0452FD05F827FD0BF827F8F8F8272752FD0BF852A8A8527DA8FD06%FFA827A8A8FFA8FF7D7D7D5252275252F8272727FD2AFFA87DA8A87DF827%2752FD0BF82727FD0FF852A8A87D52FFFFFFA87DF8A8FFA8275227FD06F8%2727FD04F8FD33FFA8A8A8527D52FD0EF827FD09F8527D7D27522727F8A8%A827FD0DF87DA8A8FD38FFA85227FD09F8277D52FD0CF8277D27F8F8277D%FD0EF8A8A8A8FD3BFF7D52FD07F8527D52FD0FF8A827FD10F82727527DFD%3CFF525227FD05F827FD04F827FD0DF827FD0FF852FD42FF52FD07F82752%7D27F8F85227F8F85227FD14F87DFD44FF7DFD07F827F8F8F85227F8F8A8%52FD12F8527DFD48FF7DFD08F827F8F8277D27FD12F87DFD4BFF7D27FD09%F852FD13F827FD4DFF7DA8FF27FD05F827FD14F87DFD50FF7D7DFD18F87D%FD53FF7D52A827FD13F87DFD59FFA852A852FD0DF87DFD5AFFA8FFFFFF27%FD0BF852FD5BFF7DA8FF7DFD0BF827FD5CFFA8FF7D27FD0BF8A8FD5BFF7D%FF52FD08F827FD04F852FD59FFA8277D27FD08F8277DA827F827A87DFD56%FF7D27FD0EF8A8FFF8F87D7DFD55FF27FD10F827FFA8F8527DA8FD52FF52%F8F8275227FD0EF87DFF52F827F87D52527DA87D7D52A8FD05FFA87DFD40%FF7D27F827527D5227FD07F82752A85227F8F8F87D52A85227F8F827F8F8%FFFFFF7DA87D7D2752A8F87DFD3EFF27F82727527DF827F852FD05F87DFD%04FF7D27F8F8F827525252A87DFF52F87D7D52522727F8F8F852F852FD3C%FF7DFD04F82752F8522752FD0427F852FFFFA87D527D7DA8A8FF27F8F87D%7DFFFFFFFD09F827F852A8FD3BFFA8277DF827F8F8F82727F827F827F8F8%F852FF7DF8F852FD04FF7D27A8277DFD04FF27FD05F8277DA8A8FFFFFFA8%FD3EFF7D27FD0AF827FFFF27F8F827FD04FFA827FFA8A8FD04FFFD05F852%FD47FFA852F8F8527D277D277DA8FFFFFFFD04F8A8FD08FFA87D7D27FD04%F827A8FD48FF7D7DA8FD08FFA87D27F8F8F8FFFFFFA8A87D522727FD05F8%2752A8FD52FFA85252527D27F8F8F85252FD07F852272752FD54FF7D7D52%7DFFFFA8A8FD05F827277D277D7DFFFFFFA8A852A8FD50FF7D52A8A8FFFF%FFA8FFFFA8275252A8FD04FFFD05A8FFFFFF7D527DFD4CFFA8527DFD04FF%A8A8FD0BFFA8FFFFFFA8FFA8FD04FF7D52FD4AFF7D527DFFA8A8A87D7DFD%04A8FFA8FD05FFA8A8FD06FFA8A8A8FFFFA8527DFD47FF527DFD06FFA8FD%05FFA8A8A8FFA8FFFFA8FD0AFFA8A8A8FF7D7DFD45FF52A8FD06FFA8FD0B%FFA8A87DA8A8FD09FFA87DA8FF5252FD43FF7DFD07FFA8FD0DFFA8FFFFFF%A8A8A8FD07FFA8FFA8FFA87DFD41FF52FFFFFFA8FFA8FFA8A8A8FFA8FD09%FFA8FD05FFFD05A8FFFFFFA8A8FFFF7DFFA87DFD3FFF52FD0CA8FFA8FFA8%FD06FFA8FD08FFA8FFA8FD07FF7DFFA87DFD3DFF7DA8FD10FFA8FFFD05A8%FD0BFFA8A87DFD04FFA8A8FF277DFD3BFFA87DFD08FF7DA8A8A8FD0AFF7D%A8A8FD0BFFA87DA8FFFFFFA8FFA8A852FD3AFFA87DA8A87D522727FD09F8%272752527DA8FFA8FFFFFFA8A8A8FD09FFA8A8A8FFFFA8A8FF7DA852FD39%FF7DF827FD07F8FD04275227FD08F8527DFD05FFA8A8A8FD09FFA8FFA8FF%FFFFA8A87DFD37FFA8FD04F8277D7D52F827FD06FFA852FD09F82752A8FF%FFFFA8A8FD04FFA8FD04FFA87DA8FFFFA8A852A8FD36FF27F8F8277DFFFF%FFA8F8A8FD08FF27F8F8F8A87D5227FD04F852A8FFFFFFA8A8A8FFA8FD05%FFA8A8FD04FF7DA8FD35FF7DF8F827A8FFA8FFFF7D27FFFFFF2752FD04FF%F8F8F8A8FD04FFA827FD04F827A8FFFFFFA87DA8FD05FFFD07A827FD35FF%52F8F87DFF7D52FFFFF8A8FFFFA82752FFFFFFA8F8F8A8FD06FFFD07F852%A8FFFFFF7DFD05FFA8FFFFA8A8FFFF7D7DFD33FFA8F8F8F8FD05FFF827FD%04FFA8FD04FF27F8A8FD06FFA8F8F8F8277DFD04F827FFA8FFA8A8FFFFFF%A8A8FFFF7DA8FFA87DFD33FF7DF8F87DFD04FFA8F8A8FD06FFA87D27F8A8%FFFFA8A8FFFFFFA8F8F8F8A8FFFF52FD04F87DFD06FFA8FFFFFFA8A8FFFF%52FD33FF52F8F8A8FF52A8FFFF52FD07FF52F8F852FFFFFF7D52FFFFFF7D%F8F827FD04FF52FD04F852FD04FF7DA8FD04FFA8A8FF7D7DFD32FF27F827%FFFF52A8FFA8A8FFFFA87DFFFFFF7DF852FD09FF7DF8F8A8FD04FF7DF827%F8F8F827A8FFFFA87DFFFFFFA8FFFFA87D7DFD31FFA827F87DFD05FF7DA8%FFFF7DF8A8FFFF7D27A8FD09FF52F852FD05FF52F8A8FF27F8F8F87DFFA8%A8A8FFFFA8A8FFA8A852FD32FFF8F8A8FD04FF7DF87D527D27F827A8A8A8%7DFFFFFF7D2752FD04FF52F8FD06FF7D52FFFFFF7DF8F8F852FFFFFFA8FF%A8FFFFFFA87DFD31FF7DF8F8FFFFA85227FD0CF8277D7DF8F8F8A8FFFFFF%F827FD06FFA8FD04FF7DFD04F827FFFFFFA8A8A8FFFFFF52FD31FFA8F827%5227FD15F8A8FFFFFF27A8FD0BFFFD06F852FFFFFF7DFD04FF7DA8FD30FF%A8FD1AF8527DA852FD04FF7DA8FD05FF7D27A8FFA852F8F827FFFFA87DFF%FFFF7DA8FD30FFA8FD07F8272752527D527D52522727FD0BF8277DFFFFFF%F8A8FD05FF7DFD05FF7DF8F852FFA8FFA8FFFFA8A8FD30FF7DF8F852527D%A8FD0DFFA87D5227FD09F8A852F87DFD04FFA87DFD06FF27F8F827A8FFFF%A8FF7DA8FD30FFA87DFD0BFFA8FD0AFFA85227FD09F8A8FD04FF7DFD07FF%7DF8F8F852FFFFFFA87DA8FD30FFA87DFD09FFA852277DA852A87DFD07FF%A87DFD08F827FFFFFF7D7DFFFFFF7DF87DFFFFFD04F87DFFFFFF52FD32FF%7DFD09FF7D7D52527D7D5252277DFD08FF52FD08F8A8FF527DFFFFFFF8F8%F8FF7DFD05F8A8FFFF7DFD31FFA87DFD0AFF7DA8277D522752F87DFD09FF%A827FD07F827F87DFFFFA8F8F8F827275252F8F8F827FFFF52FD32FF7DFD%0BFF2752FFA85227F852FFFFA87D7D52A8FD04FF7DFD08F852FFFFFF27F8%F8F827FFFF27F8F8F87DA87DFD32FFA87DFD09FF52275227FFFD05A82752%7D522752FD05FFA8FD08F8A8FFFFA8F8F8F8FFFFFF52FD04F827A8FD32FF%A87DFD08FF7DF87DFF277DF827A8A827A8FF7D7DFF52FD07FF27FD06F87D%FFFFFF7DF8A8FD04FFFD05F8FD34FF52FD07FF7D5227FF52A87D52527D27%FFFF2752FF5252FD08FF27FD06F8A8FFFF7D7DFD05FF52F8F8F852FD34FF%7DA8FD05FF7DA8277DFD06FF52FFA8522727277DFD0AFF52FD06F8A8A852%FFFFFFA8FFFF52F8F8F87DFD34FFA87DFD04FFA87D5227FD06FF52A87D27%7DFF52F8A8FD0BFF27FD07F8A8FFFFFF52FFFF27F8F827FD36FF52A8FFFF%FFA85227A8FD06FFA8527D277DFF5227277DFD0BFF27FD06F87DFD06FF27%F8F87DFD36FFA852FFFFFFA8FFA8FD09FF7D52FF52F82727FD0DFFFD07F8%A87DA8FFFFA8F8F827A8FD37FF7DA8FD07FFA852A8A8A8FFFFA8272727FF%272752A87DFD0BFFFD08F827FFFFA8F8F87DFD38FFA852A8FD06FF7DF827%F85252A8FFA8A8FFFF52F8FF7D27FD0BFFA8FD07F827FFFF52F827FD3AFF%7D7DFD06FF5252FD042752FD06FFA87D277D7D277DFD09FF7DFD06F852FF%FF27F8FD3CFF527DFD05FFA8FFA82727F8A8FF2752FD04FFA8527D27F8F8%7DFD09FF27FD05F852FFFFF87DFD3DFF52A8FD08FFA8525227F87DA87DFD%05FF5252527DA8FD08FFA8FD06F8FF5252FD3FFF27A8FD09FFA852272727%F87D7DFD04FF7DF8522752FD08FF52FD06F852FD41FF52FD0BFFA8525227%F827277DA87DA87D277D52A8A8FD07FF27FD04F827FD42FFA827A8FD08FF%A8FFFFFF5227277DF87D52272752277DA827A8FD06FFA8F8F8F852FD45FF%52A8FD0DFF525227A8FFFFA8522727527DFD08FF52F87DFD47FF527DFD0C%FFA8527DFD05FFA827F8A8FD08FF527DFD49FFA87DA8FD14FF7D7DFD06FF%7D52FD4CFFA87D52A8FD18FF7D7D7DFD50FF7D7D7DFD13FFA87D52A8FD53%FFA8A87D7D7DA8A8FD09FFA8FF7D7D527D7DFD58FFA8A87D7D527D52FD08%7DA8A8FD60FFFD07A8FDFCFFFDDCFFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 70 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/set_gvm{	currentglobal exch setglobal}bdf/reset_gvm{	setglobal}bdf/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/thold_halftone{ 	level3		{sethalftone currenthalftone}		{			dup /HalftoneType get 3 eq			{				sethalftone currenthalftone			}			{				begin				Width Height mul {					Thresholds read {pop} if				} repeat				end				currenthalftone			} ifelse		}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			/srcDataStrs [ imageDict begin				currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse				{					Width Decode length 2 div mul cvi string				} repeat				end ] def					imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource [1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx /pop cvx names_index /get cvx /put cvx] cvx put			imageDict /Decode [0 1] put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{ 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		DataSource 0 get type		dup /filetype eq			{			1 dict begin			/flushbuffer Width cvi string def			1 1 Height cvi				{				pop				0 1 DataSource length 1 sub					{					DataSource exch get					flushbuffer readstring pop pop					}for				}for			end			}if		dup /arraytype eq exch /packedarraytype eq or DataSource 0 get xcheck and			{			Width Height mul cvi				{				0 1 DataSource length 1 sub					{dup DataSource exch get exec length exch 0 ne {pop}if}for				dup 0 eq					{pop exit}if				sub dup 0 le					{exit}if				}loop			pop			}if				}		{		/DataSource load type 		dup /filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 idiv mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		dup /arraytype eq exch /packedarraytype eq or /DataSource load xcheck and			{				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul					{					DataSource length dup 0 eq						{pop exit}if					sub dup 0 le						{exit}if					}loop				pop			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 	dup type /dicttype eq		{			Adobe_AGM_Core/AGMCORE_tmp get			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			Adobe_AGM_Core/AGMCORE_tmp get exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{ 	/indexed_colorspace_dict AGMCORE_gget dup null ne {		dup /CSDBase known {			/CSDBase get /CSD get_res /Names known 		}{			pop false		}ifelse	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse{	/pdfmark_5 {cleartomark} bind def}{	/pdfmark_5 {pdfmark} bind def}ifelse/ReadBypdfmark_5{	2 dict begin	/makerString exch def string /tmpString exch def	{		currentfile tmpString readline pop		makerString anchorsearch		{		pop pop cleartomark exit		}{			3 copy /PUT pdfmark_5 pop 2 copy (\n) /PUT pdfmark_5		} ifelse	}loop	end} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2005 Adobe Systems, Inc.  All Rights Reserved.%% Note: This procset assumes Adobe_AGM_Utils is opened on the stack below it, for%% definitions of some fundamental procedures.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 201 dict dup begin put/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSD_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_in_pattern false def/AGMCORE_currentpagedevice nd/knockout_unitsq ndcurrentglobal true setglobal[/CSA /Gradient /Procedure]{	/Generic /Category findresource dup length dict copy /Category defineresource pop} forallsetglobal/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	//Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_&setoverprint /setoverprint ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			dup AGMCORE_gstack exch get dup /AGMCORE_currentoverprint known				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse			/AGMCORE_gstackptr exch store		}def		/grestoreall {			AGMCORE_&grestoreall			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			/AGMCORE_gstackptr exch store			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/setoverprint{			dup /AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint		}def			0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/sRGB ne					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			//Adobe_AGM_Core begin			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						current_spot_alias false set_spot_alias						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor						set_spot_alias						currentgray 1 ne					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						//Adobe_AGM_Core/AGMCORE_name xddf						false						//Adobe_AGM_Core/AGMCORE_in_pattern known {//Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not AGMCORE_currentpagedevice/OverrideSeparations known and						{							AGMCORE_currentpagedevice/OverrideSeparations get							{								/HqnSpots /ProcSet resourcestatus								{									pop pop pop true								}if							}if						}if											{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not						}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]AGMCORE_&setcolorspace							false							AGMCORE_currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall								not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse			end		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	/AGMCORE_IsSeparationAProcessColor		{		dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or		}def	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		level3 {			/AGMCORE_IsCurrentColor				{				dup AGMCORE_IsSeparationAProcessColor					{					AGMCORE_plate_ndx 0 eq						{dup (Cyan) eq exch /Cyan eq or}if					AGMCORE_plate_ndx 1 eq						{dup (Magenta) eq exch /Magenta eq or}if					AGMCORE_plate_ndx 2 eq						{dup (Yellow) eq exch /Yellow eq or}if					AGMCORE_plate_ndx 3 eq						{dup (Black) eq exch /Black eq or}if					AGMCORE_plate_ndx 4 eq						{pop false}if					}{					gsave					false setoverprint					current_spot_alias false set_spot_alias					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor					set_spot_alias					currentgray 1 ne					grestore					}ifelse				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf				dup type /dicttype eq					{					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end}{					channel get 0 paint? AGMCORE_separateShadingFunction					}ifelse				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					Shading /AGMCORE_ignoreshade known					currentdict end exch					{pop <</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				//Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					/AGMCORE_SpotAliasAry2 where {						begin						dup 0 get dup /Separation eq						{							pop							dup length array copy							dup dup 1 get							current_spot_alias							{								dup map_alias								{									false set_spot_alias									dup 1 exch setsepcolorspace									true set_spot_alias									begin									/sep_colorspace_dict currentdict AGMCORE_gput									pop pop	pop									[ 										/Separation Name 										CSA map_csa										MappedCSA 										/sep_colorspace_proc load									]									dup Name									end								}if							}if							map_reserved_ink_name 1 xpt						}{							/DeviceN eq 							{								dup length array copy								dup dup 1 get [ 									exch {										current_spot_alias{											dup map_alias{												/Name get exch pop											}if										}if										map_reserved_ink_name									} forall 								] 1 xpt							}if						}ifelse						end					} if				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	/AGMCORE_def_ht currenthalftone def	/clonedict Adobe_AGM_Utils begin /clonedict load end def	/clonearray Adobe_AGM_Utils begin /clonearray load end def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/getrampcolor	{ 		/indx exch def		0 1 NumComp 1 sub		{			dup			Samples exch get			dup type /stringtype eq {indx get} if			exch			Scaling exch get aload pop			3 1 roll			mul add		} for		ColorSpaceFamily /Separation eq 		{sep}		{			ColorSpaceFamily /DeviceN eq			{devn} {setcolor}ifelse		}ifelse	} bdf	/sssetbackground {aload pop setcolor} bdf	/RadialShade	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/r2 xdf		/c2y xdf		/c2x xdf		/r1 xdf		/c1y xdf		/c1x xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		c1x c2x eq		{			c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope c2y c1y sub c2x c1x sub div def			/theta slope 1 atan def			c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if			c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if		} ifelse		gsave		clippath		c1x c1y translate		theta rotate		-90 rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax xdf		/xMax xdf		/yMin xdf		/xMin xdf		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			/max { 2 copy gt { pop } {exch pop} ifelse } bdf			/min { 2 copy lt { pop } {exch pop} ifelse } bdf			rampdict begin			40 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			c1x c1y translate			theta rotate			-90 rotate			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def			/c1y 0 def			/c1x 0 def			/c2x 0 def			ext0			{				0 getrampcolor				c2y r2 add r1 sub 0.0001 lt				{					c1x c1y r1 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2y r1 add r2 le					{						c1x c1y r1 0 360 arc						fill					}					{						c2x c2y r2 0 360 arc fill						r1 r2 eq						{							/p1x r1 neg def							/p1y c1y def							/p2x r1 def							/p2y c1y def							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto							fill						}						{							/AA r2 r1 sub c2y div def							AA -1 eq							{ /theta 89.99 def}							{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}							ifelse							/SS1 90 theta add dup sin exch cos div def							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def							/p1y p1x SS1 div neg def							/SS2 90 theta sub dup sin exch cos div def							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def							/p2y p2x SS2 div neg def							r1 r2 gt							{								/L1maxX p1x yMin p1y sub SS1 div add def								/L2maxX p2x yMin p2y sub SS2 div add def							}							{								/L1maxX 0 def								/L2maxX 0 def							} ifelse							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto							L1maxX L1maxX p1x sub SS1 mul p1y add lineto							fill						} ifelse					} ifelse				} ifelse			} if		c1x c2x sub dup mul		c1y c2y sub dup mul		add 0.5 exp		0 dtransform		dup mul exch dup mul add 0.5 exp 72 div		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt		1 index 1 index lt { exch } if pop		/hires xdf		hires mul		/numpix xdf		/numsteps NumSamples def		/rampIndxInc 1 def		/subsampling false def		numpix 0 ne		{			NumSamples numpix div 0.5 gt			{				/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def				/rampIndxInc NumSamples 1 sub numsteps div def				/subsampling true def			} if		} if		/xInc c2x c1x sub numsteps div def		/yInc c2y c1y sub numsteps div def		/rInc r2 r1 sub numsteps div def		/cx c1x def		/cy c1y def		/radius r1 def		newpath		xInc 0 eq yInc 0 eq rInc 0 eq and and		{			0 getrampcolor			cx cy radius 0 360 arc			stroke			NumSamples 1 sub getrampcolor			cx cy radius 72 hires div add 0 360 arc			0 setlinewidth			stroke		}		{			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				cx cy radius 0 360 arc				/cx cx xInc add def				/cy cy yInc add def				/radius radius rInc add def				cx cy radius 360 0 arcn				eofill				rampIndxInc add			} repeat			pop		} ifelse		ext1		{			c2y r2 add r1 lt			{				c2x c2y r2 0 360 arc				fill			}			{				c2y r1 add r2 sub 0.0001 le				{					c2x c2y r2 360 0 arcn					pathbbox					/aymax exch def					/axmax exch def					/aymin exch def					/axmin exch def					/bxMin xMin axmin min def					/byMin yMin aymin min def					/bxMax xMax axmax max def					/byMax yMax aymax max def					bxMin byMin moveto					bxMax byMin lineto					bxMax byMax lineto					bxMin byMax lineto					bxMin byMin lineto					eofill				}				{					c2x c2y r2 0 360 arc fill					r1 r2 eq					{						/p1x r2 neg def						/p1y c2y def						/p2x r2 def						/p2y c2y def						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto						fill					}					{						/AA r2 r1 sub c2y div def						AA -1 eq						{ /theta 89.99 def}						{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}						ifelse						/SS1 90 theta add dup sin exch cos div def						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def						/p1y c2y p1x SS1 div sub def						/SS2 90 theta sub dup sin exch cos div def						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def						/p2y c2y p2x SS2 div sub def						r1 r2 lt						{							/L1maxX p1x yMax p1y sub SS1 div add def							/L2maxX p2x yMax p2y sub SS2 div add def						}						{							/L1maxX 0 def							/L2maxX 0 def						}ifelse						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto						L1maxX L1maxX p1x sub SS1 mul p1y add lineto						fill					} ifelse				} ifelse			} ifelse		} if		grestore		grestore		end		end		end		} ifelse	} bdf	/GenStrips	{		40 dict begin		/ColorSpaceFamily xdf		/background xdf		/ext1 xdf		/ext0 xdf		/BBox xdf		/y2 xdf		/x2 xdf		/y1 xdf		/x1 xdf		/rampdict xdf		/setinkoverprint where {pop /setinkoverprint{pop}def}if		gsave		BBox length 0 gt		{			newpath			BBox 0 get BBox 1 get moveto			BBox 2 get BBox 0 get sub 0 rlineto			0 BBox 3 get BBox 1 get sub rlineto			BBox 2 get BBox 0 get sub neg 0 rlineto			closepath			clip			newpath		} if		x1 x2 eq		{			y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse		}		{			/slope y2 y1 sub x2 x1 sub div def			/theta slope 1 atan def			x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if			x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if		}		ifelse		gsave		clippath		x1 y1 translate		theta rotate		{ pathbbox } stopped		{ 0 0 0 0 } if		/yMax exch def		/xMax exch def		/yMin exch def		/xMin exch def		grestore		xMax xMin eq yMax yMin eq or		{			grestore			end		}		{			rampdict begin			20 dict begin			background length 0 gt { background sssetbackground gsave clippath fill grestore } if			gsave			x1 y1 translate			theta rotate			/xStart 0 def			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def			/ySpan yMax yMin sub def			/numsteps NumSamples def			/rampIndxInc 1 def			/subsampling false def			xStart 0 transform			xEnd 0 transform			3 -1 roll			sub dup mul			3 1 roll			sub dup mul			add 0.5 exp 72 div			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt			1 index 1 index lt { exch } if pop			mul			/numpix xdf			numpix 0 ne			{				NumSamples numpix div 0.5 gt				{					/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def					/rampIndxInc NumSamples 1 sub numsteps div def					/subsampling true def				} if			} if			ext0			{				0 getrampcolor				xMin xStart lt				{					xMin yMin xMin neg ySpan rectfill				} if			} if			/xInc xEnd xStart sub numsteps div def			/x xStart def			0			numsteps			{				dup				subsampling { round cvi } if				getrampcolor				x yMin xInc ySpan rectfill				/x x xInc add def				rampIndxInc add			} repeat			pop			ext1 {				xMax xEnd gt				{					xEnd yMin xMax xEnd sub ySpan rectfill				} if			} if			grestore			grestore			end			end			end		} ifelse	} bdf}def/page_trailer{	end}def/doc_trailer{}def/capture_currentpagedevice {	//Adobe_AGM_Core/AGMCORE_currentpagedevice currentpagedevice ddf} defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup //Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA get_csa_by_name setcolorspace_opt		set_crd	end}def/map_csa{	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse	{pop}{get_csa_by_name /MappedCSA xdf}ifelse} def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	/AGMCORE_tmp exch store	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	CSA map_csa	/AGMCORE_sep_special Name dup () eq exch (All) eq or store	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc {setcolor} bdf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		7 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			/lut_entry_len new_LookupTables 0 get dup length 256 ge {0 get length}{length}ifelse def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get dup length 256 ge {0 get length}{length}ifelse lut_entry_len ne {					/AliasedColorants false def					exit				}				{					new_LookupTables names_index get 0 get null eq {						dup /Names get names_index get /name xdf						name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq						or or or not {							/AliasedColorants false def							exit						} if					} if				} ifelse			} for			lut_entry_len 1 eq {				/AliasedColorants false def			} if			AliasedColorants {				dup begin				/Names new_names def				/LookupTables new_LookupTables def				/AliasedColorants true def				/NComponents lut_entry_len def				/TintMethod NComponents 4 eq {/Subtractive}{/Additive}ifelse def				/MappedCSA TintMethod /Additive eq {/DeviceRGB}{/DeviceCMYK}ifelse def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	dup not {		CSA map_csa	} if	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			AvoidAliasedColorants {				/currentspotalias current_spot_alias def				false set_spot_alias			} if			Names {				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				/names_index names_index 1 add def			} forall			AvoidAliasedColorants {				currentspotalias set_spot_alias			} if			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx 					0 0 0 0 /setcmykcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				{setcolor} bdf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSDBase known {			CSDBase /CSD get_res begin			currentdict /Names known {				currentdict devncs			}{				1 currentdict sepcs			} ifelse			AGMCORE_host_sep{				4 dict begin				/compCnt /Names where {pop Names length}{1}ifelse def				/NewLookup HiVal 1 add string def				0 1 HiVal {					/tableIndex xdf					Lookup dup type /stringtype eq {						compCnt tableIndex map_index					}{						exec					} ifelse					/Names where {						pop setdevicencolor					}{						setsepcolor					} ifelse					currentgray					tableIndex exch					HiVal mul cvi 					NewLookup 3 1 roll put				} for				[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt				end			}{				level3				{					currentdict /Names known {						[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{						[/Indexed [/Separation Name MappedCSA sep_proc_name load] HiVal Lookup] setcolorspace_opt					} ifelse				}{				[/Indexed MappedCSA HiVal					[					currentdict /Names known {						Lookup dup type /stringtype eq							{/exch cvx CSDBase /CSD get_res /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx					}{						Lookup dup type /stringtype eq							{/exch cvx /get cvx 255 /div cvx}							{/exec cvx}ifelse							CSDBase /CSD get_res /MappedCSA get sep_proc_name exch pop /load cvx /exec cvx					} ifelse					]cvx				]setcolorspace_opt				}ifelse			} ifelse			end			set_crd		}		{			CSA map_csa			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSDBase known { 			begin			CSDBase /CSD get_res begin			currentdict /Names known{				map_indexed_devn				devn			}			{				Lookup 1 3 -1 roll map_index				sep			}ifelse			end			end		}{			/Lookup get 4 3 -1 roll map_index setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSDBase known and {			/indexed_colorspace_dict AGMCORE_gget /CSDBase get /CSD get_res begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_res{	dup /CSD eq {		pop 		//Adobe_AGM_Core begin		/AGMCORE_CSD_cache load 3 1 roll put		end	}{		defineresource pop	} ifelse}def/del_res{	{		aload pop exch		dup /CSD eq {			pop 			{				//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef			}forall		}{			exch			{				1 index undefineresource			}forall			pop		} ifelse	} forall}def/get_res{	dup /CSD eq {		pop		dup type dup /nametype eq exch /stringtype eq or {			AGMCORE_CSD_cache exch get		} if	}{		findresource	} ifelse}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		/CSA get_res	} if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/wrap_paintproc{   statusdict /currentfilenameextend known{	clonedict	begin	/OldPaintProc /PaintProc load def	/PaintProc	{		mark exch		dup /OldPaintProc get stopped		{closefile restore end} if		cleartomark	}  def	end  } {pop} ifelse} def/make_pattern{	exch clonedict exch	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	1 index dup /ID get exch /Pattern add_res	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/RenderingIntent known{		currentcolorrendering/RenderingIntent get	}{null}ifelse	Intent ne {		Intent /ColorRendering {findresource} stopped		{			pop pop systemdict /findcolorrendering known			{				Intent findcolorrendering pop				/ColorRendering findresource 				true			}			{false} ifelse		}		{true} ifelse		{			dup begin			currentdict /TransformPQR known {				currentdict /TransformPQR get aload pop				3 {{} eq 3 1 roll} repeat or or			}			{true} ifelse			currentdict /MatrixPQR known {				currentdict /MatrixPQR get aload pop				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq				and and and and and and and and			}			{true} ifelse			end			or			{				clonedict begin				/TransformPQR [					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add} bind					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add} bind					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add} bind				] def				/MatrixPQR [ 0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296 ] def				/RangePQR [-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392] def				currentdict end			} if			setcolorrendering_opt		} if			}if} def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict /ColorRendering known{			ColorRendering /ColorRendering {findresource} stopped not {setcolorrendering_opt} if		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		clonedict		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process //Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/set_spot_alias_ary{	dup inherit_aliases	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf}def/set_spot_normalization_ary{	dup inherit_aliases	dup length	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add} if	array	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf	/AGMCORE_SpotAliasAry where{		pop		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval		AGMCORE_SpotAliasAry length	}{0} ifelse	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval	true set_spot_alias}def/inherit_aliases{	{dup /Name get map_alias {/CSD put}{pop} ifelse} forall}def/set_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry2 where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry2 where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry2{				dup/Name get AGMCORE_name eq{					/CSD get /CSD get_res					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		//Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	//Adobe_AGM_Core begin	/setcustomcolor	{		currentdict/TintProc known currentdict/CSA known and 3 1 roll		//Adobe_AGM_Core begin		dup /customcolor_tint exch AGMCORE_gput		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not		current_spot_alias and{1 index 4 get map_alias}{false}ifelse		{			false set_spot_alias			4 -1 roll{				exch pop /sep_tint AGMCORE_gget exch			}if			mark 3 1 roll			setsepcolorspace			counttomark 0 ne{				setsepcolor			}if			pop			pop			true set_spot_alias		}{			AGMCORE_&setcustomcolor			pop		}ifelse		end	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	//Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get //Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						<< /NegativePrint //Adobe_AGM_Core/AGMCORE_inverting get >> setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defend/set_def_ht{	AGMCORE_def_ht sethalftone} defendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.25 0%%Copyright: Copyright 1997-2005 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.25 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.25 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict /Adobe_CoolType_Data 2 copy known not	 { 2 copy 10 dict put }ifget	 begin	 /@opStackCountByLevel 32 dict def	 /@opStackLevel 0 def	 /@dictStackCountByLevel 32 dict def	 /@dictStackLevel 0 def	 endsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup /args			7 index			5 add array put			put get			}			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{ pop count }			if			dup /argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch /@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					 { (*) { pop stop } 128 string /Category resourceforall }				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data /@shouldNotDisappearDict get ne dup					 {						  /@shouldNotDisappearDictValue known								{										  {												end												currentdict 1 index eq													 { pop exit }												if										  }									 loop								}						  if					 }				if				end		}		{ false }	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end		currentglobal false setglobal	  userdict /Adobe_CoolType_Data 2 copy known not		  { 2 copy 10 dict put }		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.21 0%%Copyright: Copyright 1987-2005 Adobe Systems Incorporated.%%Version: 1.21 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 27 add dict copy }	{ 27 dict }ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		  <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {				mark				Adobe_CoolType_Utility /@recognizeCIDFont currentdict put					 {					 ((Hex) 57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec					 }				stopped					 {					 cleartomark					 Adobe_CoolType_Utility /@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						  {						  2 copy get 3 index eq								{ 1 index length exch sub 1 sub { end } repeat exit }								{ pop }						  ifelse						  }					 for					 pop pop					 Adobe_CoolType_Utility /@eexecStartData get eexec					 }					 { cleartomark }				ifelse			} }			{ {				Adobe_CoolType_Utility /@eexecStartData get eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind def/T0AddT42Mtx2{	/CIDFont findresource /Metrics2 get begin def end}bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/AGMIMG_flushfilters nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/AGMIMG_flushfilters{	dup type /arraytype ne		{1 array astore}if	aload length		{		dup type /filetype eq			{			dup status 1 index currentfile ne and				{dup flushfile closefile}				{pop}			ifelse			}{pop}ifelse		} repeat}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse		currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	CSA map_csa	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{ 									Name AGMCORE_IsSeparationAProcessColor  									{ 										Operator /imagemask eq{ 											/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor 										}{											invert_image_samples 										}ifelse	 								}{	 									[ /Separation Name [/DeviceGray]	 									{ 	 										sep_colorspace_proc AGMCORE_get_ink_data											1 exch sub	 									} bind										] AGMCORE_&setcolorspace										/sep_tint AGMCORE_gget AGMCORE_&setcolor 									}ifelse 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name AGMCORE_IsSeparationAProcessColor not and					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	mark currentcolor counttomark dup 2 add 1 roll cleartomark} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/DataSource origMultipleDataSources		{			[			BitsPerComponent 8 idiv origDecode length 2 idiv mul string			0 1 origDecode length 2 idiv 1 sub				{				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch				origDataSource exch get 0 () /SubFileDecode filter				BitsPerComponent 8 idiv string /readstring cvx /pop cvx /putinterval cvx				}for 			]bind cvx		}{origDataSource}ifelse 0 () /SubFileDecode filter def			[		origcolorSpaceElemCnt string		0 2 origDecode length 2 sub			{			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div			1 BitsPerComponent 8 idiv {DataSource /read cvx /not cvx{0}/if cvx /mul cvx}repeat /mul cvx /add cvx			}for		/convProc load /exec cvx		origcolorSpaceElemCnt 1 sub -1 0			{			/dup cvx 2 /add cvx /index cvx			3 1 /roll cvx /exch cvx 255 /mul cvx /cvi cvx /put cvx			}for	]bind cvx 0 () /SubFileDecode filter	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	CSA map_csa	2 dict begin	dup	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi			{				dup 65535 gt {1 add 2 div cvi}{exit}ifelse			} loop			string		} repeat		end ] def	/dstDataStr srcDataStrs 0 get length string def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [ [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						devn_alt_datasource 1 /string cvx /readstring cvx /pop cvx] cvx colorSpaceElemCnt 1 sub{dup}repeat] def									/MultipleDataSources true def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA get_csa_by_name 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							devn_alt_datasource						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA get_csa_by_name 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								devn_alt_datasource							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get get_csa_by_name				}{					/Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA get_csa_by_name 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	currentdict /_Filters known {_Filters AGMIMG_flushfilters} if	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		<<			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		>>		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		current_spot_alias{dup 4 get map_alias}{false}ifelse		{			false set_spot_alias			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask			true set_spot_alias		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: (Page 1) 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1.1-111">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Basic CMYK</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS2</xap:CreatorTool>
         <xap:CreateDate>2007-09-12T21:01:20-07:00</xap:CreateDate>
         <xap:ModifyDate>2007-09-12T21:01:20-07:00</xap:ModifyDate>
         <xap:MetadataDate>2007-09-12T21:01:20-07:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>212</xapGImg:width>
                  <xapGImg:height>256</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEAlgCWAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAlgAAAAEA&#xA;AQCWAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADUAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXEgCp2A6nFXmfmX/nILyDperwaBpEsnmfzHdSCC30zSOM3&#xA;7xjQCSeohWn7XxEr3GKvTMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;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&#xA;Yq7FXYq7FX//2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:20C4624D630511DC893EF4FDBE933B0F</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:20C4624E630511DC893EF4FDBE933B0F</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:123F2317354C11DCBD5CC19AB40C3A0D</stRef:instanceID>
            <stRef:documentID>uuid:123F2316354C11DCBD5CC19AB40C3A0D</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_AGM_Core/capture_currentpagedevice get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -668.16 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 668.16 li547.221 668.16 li547.221 0 licpclp[1 0 0 1 0 0 ] concat516.501 40.7998 mo518.781 38.7598 521.711 36.1001 521.781 32.6401 cv511.391 36.4902 502.051 41.3901 492.021 45.6001 cv489.871 43.9702 486.041 44.5498 483.861 45.1201 cv475.491 47.3101 467.131 52.77 459.381 57.6001 cv435.491 72.4902 415.341 87.6802 397.941 108 cv386.131 121.8 377.781 138.17 370.101 154.56 cv362.141 171.53 353.001 187.38 343.221 202.08 cv338.501 206.38 332.041 210.03 324.501 210.72 cv316.951 211.41 314.881 209.13 310.101 206.88 cv307.511 205.66 304.771 204.77 302.421 203.52 cv297.301 200.79 293.481 197.29 289.461 193.92 cv281.461 187.2 271.461 181.1 261.141 177.12 cv227.921 164.32 179.221 158.07 133.941 161.76 cv114.371 163.35 96.4111 166.4 77.7808 169.44 cv68.9609 170.88 60.1509 172.17 51.3809 173.28 cv42.8809 174.36 34.2412 175.22 26.4209 178.56 cv29.6509 186.69 44.561 183.14 54.2612 184.8 cv49.061 185.52 42.4111 184.79 38.4209 186.72 cv40.7808 189.51 45.8809 190.06 49.9409 190.56 cv68.6709 192.86 87.6709 185.82 102.261 184.8 cv92.041 187.51 80.8911 189.9 70.1011 192 cv66.7109 192.66 62.561 192.97 60.021 195.36 cv63.811 199.37 73.2109 199.94 80.6611 198.72 cv80.1411 199.6 78.0112 199.92 79.2212 201.12 cv86.9409 201.85 94.9312 201.56 101.781 200.16 cv101.161 201.94 97.7109 200.89 97.9409 203.52 cv106.801 207.6 119.661 201.46 128.181 202.08 cv125.271 203.33 122.011 204.23 120.021 206.4 cv121.601 209.29 126.371 208.56 129.141 208.32 cv135.641 207.76 143.111 205.02 147.861 203.52 cv146.931 205.88 142.541 207.03 143.541 209.76 cv149.691 211 155.391 207.93 160.821 206.88 cv160.471 209.25 157.671 209.17 157.461 211.68 cv164.091 213.24 168.041 208.26 175.221 208.8 cv174.651 211.53 170.271 212.68 170.901 215.04 cv174.591 216.58 180.691 214.44 183.861 215.52 cv182.861 217.72 179.431 217.49 178.581 219.84 cv180.831 221.75 186.631 220.11 189.621 221.28 cv188.791 223.81 185.961 224.34 185.301 227.04 cv189.811 229.97 195.771 224.37 199.701 227.04 cv198.901 230.24 195.341 230.68 193.461 232.8 cv197.051 234.93 204.711 232.89 208.341 233.76 cv206.891 235.83 202.711 235.17 201.621 237.6 cv203.761 239.38 208.791 240.33 212.661 240 cv214.461 239.84 216.201 237.84 216.981 239.52 cv217.371 242.95 212.911 241.53 212.661 244.32 cv214.811 246.92 221.131 246.44 224.181 246.72 cv224.021 249.12 220.781 248.44 221.301 251.52 cv226.671 253.78 236.171 246.35 238.581 252.96 cv238.291 254.75 235.751 254.29 235.701 256.32 cv237.731 259.41 246.001 256.26 248.661 258.72 cv248.281 260.26 247.241 261.14 247.221 263.04 cv253.681 263.73 260.061 260.65 265.941 259.2 cv264.841 261.94 261.671 262.61 261.141 265.92 cv265.101 266.79 275.881 264.04 278.421 267.84 cv276.091 276.37 273.671 284.73 267.861 290.4 cv263.721 294.44 257.241 297.24 251.541 300.48 cv237.341 308.56 223.061 317.3 210.741 325.92 cv208.151 327.73 204.401 328.94 204.021 331.68 cv210.441 332.02 213.981 329.48 218.901 328.32 cv218.361 330.09 212.561 333.32 214.581 334.08 cv219.151 335.77 222.351 331.93 226.101 331.2 cv225.401 333.86 224.201 336.02 224.181 339.36 cv228.861 340.51 231.061 336.65 233.301 336.96 cv232.421 339.6 233.111 343.81 232.341 346.56 cv235.761 348.31 237.991 345.77 239.061 343.68 cv238.491 346.33 240.771 346.13 242.901 346.08 cv244.721 344.7 244.861 341.64 246.741 340.32 cv246.281 342.54 248.731 341.85 249.621 342.72 cv252.081 342.46 252.691 340.35 254.901 339.84 cv256.261 341.21 257.361 342.57 259.221 342.72 cv262.771 343.01 264.121 339.76 265.941 339.36 cv266.401 340.82 265.871 343.27 267.861 343.2 cv271.161 343.94 271.521 341.74 272.661 340.32 cv273.201 341.54 274.791 341.71 276.501 341.76 cv278.241 340.94 278.551 338.69 279.861 337.44 cv281.191 338.03 282.301 338.84 284.181 338.88 cv288.211 335.23 290.141 329.48 289.941 321.6 cv297.151 318.09 305.531 315.75 312.981 312.48 cv312.971 313.43 311.671 313.09 312.021 314.4 cv313.991 314.43 316.321 312.33 317.781 313.44 cv318.251 316.17 314.151 316.28 315.381 318.24 cv317.931 318.23 318.971 316.71 321.141 316.32 cv321.571 317.99 318.081 319.92 320.181 320.16 cv323.521 320.46 325.061 318.96 327.861 318.72 cv327.641 320.41 323.231 322.51 324.981 323.04 cv329.961 324.19 332.721 318.49 335.061 322.56 cv327.111 324.79 314.881 325.31 306.741 327.84 cv299.031 330.23 296.491 337.5 298.101 348 cv281.481 350.9 268.341 357.28 254.421 362.88 cv253.431 363.01 254.311 365.01 252.981 364.8 cv235.291 375.08 218.331 390.21 205.461 408.96 cv200.711 415.88 196.081 423.49 192.021 430.08 cv181.531 447.12 177.891 470.5 179.061 496.32 cv180.161 520.56 184.871 540.29 193.461 557.76 cv208.651 588.66 231.931 612.26 262.581 626.88 cv282.521 636.39 306.801 643.49 334.581 641.76 cv375.181 639.24 406.701 623.54 432.501 598.56 cv456.351 575.47 473.571 541.29 475.701 505.44 cv476.071 499.28 476.461 493.64 476.181 487.68 cv474.461 450.68 460.901 421.75 442.101 398.88 cv424.341 377.27 400.601 361.06 373.461 351.84 cv385.561 348.84 398.151 348.31 407.061 343.68 cv411.281 341.49 412.351 335.74 416.181 333.12 cv424.071 327.73 436.781 329.96 447.861 324.96 cv450.771 318.69 445.961 308.25 438.741 313.44 cv440.231 315.47 441.291 317.93 441.141 321.6 cv439.291 321.87 436.761 323.34 434.901 322.08 cv435.921 319.18 434.621 316.49 433.461 314.4 cv425.761 314.57 420.781 318.19 413.781 317.28 cv409.521 316.72 406.521 312 401.781 311.04 cv394.191 309.5 388.721 312.18 380.661 313.44 cv378.701 311.64 378.601 310.9 376.821 310.56 cv373.961 310.02 370.991 312.78 368.181 312.48 cv361.321 311.75 358.031 301.04 354.741 295.2 cv351.561 289.54 347.751 285.6 350.421 279.36 cv351.551 279.51 351.311 281.03 352.821 280.8 cv353.791 276.55 356.781 272.6 359.541 269.28 cv362.261 266.01 365.241 262.48 368.181 259.68 cv370.021 257.93 372.461 256.88 373.941 254.88 cv378.181 249.15 378.951 243.03 384.501 239.52 cv391.491 235.1 401.061 233.81 408.501 227.04 cv408.871 225.81 408.981 224.32 409.941 223.68 cv417.161 222.58 427.461 224.56 428.661 217.44 cv424.201 220.27 418.201 219.71 411.381 219.36 cv415.631 214.17 421.161 210.26 429.141 208.8 cv431.031 208.99 431.351 210.75 432.501 211.68 cv435.001 208.65 436.271 200.4 432.501 197.76 cv428.901 197.36 426.651 198.31 424.341 199.2 cv417.361 194.66 403.411 197.09 395.061 193.92 cv395.351 190.05 399.261 189.8 400.341 186.72 cv399.641 186.46 397.861 187.28 397.941 186.24 cv399.041 182.7 403.621 181.98 401.301 177.6 cv402.571 175.19 405.511 174.45 407.061 172.32 cv405.621 171.68 403.831 171.39 403.701 169.44 cv405.281 167.02 409.101 166.85 409.941 163.68 cv408.131 163.57 407.351 162.43 407.541 160.32 cv409.041 158.14 413.561 158.98 414.261 156 cv415.161 153.82 412.351 155.35 412.821 153.6 cv414.221 152.78 416.561 151.88 418.581 150.72 cv420.251 149.76 423.801 148.48 421.941 146.88 cv420.741 147.46 417.541 148.53 416.181 147.36 cv418.301 143.24 425.231 143.93 426.741 139.2 cv426.071 137.79 423.251 138.53 422.421 137.28 cv427.681 134.38 433.281 131.82 437.301 127.68 cv436.181 126.41 432.141 128.03 431.061 126.72 cv437.311 125.61 442.841 123.78 446.901 120.48 cv443.831 118.8 438.281 123.07 435.861 120.48 cv442.361 115.14 455.001 115.94 460.341 109.44 cv455.741 109.65 449.381 110.63 444.981 109.44 cv450.061 108.2 455.551 107.15 460.341 105.6 cv465.081 104.06 469.981 102.27 472.821 98.8799 cv468.031 98.3398 459.651 101.55 454.101 98.8799 cv463.571 95.7798 474.891 93.0098 484.341 89.7598 cv487.351 88.7202 491.771 88.3198 492.501 84.48 cv485.871 85.54 477.071 86.9702 470.901 86.8799 cv480.851 83.5698 490.681 79.0498 499.221 74.3999 cv502.041 72.8599 506.091 71.9199 506.901 68.1602 cv497.571 68.2002 488.991 71.3301 481.031 71.5 cv492.221 66.7998 511.031 63.1499 514.101 51.3599 cv507.641 53.7002 500.461 57.8799 491.061 55.6802 cv500.751 52.0098 509.741 46.8599 516.501 40.7998 cvcp547.221 0 mo547.221 222.73 547.221 445.43 547.221 668.16 cv364.821 668.16 182.431 668.16 0.0209961 668.16 cv0.0209961 445.91 0.0209961 223.69 0.0209961 1.43994 cv-0.019043 0.759766 -0.059082 0.0800781 0.500977 0 cv182.741 0 364.971 0 547.221 0 cvcpfalse sop/0 <</Name (Black)/0 [/DeviceCMYK] /CSA add_res/CSA /0 get_csa_by_name/MappedCSA /0 /CSA get_res/TintMethod /Subtractive/TintProc null/NComponents 4 /Components [ 0 0 0 1 ] >>/CSD add_res1 /0 /CSD get_res sepcs0 sepf149.781 180.48 mo139.951 182.81 131.541 186.56 123.381 190.56 cv132.301 187.32 141.111 183.97 149.781 180.48 cvcp153.621 195.36 mo159.441 192.7 166.521 191.3 172.341 188.64 cv164.941 189.26 156.671 191.97 153.621 195.36 cvcp196.341 192 mo190.431 193.45 186.071 196.45 181.941 199.68 cv184.591 198.66 192.711 194.53 196.341 192 cvcp222.261 197.76 mo218.001 198.15 214.121 200.41 210.261 202.08 cv206.551 203.68 202.001 204.78 200.181 207.36 cv207.201 203.82 215.311 201.37 222.261 197.76 cvcp222.261 449.76 mo225.821 445.85 235.831 437.77 235.221 430.56 cv234.861 426.23 230.941 424.28 226.101 424.8 cv219.441 425.52 211.671 431.72 205.941 433.44 cv199.301 448.72 191.441 462.78 189.141 482.4 cv199.651 480.72 216.551 476.35 222.741 468 cv226.281 463.21 229.281 451.91 222.261 449.76 cvcp246.741 215.04 mo239.331 215.3 234.051 218.18 229.941 221.28 cv227.991 222.75 225.541 224.56 225.141 226.56 cv231.911 222.29 240.231 219.57 246.741 215.04 cvcp254.901 228.96 mo247.501 229.88 242.401 233.1 238.101 237.12 cv243.811 234.51 249.731 232.11 254.901 228.96 cvcp251.061 411.84 mo253.211 407.11 255.911 402.93 257.781 397.92 cv242.291 397.95 227.641 398.82 214.101 400.8 cv209.981 406.6 205.231 411.77 202.101 418.56 cv217.091 414.99 232.711 412.05 251.061 411.84 cvcp251.541 308.64 mo252.491 308.2 252.491 307.03 251.541 308.16 cv241.661 313 232.021 318.08 223.221 324 cv222.101 324.27 222.101 325.44 223.221 324.48 cv232.491 319.03 241.921 313.74 251.541 308.64 cvcp258.261 318.73 mo258.261 318.81 261.431 317.66 259.221 317.28 cv255.491 321.38 249.931 324.94 246.261 329.28 cv245.211 330.52 243.771 332.36 243.861 334.08 cv247.841 329.07 254.011 323.13 258.261 318.73 cvcp258.261 311.52 mo259.211 310.82 261.721 309.47 260.181 309.12 cv249.781 314.08 237.811 320.03 232.821 328.8 cv240.291 322.89 250.721 317.08 258.261 311.52 cvcp256.341 334.56 mo258.921 328.98 264.161 323.5 265.941 318.72 cv262.531 323.47 255.701 327.36 256.341 334.56 cvcp257.781 244.8 mo262.771 239.23 271.351 234.69 275.061 229.44 cv268.371 233.31 261.101 239.16 257.781 244.8 cvcp267.861 334.56 mo268.941 329.88 272.791 325.41 273.141 321.6 cv271.461 325.69 267.091 329.62 267.861 334.56 cvcp273.621 376.32 mo273.831 376.06 276.161 374.47 274.581 373.92 cv265.101 373 254.091 373.61 243.861 373.44 cv235.401 379.75 225.101 387.82 218.421 395.52 cv217.641 396.42 215.441 398.79 216.981 398.88 cv230.281 397.3 244.261 396.4 259.221 396.48 cv262.821 389.45 269.071 381.99 273.621 376.32 cvcp279.381 329.76 mo278.781 327.22 280.851 324.85 279.381 323.04 cv279.801 325.23 278.001 329.74 279.381 329.76 cvcp296.181 231.36 mo284.631 233.73 278.611 241.63 271.701 248.64 cv271.511 249.16 271.121 249.79 271.701 249.12 cv280.091 243.43 288.241 237.5 296.181 231.36 cvcp267.861 452.16 mo279.561 454.17 289.121 441.58 287.061 431.04 cv284.631 418.61 258.231 422 245.781 423.36 cv238.701 439.48 229.451 453.43 225.141 472.32 cv230.581 472.32 236.021 472.32 241.461 472.32 cv242.311 469.75 243.701 467.2 244.821 464.64 cv245.901 462.16 246.461 459.01 248.661 457.44 cv249.221 460.22 250.511 463.06 251.541 465.6 cv252.581 468.16 253.261 471.18 255.381 472.8 cv259.981 473.96 266.001 473.7 270.741 474.72 cv270.461 466.52 268.351 460.15 267.861 452.16 cvcp276.501 372.48 mo283.081 366.26 289.671 360.05 297.141 354.72 cv274.641 354.94 259.491 362.51 246.261 372 cv256.441 372.06 267.011 371.73 276.501 372.48 cvcp285.621 284.64 mo289.271 281.41 292.311 277.57 293.781 272.16 cv291.451 268.7 285.391 267.05 279.861 268.32 cv279.761 268.86 279.331 269.07 278.901 269.28 cv277.401 279.3 273.291 286.71 267.861 292.8 cv270.391 292.75 266.081 295.47 267.861 296.16 cv268.901 294.86 270.511 292.12 272.181 294.24 cv273.261 292.76 274.121 291.06 275.541 289.92 cv276.171 289.93 275.981 290.76 276.501 290.88 cv277.581 289.4 278.861 288.12 280.341 287.04 cv280.601 287.74 279.781 289.52 280.821 289.44 cv282.331 287.11 283.731 284.67 285.621 282.72 cv285.621 283.36 285.621 284 285.621 284.64 cvcp299.541 352.32 mo298.381 348.8 294.511 351.18 291.861 351.84 cv288.731 352.62 285.061 353.33 282.741 354.24 cv282.231 354.22 281.521 354.47 282.261 354.72 cv287.351 353.25 294.871 354.21 299.541 352.32 cvcp319.701 418.56 mo321.381 415.12 323.151 411.77 324.501 408 cv305.421 402.44 284.501 398.72 260.181 398.4 cv256.991 401.93 255.361 407.02 252.981 411.36 cv278.071 410.91 299.661 413.96 319.701 418.56 cvcp325.461 227.52 mo323.351 219.11 318.541 216.6 312.021 212.16 cv308.711 209.91 305.421 206.92 302.421 205.44 cv298.311 203.41 293.631 202.75 289.941 200.16 cv287.341 198.33 285.771 195.13 283.221 192.96 cv280.011 190.23 275.801 188.16 271.701 185.76 cv262.921 180.62 255.471 176.71 244.341 173.76 cv239.061 172.36 233.111 171.41 227.541 170.4 cv216.351 168.37 204.451 165.11 192.501 165.6 cv208.011 171.5 223.831 174.9 240.501 179.04 cv245.841 180.36 252.071 181.16 256.821 183.36 cv261.111 185.35 265.421 189.54 269.781 192.96 cv278.361 199.69 288.241 204.47 298.581 209.28 cv304.041 211.82 310.351 213.49 314.421 216.48 cv318.691 219.62 321.081 225.23 325.461 227.52 cvcp325.461 406.56 mo329.311 398.57 333.491 390.91 337.941 383.52 cv319.721 378.54 299.531 375.53 277.941 373.92 cv271.221 380.64 265.621 388.48 260.661 396.96 cv285.171 397.25 305.891 401.33 325.461 406.56 cvcp327.381 490.56 mo329.281 472.14 331.901 454.44 333.621 435.84 cv326.641 432.74 318.161 431.14 309.621 429.6 cv295.991 443.17 282.971 457.35 272.661 474.24 cv279.021 475.56 284.951 477.31 290.901 479.04 cv292.621 475.48 294.581 472.16 297.621 469.92 cv301.251 470.93 305.691 471.13 308.181 473.28 cv308.181 476.96 308.181 480.64 308.181 484.32 cv314.541 486.44 320.511 488.95 327.381 490.56 cvcp343.221 315.84 mo343.791 314.33 344.051 312.51 345.141 311.52 cv342.141 305.24 337.771 300.33 333.621 295.2 cv327.951 295.11 324.771 292.53 321.141 290.4 cv323.271 295.47 327.311 298.63 333.141 300 cv331.321 300.58 329.271 300.93 327.861 301.92 cv330.001 302.82 333.061 302.8 335.061 303.84 cv333.441 304.15 331.561 304.18 330.741 305.28 cv332.371 306.85 335.121 307.29 337.461 308.16 cv335.851 308.46 333.961 308.5 333.141 309.6 cv334.641 310.5 337.601 309.94 338.901 311.04 cv337.731 311.31 336.431 311.45 336.501 312.96 cv339.071 313.59 339.551 316.31 343.221 315.84 cvcp338.901 382.08 mo342.981 374.32 348.761 368.25 353.301 360.96 cv349.121 360.18 345.211 359.12 341.301 358.08 cv333.161 358.75 318.491 364.63 310.101 364.32 cv304.611 364.12 302.601 358.78 300.021 354.72 cv292.351 359.85 285.341 365.64 279.381 372.48 cv300.701 374.2 320.531 377.41 338.901 382.08 cvcp360.981 316.8 mo357.301 316.8 354.761 315.66 351.861 314.88 cv351.781 315.44 351.941 316.24 351.381 316.32 cv350.531 315.89 350.591 314.55 349.461 314.4 cv348.841 316.04 348.231 316.78 347.541 314.88 cv347.411 316.35 346.501 317.04 346.101 318.24 cv346.791 318.51 347.271 318.99 347.541 319.68 cv352.311 319.01 357.141 318.4 360.981 316.8 cvcp355.221 309.6 mo356.181 309.8 358.781 310.79 359.541 309.6 cv355.411 303.17 352.961 295.06 347.541 289.92 cv347.341 294.28 348.611 297.17 349.461 300.48 cv351.031 300.67 352.561 300.9 352.821 302.4 cv351.971 302.51 350.421 301.92 350.901 303.36 cv352.131 303.41 353.191 303.63 353.781 304.32 cv352.951 304.29 352.551 304.69 352.341 305.28 cv353.511 305.55 354.811 305.69 354.741 307.2 cv354.181 307.27 353.381 307.12 353.301 307.68 cv354.731 307.95 357.241 308.58 355.221 309.6 cvcp357.141 357.12 mo357.691 356.67 360.701 354.78 358.581 354.72 cv354.531 355.63 350.671 356.73 346.101 357.12 cv347.701 359.2 351.831 358.75 354.261 360 cv355.421 359.24 356.381 358.28 357.141 357.12 cvcp383.061 340.8 mo386.171 331.42 384.641 314.86 372.981 317.28 cv372.691 319.04 376.151 319.51 374.421 321.12 cv371.461 321.75 369.591 318.97 366.741 318.72 cv361.521 318.27 354.861 321.78 350.421 322.08 cv356.761 323.13 368.151 319.13 366.741 327.84 cv363.011 327.98 361.531 324.09 357.621 325.92 cv360.281 327.88 362.451 337.33 358.581 339.84 cv357.331 335.17 354.561 332.02 351.861 328.8 cv350.501 328.88 349.861 329.68 348.501 329.76 cv346.091 332.42 349.361 337.9 347.061 340.32 cv339.561 339.4 341.951 329.73 344.661 325.44 cv343.941 324.72 342.641 324.58 342.261 323.52 cv332.641 325.1 323.571 327.23 313.941 328.8 cv317.781 332.51 320.211 343.12 318.261 352.32 cv339.331 347.95 361.461 344.64 383.061 340.8 cvcp413.781 612 mo396.121 582.46 375.951 551.85 348.021 529.92 cv319.741 507.71 285.901 491.55 235.701 493.92 cv216.261 494.84 199.221 498.09 181.461 501.6 cv182.871 531.43 193.271 555.58 206.901 575.52 cv220.421 595.3 237.931 611.74 259.221 623.04 cv281.351 634.78 310.461 641.54 340.821 638.88 cv370.721 636.26 394.171 625.31 413.781 612 cvcp398.901 473.76 mo394.121 469.26 387.921 466.18 382.101 462.72 cv379.111 468.69 375.471 474.01 372.021 479.52 cv371.091 472.45 371.731 463.81 371.541 456 cv366.041 452.06 360.911 447.75 353.781 445.44 cv344.941 459.8 337.701 475.76 330.261 491.52 cv337.641 493.74 343.311 497.67 349.461 501.12 cv352.731 495.11 354.881 487.98 358.581 482.4 cv359.511 491.07 360.691 499.49 361.461 508.32 cv367.811 511.25 372.701 515.64 378.261 519.36 cv384.761 503.78 392.341 489.28 398.901 473.76 cvcp391.221 451.2 mo391.661 446.68 393.661 443.72 394.101 439.2 cv374.511 425.99 351.941 415.76 326.421 408.48 cv324.161 411.5 323.111 415.73 321.141 419.04 cv347.971 426.29 370.681 437.66 391.221 451.2 cvcp395.061 437.28 mo397.021 428.04 399.701 419.52 401.301 409.92 cv383.271 398.83 362.641 390.33 339.861 384 cv334.641 390.78 331.001 399.14 326.901 407.04 cv352.601 414.14 374.391 425.15 395.061 437.28 cvcp401.781 408 mo403.391 400.17 404.391 391.73 405.621 383.52 cv390.691 374.45 373.901 367.24 355.221 361.92 cv349.591 368.13 344.791 375.17 340.341 382.56 cv363.131 388.73 383.121 397.7 401.781 408 cvcp405.621 381.6 mo405.871 377.69 405.861 373.52 406.581 370.08 cv401.351 366.91 395.171 363.59 388.341 360.48 cv381.351 357.3 371.051 351.93 362.901 353.76 cv360.871 356.21 357.681 357.5 356.661 360.96 cv375.031 365.79 390.731 373.29 405.621 381.6 cvcp409.941 206.88 mo416.791 206.26 410.711 197.41 407.541 203.04 cv407.381 205.28 408.871 205.87 409.941 206.88 cvcp402.741 200.64 mo407.031 198.61 412.191 200.43 417.141 199.2 cv414.091 197.87 410.641 198.44 406.581 198.24 cv400.391 197.94 393.661 196.09 388.341 196.8 cv381.451 197.72 375.091 201.44 368.661 202.08 cv363.371 202.61 357.911 200.06 352.821 200.64 cv347.831 201.21 343.871 206.59 341.301 210.24 cv339.121 213.34 336.771 216.79 336.501 219.36 cv346.001 213.18 355.071 204.01 368.661 203.52 cv367.551 204.97 365.651 205.63 364.821 207.36 cv370.061 205.72 374.311 203.09 379.701 201.6 cv379.781 202.32 379.531 203.37 380.181 203.52 cv382.341 201.84 384.721 200.38 387.381 199.2 cv387.281 200.1 385.461 201.69 386.421 202.08 cv388.901 200.56 391.231 198.89 395.061 198.72 cv395.411 200.03 394.111 199.69 394.101 200.64 cv397.001 200.02 399.471 198.97 403.221 199.2 cv403.241 199.86 402.991 200.25 402.741 200.64 cvcp419.541 319.68 mo407.441 319.94 404.571 310.97 390.741 312.96 cv390.261 312.96 390.171 313.35 389.781 313.44 cv388.781 316.93 390.241 321.43 393.141 322.56 cv398.821 318.48 411.281 321.18 419.541 319.68 cvcp425.781 396 mo424.091 390.97 422.821 385.52 420.981 380.64 cv416.411 377.53 412.511 373.75 407.541 371.04 cv407.911 375.41 406.791 378.29 407.061 382.56 cv413.631 386.39 420.271 392.71 425.781 396 cvcp421.941 475.68 mo423.051 471.19 424.451 466.99 425.301 462.24 cv416.291 453.97 406.471 446.51 395.541 440.16 cv394.671 444.41 393.301 448.16 392.181 452.16 cv402.781 459.32 412.311 467.55 421.941 475.68 cvcp428.181 201.12 mo428.181 200.48 428.181 199.84 428.181 199.2 cv426.431 199.22 423.041 202.14 423.861 201.6 cv425.321 201.45 426.731 199.81 428.181 201.12 cvcp424.341 521.28 mo426.261 516.8 429.371 513.51 431.061 508.8 cv427.491 502.62 424.581 493.66 418.581 489.12 cv413.081 484.96 403.911 484.53 397.941 488.64 cv394.941 490.7 391.641 495.73 389.781 499.68 cv380.671 519.04 392.561 541.71 406.581 548.16 cv408.271 546.94 409.061 545.2 410.901 542.88 cv411.921 541.59 415.291 538.72 415.221 537.6 cv415.161 536.69 411.011 533.72 408.981 530.88 cv407.551 528.87 405.271 524.54 404.661 522.24 cv402.921 515.66 406.061 506.04 413.781 506.88 cv420.561 507.62 420.951 516.11 424.341 521.28 cvcp425.781 459.36 mo427.871 450.41 428.711 440.21 429.141 429.6 cv421.231 422.47 412.341 416.32 402.741 410.88 cv400.621 420.12 398.741 429.6 396.021 438.24 cv405.061 443.59 414.671 451.71 422.421 457.92 cv423.191 458.54 425.901 460.9 425.781 459.36 cvcp426.261 425.28 mo427.111 425.88 429.351 427.92 429.141 426.24 cv428.791 416.51 427.861 407.36 426.261 398.88 cv419.911 393.87 414.171 388.25 406.581 384.48 cv406.231 393.41 404.281 400.74 403.221 408.96 cv410.961 413.4 419.341 420.41 426.261 425.28 cvcp442.581 412.8 mo442.771 412.97 444.111 415.8 444.501 413.76 cv441.941 408.33 441.721 402.32 438.741 397.92 cv436.971 395.3 433.821 392.69 431.541 390.24 cv429.061 387.58 425.931 385.42 423.381 383.04 cv424.801 387.86 426.541 392.36 427.221 397.92 cv432.481 401.78 437.961 408.65 442.581 412.8 cvcp446.421 499.68 mo447.261 494.43 448.251 489.35 449.301 484.32 cv441.771 477.29 434.801 469.7 426.741 463.2 cv425.281 467.66 424.481 472.78 422.901 477.12 cv429.001 482.39 435.411 488.71 440.661 494.4 cv442.451 496.34 443.561 499.61 446.421 499.68 cvcp444.021 564.48 mo445.671 556.69 448.381 547.57 447.861 541.92 cv447.621 539.35 445.621 535.53 444.021 531.84 cv441.411 525.8 438.921 520.14 434.901 517.44 cv430.861 523.55 426.231 529.02 421.941 534.72 cv417.871 540.13 413.791 545.44 409.941 551.04 cv412.971 555.53 415.621 560.4 419.061 564.48 cv422.171 564.42 423.131 559.92 425.301 560.16 cv426.461 560.29 430.461 566.67 430.581 567.36 cv431.271 571.26 427.921 575.92 428.181 580.32 cv428.541 586.36 432.901 587.3 433.461 591.36 cv438.991 588.88 440.041 582.99 441.621 575.52 cv442.361 572 443.271 568 444.021 564.48 cvcp448.341 444.48 mo448.481 444.62 449.551 447.67 450.261 445.92 cv449.621 441.03 449.541 436.25 448.821 432 cv448.101 427.71 447.501 422.33 445.941 419.04 cv445.241 417.55 443.171 416.43 441.621 414.72 cv437.481 410.18 432.011 403.71 428.181 400.8 cv429.361 409.54 430.551 418.27 430.581 428.16 cv435.721 433.54 443.311 439.28 448.341 444.48 cvcp449.301 481.44 mo451.271 472.37 450.641 460.7 450.741 449.76 cv444.471 442.91 437.791 436.47 430.581 430.56 cv430.181 441.52 428.841 451.54 427.221 461.28 cv433.531 466.86 440.891 474.44 446.901 480 cv447.361 480.42 448.381 483.08 449.301 481.44 cvcp450.741 422.88 mo455.011 428.03 459.151 433.38 462.741 437.28 cv457.061 425.48 450.501 411.88 442.581 404.16 cv445.481 408.45 444.751 413.75 446.901 418.08 cv447.581 419.46 449.541 421.43 450.741 422.88 cvcp468.981 530.4 mo470.661 524.56 471.621 518 472.821 511.68 cv464.851 503.64 458.831 493.67 450.261 486.24 cv449.741 491.96 448.071 496.53 447.381 502.08 cv454.901 511.2 462.021 520.72 468.981 530.4 cvcp472.821 473.76 mo471.801 468.62 470.671 463.81 469.461 458.88 cv468.291 454.11 467.651 448.6 465.621 444.48 cv464.681 442.58 462.611 440.54 461.301 438.72 cv456.901 432.59 452.761 426.28 447.861 422.4 cv450.091 430.09 451.461 438.64 451.701 448.32 cv454.881 452.55 459.131 456.34 462.741 460.8 cv466.281 465.19 468.981 470.8 472.821 473.76 cvcp472.821 508.8 mo474.491 499.69 473.741 487.46 473.301 477.6 cv466.321 468.9 460.281 459.26 452.181 451.68 cv451.971 457.51 452.451 463.94 452.181 469.92 cv451.951 474.98 450.061 480.28 450.741 483.36 cv451.171 485.31 454.221 487.54 456.021 489.6 cv461.871 496.29 466.911 502.24 471.381 508.8 cv472.081 508.79 472.901 510.82 472.821 508.8 cvcp491.541 45.6001 mo489.211 44.8198 487.111 45.2598 485.781 45.6001 cv476.861 47.8398 469.381 52.6699 461.301 57.6001 cv438.371 71.5698 417.131 87.2002 400.821 107.04 cv389.491 120.82 381.551 137.07 373.941 153.12 cv366.451 168.92 357.261 182.99 348.981 196.8 cv348.781 197.13 347.101 198.6 348.501 199.2 cv355.611 198.13 361.851 201.05 367.701 200.64 cv373.061 200.27 377.171 196.88 382.101 195.84 cv384.641 186.95 387.231 178.18 388.821 168.96 cv390.541 158.99 391.191 149.6 394.581 140.64 cv397.551 132.8 401.351 124.79 405.141 117.12 cv408.961 109.39 412.241 100.85 417.141 95.04 cv421.671 89.6699 428.281 85.54 433.941 81.1201 cv439.971 76.4102 445.751 71.7798 451.701 67.6802 cv464.091 59.1499 477.451 52.1401 491.541 45.6001 cvcp253.711 307.02 mo253.611 307.07 253.531 307.1 253.461 307.14 cv253.541 307.1 253.621 307.07 253.711 307.02 cvcp254.421 306.72 mo254.471 306.7 254.511 306.68 254.551 306.66 cv254.521 306.68 254.471 306.7 254.421 306.72 cvcp480.311 71.52 mo480.531 71.52 480.761 71.52 480.981 71.52 cv481.001 71.5098 481.011 71.5098 481.031 71.5 cv488.991 71.3301 497.571 68.2002 506.901 68.1602 cv506.091 71.9199 502.041 72.8599 499.221 74.3999 cv490.681 79.0498 480.851 83.5698 470.901 86.8799 cv477.071 86.9702 485.871 85.54 492.501 84.48 cv491.771 88.3198 487.351 88.7202 484.341 89.7598 cv474.891 93.0098 463.571 95.7798 454.101 98.8799 cv459.651 101.55 468.031 98.3398 472.821 98.8799 cv469.981 102.27 465.081 104.06 460.341 105.6 cv455.551 107.15 450.061 108.2 444.981 109.44 cv449.381 110.63 455.741 109.65 460.341 109.44 cv455.001 115.94 442.361 115.14 435.861 120.48 cv438.281 123.07 443.831 118.8 446.901 120.48 cv442.841 123.78 437.311 125.61 431.061 126.72 cv432.141 128.03 436.181 126.41 437.301 127.68 cv433.281 131.82 427.681 134.38 422.421 137.28 cv423.251 138.53 426.071 137.79 426.741 139.2 cv425.231 143.93 418.301 143.24 416.181 147.36 cv417.541 148.53 420.741 147.46 421.941 146.88 cv423.801 148.48 420.251 149.76 418.581 150.72 cv416.561 151.88 414.221 152.78 412.821 153.6 cv412.351 155.35 415.161 153.82 414.261 156 cv413.561 158.98 409.041 158.14 407.541 160.32 cv407.351 162.43 408.131 163.57 409.941 163.68 cv409.101 166.85 405.281 167.02 403.701 169.44 cv403.831 171.39 405.621 171.68 407.061 172.32 cv405.511 174.45 402.571 175.19 401.301 177.6 cv403.621 181.98 399.041 182.7 397.941 186.24 cv397.861 187.28 399.641 186.46 400.341 186.72 cv399.261 189.8 395.351 190.05 395.061 193.92 cv403.411 197.09 417.361 194.66 424.341 199.2 cv426.651 198.31 428.901 197.36 432.501 197.76 cv436.271 200.4 435.001 208.65 432.501 211.68 cv431.351 210.75 431.031 208.99 429.141 208.8 cv421.161 210.26 415.631 214.17 411.381 219.36 cv418.201 219.71 424.201 220.27 428.661 217.44 cv427.461 224.56 417.161 222.58 409.941 223.68 cv408.981 224.32 408.871 225.81 408.501 227.04 cv401.061 233.81 391.491 235.1 384.501 239.52 cv378.951 243.03 378.181 249.15 373.941 254.88 cv372.461 256.88 370.021 257.93 368.181 259.68 cv365.241 262.48 362.261 266.01 359.541 269.28 cv356.781 272.6 353.791 276.55 352.821 280.8 cv351.311 281.03 351.551 279.51 350.421 279.36 cv347.751 285.6 351.561 289.54 354.741 295.2 cv358.031 301.04 361.321 311.75 368.181 312.48 cv370.991 312.78 373.961 310.02 376.821 310.56 cv378.601 310.9 378.701 311.64 380.661 313.44 cv388.721 312.18 394.191 309.5 401.781 311.04 cv406.521 312 409.521 316.72 413.781 317.28 cv420.781 318.19 425.761 314.57 433.461 314.4 cv434.621 316.49 435.921 319.18 434.901 322.08 cv436.761 323.34 439.291 321.87 441.141 321.6 cv441.291 317.93 440.231 315.47 438.741 313.44 cv445.961 308.25 450.771 318.69 447.861 324.96 cv436.781 329.96 424.071 327.73 416.181 333.12 cv412.351 335.74 411.281 341.49 407.061 343.68 cv398.151 348.31 385.561 348.84 373.461 351.84 cv400.601 361.06 424.341 377.27 442.101 398.88 cv460.901 421.75 474.461 450.68 476.181 487.68 cv476.461 493.64 476.071 499.28 475.701 505.44 cv473.571 541.29 456.351 575.47 432.501 598.56 cv406.701 623.54 375.181 639.24 334.581 641.76 cv306.801 643.49 282.521 636.39 262.581 626.88 cv231.931 612.26 208.651 588.66 193.461 557.76 cv184.871 540.29 180.161 520.56 179.061 496.32 cv177.891 470.5 181.531 447.12 192.021 430.08 cv196.081 423.49 200.711 415.88 205.461 408.96 cv218.331 390.21 235.291 375.08 252.981 364.8 cv254.311 365.01 253.431 363.01 254.421 362.88 cv268.341 357.28 281.481 350.9 298.101 348 cv296.491 337.5 299.031 330.23 306.741 327.84 cv314.881 325.31 327.111 324.79 335.061 322.56 cv332.721 318.49 329.961 324.19 324.981 323.04 cv323.231 322.51 327.641 320.41 327.861 318.72 cv325.061 318.96 323.521 320.46 320.181 320.16 cv318.081 319.92 321.571 317.99 321.141 316.32 cv318.971 316.71 317.931 318.23 315.381 318.24 cv314.151 316.28 318.251 316.17 317.781 313.44 cv316.321 312.33 313.991 314.43 312.021 314.4 cv311.671 313.09 312.971 313.43 312.981 312.48 cv305.531 315.75 297.151 318.09 289.941 321.6 cv290.141 329.48 288.211 335.23 284.181 338.88 cv282.301 338.84 281.191 338.03 279.861 337.44 cv278.551 338.69 278.241 340.94 276.501 341.76 cv274.791 341.71 273.201 341.54 272.661 340.32 cv271.521 341.74 271.161 343.94 267.861 343.2 cv265.871 343.27 266.401 340.82 265.941 339.36 cv264.121 339.76 262.771 343.01 259.221 342.72 cv257.361 342.57 256.261 341.21 254.901 339.84 cv252.691 340.35 252.081 342.46 249.621 342.72 cv248.731 341.85 246.281 342.54 246.741 340.32 cv244.861 341.64 244.721 344.7 242.901 346.08 cv240.771 346.13 238.491 346.33 239.061 343.68 cv237.991 345.77 235.761 348.31 232.341 346.56 cv233.111 343.81 232.421 339.6 233.301 336.96 cv231.061 336.65 228.861 340.51 224.181 339.36 cv224.201 336.02 225.401 333.86 226.101 331.2 cv222.351 331.93 219.151 335.77 214.581 334.08 cv212.561 333.32 218.361 330.09 218.901 328.32 cv213.981 329.48 210.441 332.02 204.021 331.68 cv204.401 328.94 208.151 327.73 210.741 325.92 cv223.061 317.3 237.341 308.56 251.541 300.48 cv257.241 297.24 263.721 294.44 267.861 290.4 cv273.671 284.73 276.091 276.37 278.421 267.84 cv275.881 264.04 265.101 266.79 261.141 265.92 cv261.671 262.61 264.841 261.94 265.941 259.2 cv260.061 260.65 253.681 263.73 247.221 263.04 cv247.241 261.14 248.281 260.26 248.661 258.72 cv246.001 256.26 237.731 259.41 235.701 256.32 cv235.751 254.29 238.291 254.75 238.581 252.96 cv236.171 246.35 226.671 253.78 221.301 251.52 cv220.781 248.44 224.021 249.12 224.181 246.72 cv221.131 246.44 214.811 246.92 212.661 244.32 cv212.911 241.53 217.371 242.95 216.981 239.52 cv216.201 237.84 214.461 239.84 212.661 240 cv208.791 240.33 203.761 239.38 201.621 237.6 cv202.711 235.17 206.891 235.83 208.341 233.76 cv204.711 232.89 197.051 234.93 193.461 232.8 cv195.341 230.68 198.901 230.24 199.701 227.04 cv195.771 224.37 189.811 229.97 185.301 227.04 cv185.961 224.34 188.791 223.81 189.621 221.28 cv186.631 220.11 180.831 221.75 178.581 219.84 cv179.431 217.49 182.861 217.72 183.861 215.52 cv180.691 214.44 174.591 216.58 170.901 215.04 cv170.271 212.68 174.651 211.53 175.221 208.8 cv168.041 208.26 164.091 213.24 157.461 211.68 cv157.671 209.17 160.471 209.25 160.821 206.88 cv155.391 207.93 149.691 211 143.541 209.76 cv142.541 207.03 146.931 205.88 147.861 203.52 cv143.111 205.02 135.641 207.76 129.141 208.32 cv126.371 208.56 121.601 209.29 120.021 206.4 cv122.011 204.23 125.271 203.33 128.181 202.08 cv119.661 201.46 106.801 207.6 97.9409 203.52 cv97.7109 200.89 101.161 201.94 101.781 200.16 cv94.9312 201.56 86.9409 201.85 79.2212 201.12 cv78.0112 199.92 80.1411 199.6 80.6611 198.72 cv73.2109 199.94 63.811 199.37 60.021 195.36 cv62.561 192.97 66.7109 192.66 70.1011 192 cv80.8911 189.9 92.041 187.51 102.261 184.8 cv87.6709 185.82 68.6709 192.86 49.9409 190.56 cv45.8809 190.06 40.7808 189.51 38.4209 186.72 cv42.4111 184.79 49.061 185.52 54.2612 184.8 cv44.561 183.14 29.6509 186.69 26.4209 178.56 cv34.2412 175.22 42.8809 174.36 51.3809 173.28 cv60.1509 172.17 68.9609 170.88 77.7808 169.44 cv96.4111 166.4 114.371 163.35 133.941 161.76 cv179.221 158.07 227.921 164.32 261.141 177.12 cv271.461 181.1 281.461 187.2 289.461 193.92 cv293.481 197.29 297.301 200.79 302.421 203.52 cv304.771 204.77 307.511 205.66 310.101 206.88 cv314.881 209.13 316.951 211.41 324.501 210.72 cv332.041 210.03 338.501 206.38 343.221 202.08 cv353.001 187.38 362.141 171.53 370.101 154.56 cv377.781 138.17 386.131 121.8 397.941 108 cv415.341 87.6802 435.491 72.4902 459.381 57.6001 cv467.131 52.77 475.491 47.3101 483.861 45.1201 cv486.041 44.5498 489.871 43.9702 492.021 45.6001 cv502.051 41.3901 511.391 36.4902 521.781 32.6401 cv521.711 36.1001 518.781 38.7598 516.501 40.7998 cv509.741 46.8599 500.751 52.0098 491.061 55.6802 cv500.461 57.8799 507.641 53.7002 514.101 51.3599 cv511.031 63.1499 492.221 66.7998 481.031 71.5 cv480.791 71.52 480.551 71.52 480.311 71.52 cvcp1 /0 /CSD get_res sepcs1 sepf485.781 45.6001 mo487.111 45.2598 489.211 44.8198 491.541 45.6001 cv477.451 52.1401 464.091 59.1499 451.701 67.6802 cv445.751 71.7798 439.971 76.4102 433.941 81.1201 cv428.281 85.54 421.671 89.6699 417.141 95.04 cv412.241 100.85 408.961 109.39 405.141 117.12 cv401.351 124.79 397.551 132.8 394.581 140.64 cv391.191 149.6 390.541 158.99 388.821 168.96 cv387.231 178.18 384.641 186.95 382.101 195.84 cv377.171 196.88 373.061 200.27 367.701 200.64 cv361.851 201.05 355.611 198.13 348.501 199.2 cv347.101 198.6 348.781 197.13 348.981 196.8 cv357.261 182.99 366.451 168.92 373.941 153.12 cv381.551 137.07 389.491 120.82 400.821 107.04 cv417.131 87.2002 438.371 71.5698 461.301 57.6001 cv469.381 52.6699 476.861 47.8398 485.781 45.6001 cvcp1 /0 /CSD get_res sepcs0 sepf481.031 71.5 mo481.011 71.5098 481.001 71.5098 480.981 71.52 cv480.761 71.52 480.531 71.52 480.311 71.52 cv480.551 71.52 480.791 71.52 481.031 71.5 cvcpf473.301 477.6 mo473.741 487.46 474.491 499.69 472.821 508.8 cv472.901 510.82 472.081 508.79 471.381 508.8 cv466.911 502.24 461.871 496.29 456.021 489.6 cv454.221 487.54 451.171 485.31 450.741 483.36 cv450.061 480.28 451.951 474.98 452.181 469.92 cv452.451 463.94 451.971 457.51 452.181 451.68 cv460.281 459.26 466.321 468.9 473.301 477.6 cvcpf469.461 458.88 mo470.671 463.81 471.801 468.62 472.821 473.76 cv468.981 470.8 466.281 465.19 462.741 460.8 cv459.131 456.34 454.881 452.55 451.701 448.32 cv451.461 438.64 450.091 430.09 447.861 422.4 cv452.761 426.28 456.901 432.59 461.301 438.72 cv462.611 440.54 464.681 442.58 465.621 444.48 cv467.651 448.6 468.291 454.11 469.461 458.88 cvcpf472.821 511.68 mo471.621 518 470.661 524.56 468.981 530.4 cv462.021 520.72 454.901 511.2 447.381 502.08 cv448.071 496.53 449.741 491.96 450.261 486.24 cv458.831 493.67 464.851 503.64 472.821 511.68 cvcpf462.741 437.28 mo459.151 433.38 455.011 428.03 450.741 422.88 cv449.541 421.43 447.581 419.46 446.901 418.08 cv444.751 413.75 445.481 408.45 442.581 404.16 cv450.501 411.88 457.061 425.48 462.741 437.28 cvcpf450.741 449.76 mo450.641 460.7 451.271 472.37 449.301 481.44 cv448.381 483.08 447.361 480.42 446.901 480 cv440.891 474.44 433.531 466.86 427.221 461.28 cv428.841 451.54 430.181 441.52 430.581 430.56 cv437.791 436.47 444.471 442.91 450.741 449.76 cvcpf450.261 445.92 mo449.551 447.67 448.481 444.62 448.341 444.48 cv443.311 439.28 435.721 433.54 430.581 428.16 cv430.551 418.27 429.361 409.54 428.181 400.8 cv432.011 403.71 437.481 410.18 441.621 414.72 cv443.171 416.43 445.241 417.55 445.941 419.04 cv447.501 422.33 448.101 427.71 448.821 432 cv449.541 436.25 449.621 441.03 450.261 445.92 cvcpf434.901 553.92 mo434.231 550.99 436.301 548.3 434.901 546.24 cv433.981 547.56 432.861 548.68 431.541 549.6 cv432.391 551.31 433.181 553.08 434.901 553.92 cvcp447.861 541.92 mo448.381 547.57 445.671 556.69 444.021 564.48 cv443.271 568 442.361 572 441.621 575.52 cv440.041 582.99 438.991 588.88 433.461 591.36 cv432.901 587.3 428.541 586.36 428.181 580.32 cv427.921 575.92 431.271 571.26 430.581 567.36 cv430.461 566.67 426.461 560.29 425.301 560.16 cv423.131 559.92 422.171 564.42 419.061 564.48 cv415.621 560.4 412.971 555.53 409.941 551.04 cv413.791 545.44 417.871 540.13 421.941 534.72 cv426.231 529.02 430.861 523.55 434.901 517.44 cv438.921 520.14 441.411 525.8 444.021 531.84 cv445.621 535.53 447.621 539.35 447.861 541.92 cvcpf449.301 484.32 mo448.251 489.35 447.261 494.43 446.421 499.68 cv443.561 499.61 442.451 496.34 440.661 494.4 cv435.411 488.71 429.001 482.39 422.901 477.12 cv424.481 472.78 425.281 467.66 426.741 463.2 cv434.801 469.7 441.771 477.29 449.301 484.32 cvcpf444.501 413.76 mo444.111 415.8 442.771 412.97 442.581 412.8 cv437.961 408.65 432.481 401.78 427.221 397.92 cv426.541 392.36 424.801 387.86 423.381 383.04 cv425.931 385.42 429.061 387.58 431.541 390.24 cv433.821 392.69 436.971 395.3 438.741 397.92 cv441.721 402.32 441.941 408.33 444.501 413.76 cvcpf434.901 546.24 mo436.301 548.3 434.231 550.99 434.901 553.92 cv433.181 553.08 432.391 551.31 431.541 549.6 cv432.861 548.68 433.981 547.56 434.901 546.24 cvcp1 /0 /CSD get_res sepcs1 sepf429.141 426.24 mo429.351 427.92 427.111 425.88 426.261 425.28 cv419.341 420.41 410.961 413.4 403.221 408.96 cv404.281 400.74 406.231 393.41 406.581 384.48 cv414.171 388.25 419.911 393.87 426.261 398.88 cv427.861 407.36 428.791 416.51 429.141 426.24 cvcp1 /0 /CSD get_res sepcs0 sepf429.141 429.6 mo428.711 440.21 427.871 450.41 425.781 459.36 cv425.901 460.9 423.191 458.54 422.421 457.92 cv414.671 451.71 405.061 443.59 396.021 438.24 cv398.741 429.6 400.621 420.12 402.741 410.88 cv412.341 416.32 421.231 422.47 429.141 429.6 cvcpf431.061 508.8 mo429.371 513.51 426.261 516.8 424.341 521.28 cv420.951 516.11 420.561 507.62 413.781 506.88 cv406.061 506.04 402.921 515.66 404.661 522.24 cv405.271 524.54 407.551 528.87 408.981 530.88 cv411.011 533.72 415.161 536.69 415.221 537.6 cv415.291 538.72 411.921 541.59 410.901 542.88 cv409.061 545.2 408.271 546.94 406.581 548.16 cv392.561 541.71 380.671 519.04 389.781 499.68 cv391.641 495.73 394.941 490.7 397.941 488.64 cv403.911 484.53 413.081 484.96 418.581 489.12 cv424.581 493.66 427.491 502.62 431.061 508.8 cvcpf428.181 199.2 mo428.181 199.84 428.181 200.48 428.181 201.12 cv426.731 199.81 425.321 201.45 423.861 201.6 cv423.041 202.14 426.431 199.22 428.181 199.2 cvcpf425.301 462.24 mo424.451 466.99 423.051 471.19 421.941 475.68 cv412.311 467.55 402.781 459.32 392.181 452.16 cv393.301 448.16 394.671 444.41 395.541 440.16 cv406.471 446.51 416.291 453.97 425.301 462.24 cvcpf420.981 380.64 mo422.821 385.52 424.091 390.97 425.781 396 cv420.271 392.71 413.631 386.39 407.061 382.56 cv406.791 378.29 407.911 375.41 407.541 371.04 cv412.511 373.75 416.411 377.53 420.981 380.64 cvcpf390.741 312.96 mo404.571 310.97 407.441 319.94 419.541 319.68 cv411.281 321.18 398.821 318.48 393.141 322.56 cv390.241 321.43 388.781 316.93 389.781 313.44 cv390.171 313.35 390.261 312.96 390.741 312.96 cvcpf417.141 199.2 mo412.191 200.43 407.031 198.61 402.741 200.64 cv402.991 200.25 403.241 199.86 403.221 199.2 cv399.471 198.97 397.001 200.02 394.101 200.64 cv394.111 199.69 395.411 200.03 395.061 198.72 cv391.231 198.89 388.901 200.56 386.421 202.08 cv385.461 201.69 387.281 200.1 387.381 199.2 cv384.721 200.38 382.341 201.84 380.181 203.52 cv379.531 203.37 379.781 202.32 379.701 201.6 cv374.311 203.09 370.061 205.72 364.821 207.36 cv365.651 205.63 367.551 204.97 368.661 203.52 cv355.071 204.01 346.001 213.18 336.501 219.36 cv336.771 216.79 339.121 213.34 341.301 210.24 cv343.871 206.59 347.831 201.21 352.821 200.64 cv357.911 200.06 363.371 202.61 368.661 202.08 cv375.091 201.44 381.451 197.72 388.341 196.8 cv393.661 196.09 400.391 197.94 406.581 198.24 cv410.641 198.44 414.091 197.87 417.141 199.2 cvcpf411.861 202.08 mo412.511 203.5 412.461 205.05 411.381 205.92 cv409.421 206.12 408.351 205.43 408.501 203.52 cv410.311 204.24 410.661 203.88 409.941 202.08 cv410.581 202.08 411.221 202.08 411.861 202.08 cvcp1 /0 /CSD get_res sepcs1 sepf411.381 205.92 mo412.461 205.05 412.511 203.5 411.861 202.08 cv411.221 202.08 410.581 202.08 409.941 202.08 cv410.661 203.88 410.311 204.24 408.501 203.52 cv408.351 205.43 409.421 206.12 411.381 205.92 cvcp407.541 203.04 mo410.711 197.41 416.791 206.26 409.941 206.88 cv408.871 205.87 407.381 205.28 407.541 203.04 cvcp1 /0 /CSD get_res sepcs0 sepf406.581 370.08 mo405.861 373.52 405.871 377.69 405.621 381.6 cv390.731 373.29 375.031 365.79 356.661 360.96 cv357.681 357.5 360.871 356.21 362.901 353.76 cv371.051 351.93 381.351 357.3 388.341 360.48 cv395.171 363.59 401.351 366.91 406.581 370.08 cvcpf405.621 383.52 mo404.391 391.73 403.391 400.17 401.781 408 cv383.121 397.7 363.131 388.73 340.341 382.56 cv344.791 375.17 349.591 368.13 355.221 361.92 cv373.901 367.24 390.691 374.45 405.621 383.52 cvcpf401.301 409.92 mo399.701 419.52 397.021 428.04 395.061 437.28 cv374.391 425.15 352.601 414.14 326.901 407.04 cv331.001 399.14 334.641 390.78 339.861 384 cv362.641 390.33 383.271 398.83 401.301 409.92 cvcpf394.101 439.2 mo393.661 443.72 391.661 446.68 391.221 451.2 cv370.681 437.66 347.971 426.29 321.141 419.04 cv323.111 415.73 324.161 411.5 326.421 408.48 cv351.941 415.76 374.511 425.99 394.101 439.2 cvcpf382.101 462.72 mo387.921 466.18 394.121 469.26 398.901 473.76 cv392.341 489.28 384.761 503.78 378.261 519.36 cv372.701 515.64 367.811 511.25 361.461 508.32 cv360.691 499.49 359.511 491.07 358.581 482.4 cv354.881 487.98 352.731 495.11 349.461 501.12 cv343.311 497.67 337.641 493.74 330.261 491.52 cv337.701 475.76 344.941 459.8 353.781 445.44 cv360.911 447.75 366.041 452.06 371.541 456 cv371.731 463.81 371.091 472.45 372.021 479.52 cv375.471 474.01 379.111 468.69 382.101 462.72 cvcpf245.781 526.56 mo246.911 516.33 262.421 520.48 262.101 508.8 cv254.951 504.04 252.171 514.42 247.701 516.96 cv248.061 512.6 247.511 509.15 245.301 507.36 cv238.391 505.04 232.191 509.36 234.741 516.48 cv237.131 517.46 241.661 519.15 242.421 515.52 cv238.251 515.99 236.181 514.54 236.181 512.16 cv236.181 506.79 246.051 508.08 244.341 515.52 cv244.631 517.31 246.551 517.47 246.741 519.36 cv244.401 522.46 242.151 525.65 240.501 529.44 cv236.061 532.91 231.431 536.96 227.541 541.44 cv223.951 545.57 218.691 550.57 220.341 558.24 cv222.761 560.34 226.161 559.43 228.501 557.76 cv231.281 555.78 235.001 549.32 237.621 543.36 cv240.561 536.67 243.781 527.13 251.061 529.92 cv251.761 533.17 252.001 535.44 250.581 537.6 cv249.501 539.24 245.631 539.34 245.301 541.44 cv257.421 541.57 260.791 522.94 245.781 526.56 cvcp262.581 568.8 mo260.851 568.93 260.271 567.91 258.741 567.84 cv256.891 569.35 255.231 571.05 252.981 572.16 cv251.921 569.7 250.411 567.69 249.621 564.96 cv248.061 565.24 247.391 564.63 246.261 564.48 cv245.711 569.85 243.731 573.79 243.381 579.36 cv244.661 579.37 246.121 579.18 246.741 579.84 cv247.061 576.96 247.691 574.39 248.661 572.16 cv249.531 573.85 250.601 575.34 251.061 577.44 cv253.821 577.32 254.381 575 256.821 574.56 cv255.811 577.23 254.871 579.97 253.941 582.72 cv255.431 582.67 256.231 583.31 257.301 583.68 cv259.071 578.73 260.781 573.72 262.581 568.8 cvcp257.301 539.52 mo262.101 541.22 268.581 535.61 264.501 531.36 cv260.051 530.43 259.851 533.75 260.181 537.6 cv259.401 538.42 257.171 537.79 257.301 539.52 cvcp268.341 570.72 mo266.851 570.77 266.051 570.13 264.981 569.76 cv263.391 574.89 260.981 579.2 259.701 584.64 cv261.191 584.59 261.991 585.23 263.061 585.6 cv264.671 580.49 266.951 576.05 268.341 570.72 cvcp264.021 540.96 mo269.491 542.88 274.061 537.26 272.181 534.24 cv269.681 530.21 264.531 535.3 266.901 539.04 cv266.241 539.98 264.011 539.35 264.021 540.96 cvcp274.581 573.12 mo273.061 573.2 272.981 571.84 271.221 572.16 cv269.391 577.05 266.711 581.09 265.461 586.56 cv268.341 587.2 270.621 588.44 273.141 589.44 cv273.211 587.75 274.511 587.29 274.581 585.6 cv273.211 584.89 271.401 584.62 270.261 583.68 cv271.771 580.23 273.871 577.37 274.581 573.12 cvcp278.901 529.44 mo277.681 525.38 281.391 524.09 280.821 522.24 cv276.961 520.59 276.271 526.75 272.181 524.64 cv273.731 519.91 281.901 519.36 279.381 512.16 cv279.011 512.05 278.431 512.15 278.421 511.68 cv272.721 513.5 271.341 519.64 267.861 523.68 cv266.251 523.53 263.701 524.32 264.021 522.24 cv266.021 517.52 273.381 518.16 272.661 510.72 cv266.061 507.78 262.541 515.42 261.141 520.8 cv259.871 521.93 257.601 522.06 256.821 523.68 cv258.151 524.87 259.261 522.93 261.141 523.2 cv261.141 525.12 263.391 524.79 264.021 526.08 cv268.921 524.54 270.001 528.75 274.581 527.04 cv275.771 528.09 276.461 529.64 278.901 529.44 cvcp288.501 597.6 mo289.131 592.31 289.061 586.32 289.941 581.28 cv288.921 580.54 287.801 579.9 286.581 579.36 cv282.891 583.35 277.861 586 274.581 590.4 cv277.801 592.3 281.631 590.35 284.661 593.76 cv284.321 596.66 287.081 596.46 288.501 597.6 cvcp311.061 593.28 mo310.041 592.54 308.921 591.9 307.701 591.36 cv306.191 593.69 304.791 596.13 302.901 598.08 cv301.011 595.22 301.301 585.33 297.141 585.6 cv294.821 590.16 291.861 594.08 289.461 598.56 cv290.661 598.96 291.351 599.88 292.821 600 cv294.121 597.62 295.671 595.49 297.141 593.28 cv299.221 597.44 298.601 604.3 302.901 606.24 cv305.511 601.81 308.661 597.92 311.061 593.28 cvcp316.341 612.96 mo326.441 612.51 326.501 594.52 313.941 597.12 cv303.841 599.21 307.561 613.35 316.341 612.96 cvcp348.021 529.92 mo375.951 551.85 396.121 582.46 413.781 612 cv394.171 625.31 370.721 636.26 340.821 638.88 cv310.461 641.54 281.351 634.78 259.221 623.04 cv237.931 611.74 220.421 595.3 206.901 575.52 cv193.271 555.58 182.871 531.43 181.461 501.6 cv199.221 498.09 216.261 494.84 235.701 493.92 cv285.901 491.55 319.741 507.71 348.021 529.92 cvcp325.011 566.42 mo325.141 566.57 324.071 567.33 324.021 567.36 cv323.401 567.7 323.731 567.49 322.581 567.36 cv319.071 566.96 313.581 564.02 310.581 566.88 cv309.181 567.72 309.531 570.31 307.221 570.24 cv306.061 567.05 308.911 564.01 312.021 563.52 cv311.951 561.83 310.651 561.37 310.581 559.68 cv311.481 557.54 314.291 557.31 314.421 554.4 cv313.101 553.48 311.771 552.57 309.621 552.48 cv308.561 553.82 308.061 555.72 308.181 558.24 cv306.251 559.51 304.841 561.3 301.461 561.12 cv304.401 557.57 308.101 553.06 306.261 546.24 cv315.601 545.77 321.171 532.72 312.981 527.04 cv312.991 525.61 314.231 525.41 314.421 524.16 cv311.981 521.96 310.501 523.39 308.661 525.12 cv298.701 524.28 288.201 529.06 281.781 534.72 cv275.741 540.05 269.201 547.18 268.341 555.36 cv275.431 559.11 280.891 554.42 285.621 551.04 cv288.991 548.63 292.071 545.94 294.261 543.84 cv293.951 545.91 295.091 546.53 295.701 547.68 cv297.151 548.31 299.811 547.73 300.981 548.64 cv301.001 552.02 300.241 555.33 298.581 557.76 cv295.511 562.24 289.411 566.62 283.221 565.92 cv283.011 558.99 287.811 557.08 291.861 554.4 cv283.851 551.9 277.971 561.5 282.261 568.32 cv289.081 571.3 295.751 567.12 299.061 563.52 cv303.251 564.32 306.651 559.85 308.661 561.6 cv307.321 563.14 304.631 563.33 303.381 564.96 cv302.431 567.9 302.891 571.68 304.821 573.12 cv306.471 573.33 307.511 572.93 308.661 572.64 cv309.091 576.85 312.231 578.35 317.301 577.92 cv319.581 588.05 330.181 578.56 336.021 577.92 cv333.841 581.82 329.881 583.94 327.861 588 cv328.581 588.72 329.881 588.86 330.261 589.92 cv334.881 588.7 336.291 579.43 342.261 582.72 cv340.811 586.87 336.461 588.12 335.541 592.8 cv336.521 595.02 338.561 596.18 341.781 596.16 cv342.931 600.45 347.131 601.7 352.341 601.92 cv351.681 602.54 351.861 604 351.861 605.28 cv352.751 607.68 358.071 607.9 357.621 610.08 cv348.531 606.05 339.951 601.51 329.781 598.56 cv328.301 599.48 326.721 600.3 324.981 600.96 cv336.211 604.61 348.081 607.62 357.141 613.44 cv357.911 617.52 361.691 620.98 366.741 619.2 cv367.351 614.75 363.451 614.81 362.421 612 cv362.891 608.47 365.571 607.15 367.221 604.8 cv368.571 604.29 370.811 602.98 370.101 601.92 cv369.681 600.39 368.171 600.29 366.741 600.96 cv363.991 594.45 345.481 604.54 345.621 596.16 cv345.661 593.42 350.231 591.92 353.781 593.28 cv353.591 594.53 352.351 594.73 352.341 596.16 cv353.811 595.81 354.091 596.65 355.221 596.64 cv356.441 595.94 356.551 594.13 357.141 592.8 cv355.221 589.9 352.191 589 348.981 589.44 cv345.011 589.98 343.171 595.8 339.381 593.76 cv340.541 589 345.621 588.16 345.621 582.24 cv344.731 580.89 343.731 579.65 341.301 579.84 cv337.611 569.43 327.101 582.32 320.181 580.32 cv321.121 578.24 322.221 576.68 324.021 574.56 cv325.131 573.26 329.001 570.78 328.821 569.28 cv328.781 568.96 325.681 566.63 325.011 566.42 cvcpf372.981 317.28 mo384.641 314.86 386.171 331.42 383.061 340.8 cv361.461 344.64 339.331 347.95 318.261 352.32 cv320.211 343.12 317.781 332.51 313.941 328.8 cv323.571 327.23 332.641 325.1 342.261 323.52 cv342.641 324.58 343.941 324.72 344.661 325.44 cv341.951 329.73 339.561 339.4 347.061 340.32 cv349.361 337.9 346.091 332.42 348.501 329.76 cv349.861 329.68 350.501 328.88 351.861 328.8 cv354.561 332.02 357.331 335.17 358.581 339.84 cv362.451 337.33 360.281 327.88 357.621 325.92 cv361.531 324.09 363.011 327.98 366.741 327.84 cv368.151 319.13 356.761 323.13 350.421 322.08 cv354.861 321.78 361.521 318.27 366.741 318.72 cv369.591 318.97 371.461 321.75 374.421 321.12 cv376.151 319.51 372.691 319.04 372.981 317.28 cvcpf296.181 546.24 mo297.541 546.16 299.471 546.65 299.541 545.28 cv298.741 544.64 297.931 544.01 296.181 544.32 cv296.181 544.96 296.181 545.6 296.181 546.24 cvcp289.941 542.88 mo295.371 538.13 301.551 533.92 305.301 527.52 cv294.851 529.05 286.071 535.5 279.381 541.92 cv275.641 545.51 271.631 549.96 270.741 554.4 cv279.201 553.46 284.761 547.42 289.941 542.88 cvcp305.301 543.84 mo311.161 542.12 318.851 532.61 309.141 529.44 cv305.511 533.81 301.081 537.38 297.141 541.44 cv300.451 541.65 302.601 543.02 305.301 543.84 cvcp317.781 576.48 mo318.941 573.48 321.671 572.05 322.581 568.8 cv317.231 566.58 310.251 568.97 312.021 575.04 cv313.321 576.14 315.151 576.71 317.781 576.48 cvcp365.301 601.44 mo361.411 599.65 354.471 600.07 355.701 606.24 cv359.441 609.7 364.161 605 365.301 601.44 cvcp361.941 614.88 mo361.341 617.57 363.541 619.76 364.821 617.76 cv363.851 616.81 363.251 615.49 361.941 614.88 cvcp370.101 601.92 mo370.811 602.98 368.571 604.29 367.221 604.8 cv365.571 607.15 362.891 608.47 362.421 612 cv363.451 614.81 367.351 614.75 366.741 619.2 cv361.691 620.98 357.911 617.52 357.141 613.44 cv348.081 607.62 336.211 604.61 324.981 600.96 cv326.721 600.3 328.301 599.48 329.781 598.56 cv339.951 601.51 348.531 606.05 357.621 610.08 cv358.071 607.9 352.751 607.68 351.861 605.28 cv351.861 604 351.681 602.54 352.341 601.92 cv347.131 601.7 342.931 600.45 341.781 596.16 cv338.561 596.18 336.521 595.02 335.541 592.8 cv336.461 588.12 340.811 586.87 342.261 582.72 cv336.291 579.43 334.881 588.7 330.261 589.92 cv329.881 588.86 328.581 588.72 327.861 588 cv329.881 583.94 333.841 581.82 336.021 577.92 cv330.181 578.56 319.581 588.05 317.301 577.92 cv312.231 578.35 309.091 576.85 308.661 572.64 cv307.511 572.93 306.471 573.33 304.821 573.12 cv302.891 571.68 302.431 567.9 303.381 564.96 cv304.631 563.33 307.321 563.14 308.661 561.6 cv306.651 559.85 303.251 564.32 299.061 563.52 cv295.751 567.12 289.081 571.3 282.261 568.32 cv277.971 561.5 283.851 551.9 291.861 554.4 cv287.811 557.08 283.011 558.99 283.221 565.92 cv289.411 566.62 295.511 562.24 298.581 557.76 cv300.241 555.33 301.001 552.02 300.981 548.64 cv299.811 547.73 297.151 548.31 295.701 547.68 cv295.091 546.53 293.951 545.91 294.261 543.84 cv292.071 545.94 288.991 548.63 285.621 551.04 cv280.891 554.42 275.431 559.11 268.341 555.36 cv269.201 547.18 275.741 540.05 281.781 534.72 cv288.201 529.06 298.701 524.28 308.661 525.12 cv310.501 523.39 311.981 521.96 314.421 524.16 cv314.231 525.41 312.991 525.61 312.981 527.04 cv321.171 532.72 315.601 545.77 306.261 546.24 cv308.101 553.06 304.401 557.57 301.461 561.12 cv304.841 561.3 306.251 559.51 308.181 558.24 cv308.061 555.72 308.561 553.82 309.621 552.48 cv311.771 552.57 313.101 553.48 314.421 554.4 cv314.291 557.31 311.481 557.54 310.581 559.68 cv310.651 561.37 311.951 561.83 312.021 563.52 cv308.911 564.01 306.061 567.05 307.221 570.24 cv309.531 570.31 309.181 567.72 310.581 566.88 cv313.581 564.02 319.071 566.96 322.581 567.36 cv323.731 567.49 323.401 567.7 324.021 567.36 cv324.071 567.33 325.141 566.57 325.011 566.42 cv325.681 566.63 328.781 568.96 328.821 569.28 cv329.001 570.78 325.131 573.26 324.021 574.56 cv322.221 576.68 321.121 578.24 320.181 580.32 cv327.101 582.32 337.611 569.43 341.301 579.84 cv343.731 579.65 344.731 580.89 345.621 582.24 cv345.621 588.16 340.541 589 339.381 593.76 cv343.171 595.8 345.011 589.98 348.981 589.44 cv352.191 589 355.221 589.9 357.141 592.8 cv356.551 594.13 356.441 595.94 355.221 596.64 cv354.091 596.65 353.811 595.81 352.341 596.16 cv352.351 594.73 353.591 594.53 353.781 593.28 cv350.231 591.92 345.661 593.42 345.621 596.16 cv345.481 604.54 363.991 594.45 366.741 600.96 cv368.171 600.29 369.681 600.39 370.101 601.92 cvcp1 /0 /CSD get_res sepcs1 sepf364.821 617.76 mo363.541 619.76 361.341 617.57 361.941 614.88 cv363.251 615.49 363.851 616.81 364.821 617.76 cvcp1 /0 /CSD get_res sepcs0 sepf355.701 606.24 mo354.471 600.07 361.411 599.65 365.301 601.44 cv364.161 605 359.441 609.7 355.701 606.24 cvcpf358.581 354.72 mo360.701 354.78 357.691 356.67 357.141 357.12 cv356.381 358.28 355.421 359.24 354.261 360 cv351.831 358.75 347.701 359.2 346.101 357.12 cv350.671 356.73 354.531 355.63 358.581 354.72 cvcpf359.541 309.6 mo358.781 310.79 356.181 309.8 355.221 309.6 cv357.241 308.58 354.731 307.95 353.301 307.68 cv353.381 307.12 354.181 307.27 354.741 307.2 cv354.811 305.69 353.511 305.55 352.341 305.28 cv352.551 304.69 352.951 304.29 353.781 304.32 cv353.191 303.63 352.131 303.41 350.901 303.36 cv350.421 301.92 351.971 302.51 352.821 302.4 cv352.561 300.9 351.031 300.67 349.461 300.48 cv348.611 297.17 347.341 294.28 347.541 289.92 cv352.961 295.06 355.411 303.17 359.541 309.6 cvcpf351.861 314.88 mo354.761 315.66 357.301 316.8 360.981 316.8 cv357.141 318.4 352.311 319.01 347.541 319.68 cv347.271 318.99 346.791 318.51 346.101 318.24 cv346.501 317.04 347.411 316.35 347.541 314.88 cv348.231 316.78 348.841 316.04 349.461 314.4 cv350.591 314.55 350.531 315.89 351.381 316.32 cv351.941 316.24 351.781 315.44 351.861 314.88 cvcpf353.301 360.96 mo348.761 368.25 342.981 374.32 338.901 382.08 cv320.531 377.41 300.701 374.2 279.381 372.48 cv285.341 365.64 292.351 359.85 300.021 354.72 cv302.601 358.78 304.611 364.12 310.101 364.32 cv318.491 364.63 333.161 358.75 341.301 358.08 cv345.211 359.12 349.121 360.18 353.301 360.96 cvcpf345.141 311.52 mo344.051 312.51 343.791 314.33 343.221 315.84 cv339.551 316.31 339.071 313.59 336.501 312.96 cv336.431 311.45 337.731 311.31 338.901 311.04 cv337.601 309.94 334.641 310.5 333.141 309.6 cv333.961 308.5 335.851 308.46 337.461 308.16 cv335.121 307.29 332.371 306.85 330.741 305.28 cv331.561 304.18 333.441 304.15 335.061 303.84 cv333.061 302.8 330.001 302.82 327.861 301.92 cv329.271 300.93 331.321 300.58 333.141 300 cv327.311 298.63 323.271 295.47 321.141 290.4 cv324.771 292.53 327.951 295.11 333.621 295.2 cv337.771 300.33 342.141 305.24 345.141 311.52 cvcpf310.581 458.4 mo310.111 456.01 312.941 452.34 310.581 451.2 cv309.181 453.64 306.421 454.71 304.821 456.96 cv306.811 457.37 308.331 458.25 310.581 458.4 cvcp333.621 435.84 mo331.901 454.44 329.281 472.14 327.381 490.56 cv320.511 488.95 314.541 486.44 308.181 484.32 cv308.181 480.64 308.181 476.96 308.181 473.28 cv305.691 471.13 301.251 470.93 297.621 469.92 cv294.581 472.16 292.621 475.48 290.901 479.04 cv284.951 477.31 279.021 475.56 272.661 474.24 cv282.971 457.35 295.991 443.17 309.621 429.6 cv318.161 431.14 326.641 432.74 333.621 435.84 cvcpf337.941 383.52 mo333.491 390.91 329.311 398.57 325.461 406.56 cv305.891 401.33 285.171 397.25 260.661 396.96 cv265.621 388.48 271.221 380.64 277.941 373.92 cv299.531 375.53 319.721 378.54 337.941 383.52 cvcpf312.021 212.16 mo318.541 216.6 323.351 219.11 325.461 227.52 cv321.081 225.23 318.691 219.62 314.421 216.48 cv310.351 213.49 304.041 211.82 298.581 209.28 cv288.241 204.47 278.361 199.69 269.781 192.96 cv265.421 189.54 261.111 185.35 256.821 183.36 cv252.071 181.16 245.841 180.36 240.501 179.04 cv223.831 174.9 208.011 171.5 192.501 165.6 cv204.451 165.11 216.351 168.37 227.541 170.4 cv233.111 171.41 239.061 172.36 244.341 173.76 cv255.471 176.71 262.921 180.62 271.701 185.76 cv275.801 188.16 280.011 190.23 283.221 192.96 cv285.771 195.13 287.341 198.33 289.941 200.16 cv293.631 202.75 298.311 203.41 302.421 205.44 cv305.421 206.92 308.711 209.91 312.021 212.16 cvcpf322.581 568.8 mo321.671 572.05 318.941 573.48 317.781 576.48 cv315.151 576.71 313.321 576.14 312.021 575.04 cv310.251 568.97 317.231 566.58 322.581 568.8 cvcpf324.501 408 mo323.151 411.77 321.381 415.12 319.701 418.56 cv299.661 413.96 278.071 410.91 252.981 411.36 cv255.361 407.02 256.991 401.93 260.181 398.4 cv284.501 398.72 305.421 402.44 324.501 408 cvcpf314.421 600.96 mo321.581 598.52 320.681 608.95 315.861 609.12 cv312.211 609.25 309.311 602.71 314.421 600.96 cvcpf315.861 609.12 mo320.681 608.95 321.581 598.52 314.421 600.96 cv309.311 602.71 312.211 609.25 315.861 609.12 cvcp313.941 597.12 mo326.501 594.52 326.441 612.51 316.341 612.96 cv307.561 613.35 303.841 599.21 313.941 597.12 cvcp1 /0 /CSD get_res sepcs1 sepf310.581 451.2 mo312.941 452.34 310.111 456.01 310.581 458.4 cv308.331 458.25 306.811 457.37 304.821 456.96 cv306.421 454.71 309.181 453.64 310.581 451.2 cvcpf309.141 529.44 mo318.851 532.61 311.161 542.12 305.301 543.84 cv302.601 543.02 300.451 541.65 297.141 541.44 cv301.081 537.38 305.511 533.81 309.141 529.44 cvcp1 /0 /CSD get_res sepcs0 sepf307.701 591.36 mo308.921 591.9 310.041 592.54 311.061 593.28 cv308.661 597.92 305.511 601.81 302.901 606.24 cv298.601 604.3 299.221 597.44 297.141 593.28 cv295.671 595.49 294.121 597.62 292.821 600 cv291.351 599.88 290.661 598.96 289.461 598.56 cv291.861 594.08 294.821 590.16 297.141 585.6 cv301.301 585.33 301.011 595.22 302.901 598.08 cv304.791 596.13 306.191 593.69 307.701 591.36 cvcp1 /0 /CSD get_res sepcs1 sepf305.301 527.52 mo301.551 533.92 295.371 538.13 289.941 542.88 cv284.761 547.42 279.201 553.46 270.741 554.4 cv271.631 549.96 275.641 545.51 279.381 541.92 cv286.071 535.5 294.851 529.05 305.301 527.52 cvcp1 /0 /CSD get_res sepcs0 sepf299.541 545.28 mo299.471 546.65 297.541 546.16 296.181 546.24 cv296.181 545.6 296.181 544.96 296.181 544.32 cv297.931 544.01 298.741 544.64 299.541 545.28 cvcpf291.861 351.84 mo294.511 351.18 298.381 348.8 299.541 352.32 cv294.871 354.21 287.351 353.25 282.261 354.72 cv281.521 354.47 282.231 354.22 282.741 354.24 cv285.061 353.33 288.731 352.62 291.861 351.84 cvcpf293.781 272.16 mo292.311 277.57 289.271 281.41 285.621 284.64 cv285.621 284 285.621 283.36 285.621 282.72 cv283.731 284.67 282.331 287.11 280.821 289.44 cv279.781 289.52 280.601 287.74 280.341 287.04 cv278.861 288.12 277.581 289.4 276.501 290.88 cv275.981 290.76 276.171 289.93 275.541 289.92 cv274.121 291.06 273.261 292.76 272.181 294.24 cv270.511 292.12 268.901 294.86 267.861 296.16 cv266.081 295.47 270.391 292.75 267.861 292.8 cv273.291 286.71 277.401 279.3 278.901 269.28 cv279.331 269.07 279.761 268.86 279.861 268.32 cv285.391 267.05 291.451 268.7 293.781 272.16 cvcpf282.261 588.48 mo283.671 588.35 283.731 589.57 285.141 589.44 cv284.851 588.29 285.741 585.96 284.661 585.6 cv284.481 587.18 282.111 586.57 282.261 588.48 cvcp289.941 581.28 mo289.061 586.32 289.131 592.31 288.501 597.6 cv287.081 596.46 284.321 596.66 284.661 593.76 cv281.631 590.35 277.801 592.3 274.581 590.4 cv277.861 586 282.891 583.35 286.581 579.36 cv287.801 579.9 288.921 580.54 289.941 581.28 cvcp1 /0 /CSD get_res sepcs1 sepf297.141 354.72 mo289.671 360.05 283.081 366.26 276.501 372.48 cv267.011 371.73 256.441 372.06 246.261 372 cv259.491 362.51 274.641 354.94 297.141 354.72 cvcp1 /0 /CSD get_res sepcs0 sepf254.901 442.56 mo260.141 442.71 265.521 442.63 265.461 438.72 cv265.421 436.04 262.121 434.8 257.781 434.88 cv257.241 437.86 255.721 439.86 254.901 442.56 cvcp287.061 431.04 mo289.121 441.58 279.561 454.17 267.861 452.16 cv268.351 460.15 270.461 466.52 270.741 474.72 cv266.001 473.7 259.981 473.96 255.381 472.8 cv253.261 471.18 252.581 468.16 251.541 465.6 cv250.511 463.06 249.221 460.22 248.661 457.44 cv246.461 459.01 245.901 462.16 244.821 464.64 cv243.701 467.2 242.311 469.75 241.461 472.32 cv236.021 472.32 230.581 472.32 225.141 472.32 cv229.451 453.43 238.701 439.48 245.781 423.36 cv258.231 422 284.631 418.61 287.061 431.04 cvcpf285.141 589.44 mo283.731 589.57 283.671 588.35 282.261 588.48 cv282.111 586.57 284.481 587.18 284.661 585.6 cv285.741 585.96 284.851 588.29 285.141 589.44 cvcpf271.701 248.64 mo278.611 241.63 284.631 233.73 296.181 231.36 cv288.241 237.5 280.091 243.43 271.701 249.12 cv271.121 249.79 271.511 249.16 271.701 248.64 cvcpf264.981 518.4 mo268.021 517.59 269.491 515.23 270.741 512.64 cv267.271 513 266.021 515.6 264.981 518.4 cvcp274.101 519.36 mo275.751 518.95 279.321 515.82 276.981 514.56 cv276.101 516.24 274.141 516.84 274.101 519.36 cvcp280.821 522.24 mo281.391 524.09 277.681 525.38 278.901 529.44 cv276.461 529.64 275.771 528.09 274.581 527.04 cv270.001 528.75 268.921 524.54 264.021 526.08 cv263.391 524.79 261.141 525.12 261.141 523.2 cv259.261 522.93 258.151 524.87 256.821 523.68 cv257.601 522.06 259.871 521.93 261.141 520.8 cv262.541 515.42 266.061 507.78 272.661 510.72 cv273.381 518.16 266.021 517.52 264.021 522.24 cv263.701 524.32 266.251 523.53 267.861 523.68 cv271.341 519.64 272.721 513.5 278.421 511.68 cv278.431 512.15 279.011 512.05 279.381 512.16 cv281.901 519.36 273.731 519.91 272.181 524.64 cv276.271 526.75 276.961 520.59 280.821 522.24 cvcp1 /0 /CSD get_res sepcs1 sepf279.381 323.04 mo280.851 324.85 278.781 327.22 279.381 329.76 cv278.001 329.74 279.801 325.23 279.381 323.04 cvcp1 /0 /CSD get_res sepcs0 sepf276.981 514.56 mo279.321 515.82 275.751 518.95 274.101 519.36 cv274.141 516.84 276.101 516.24 276.981 514.56 cvcpf274.581 373.92 mo276.161 374.47 273.831 376.06 273.621 376.32 cv269.071 381.99 262.821 389.45 259.221 396.48 cv244.261 396.4 230.281 397.3 216.981 398.88 cv215.441 398.79 217.641 396.42 218.421 395.52 cv225.101 387.82 235.401 379.75 243.861 373.44 cv254.091 373.61 265.101 373 274.581 373.92 cvcpf271.221 572.16 mo272.981 571.84 273.061 573.2 274.581 573.12 cv273.871 577.37 271.771 580.23 270.261 583.68 cv271.401 584.62 273.211 584.89 274.581 585.6 cv274.511 587.29 273.211 587.75 273.141 589.44 cv270.621 588.44 268.341 587.2 265.461 586.56 cv266.711 581.09 269.391 577.05 271.221 572.16 cvcp1 /0 /CSD get_res sepcs1 sepf272.181 534.24 mo274.061 537.26 269.491 542.88 264.021 540.96 cv264.011 539.35 266.241 539.98 266.901 539.04 cv264.531 535.3 269.681 530.21 272.181 534.24 cvcpf273.141 321.6 mo272.791 325.41 268.941 329.88 267.861 334.56 cv267.091 329.62 271.461 325.69 273.141 321.6 cvcp1 /0 /CSD get_res sepcs0 sepf270.741 512.64 mo269.491 515.23 268.021 517.59 264.981 518.4 cv266.021 515.6 267.271 513 270.741 512.64 cvcpf264.981 569.76 mo266.051 570.13 266.851 570.77 268.341 570.72 cv266.951 576.05 264.671 580.49 263.061 585.6 cv261.991 585.23 261.191 584.59 259.701 584.64 cv260.981 579.2 263.391 574.89 264.981 569.76 cvcp1 /0 /CSD get_res sepcs1 sepf275.061 229.44 mo271.351 234.69 262.771 239.23 257.781 244.8 cv261.101 239.16 268.371 233.31 275.061 229.44 cvcp1 /0 /CSD get_res sepcs0 sepf265.461 438.72 mo265.521 442.63 260.141 442.71 254.901 442.56 cv255.721 439.86 257.241 437.86 257.781 434.88 cv262.121 434.8 265.421 436.04 265.461 438.72 cvcp1 /0 /CSD get_res sepcs1 sepf264.501 531.36 mo268.581 535.61 262.101 541.22 257.301 539.52 cv257.171 537.79 259.401 538.42 260.181 537.6 cv259.851 533.75 260.051 530.43 264.501 531.36 cvcpf258.741 567.84 mo260.271 567.91 260.851 568.93 262.581 568.8 cv260.781 573.72 259.071 578.73 257.301 583.68 cv256.231 583.31 255.431 582.67 253.941 582.72 cv254.871 579.97 255.811 577.23 256.821 574.56 cv254.381 575 253.821 577.32 251.061 577.44 cv250.601 575.34 249.531 573.85 248.661 572.16 cv247.691 574.39 247.061 576.96 246.741 579.84 cv246.121 579.18 244.661 579.37 243.381 579.36 cv243.731 573.79 245.711 569.85 246.261 564.48 cv247.391 564.63 248.061 565.24 249.621 564.96 cv250.411 567.69 251.921 569.7 252.981 572.16 cv255.231 571.05 256.891 569.35 258.741 567.84 cvcpf221.781 555.84 mo229.981 553 232.861 542.28 235.701 535.68 cv230.151 541.49 223.691 546.39 221.781 555.84 cvcp250.581 517.44 mo254.631 516.05 258.841 514.82 259.221 509.76 cv254.251 510.23 253.111 514.53 250.581 517.44 cvcp262.101 508.8 mo262.421 520.48 246.911 516.33 245.781 526.56 cv260.791 522.94 257.421 541.57 245.301 541.44 cv245.631 539.34 249.501 539.24 250.581 537.6 cv252.001 535.44 251.761 533.17 251.061 529.92 cv243.781 527.13 240.561 536.67 237.621 543.36 cv235.001 549.32 231.281 555.78 228.501 557.76 cv226.161 559.43 222.761 560.34 220.341 558.24 cv218.691 550.57 223.951 545.57 227.541 541.44 cv231.431 536.96 236.061 532.91 240.501 529.44 cv242.151 525.65 244.401 522.46 246.741 519.36 cv246.551 517.47 244.631 517.31 244.341 515.52 cv246.051 508.08 236.181 506.79 236.181 512.16 cv236.181 514.54 238.251 515.99 242.421 515.52 cv241.661 519.15 237.131 517.46 234.741 516.48 cv232.191 509.36 238.391 505.04 245.301 507.36 cv247.511 509.15 248.061 512.6 247.701 516.96 cv252.171 514.42 254.951 504.04 262.101 508.8 cvcpf265.941 318.72 mo264.161 323.5 258.921 328.98 256.341 334.56 cv255.701 327.36 262.531 323.47 265.941 318.72 cvcp1 /0 /CSD get_res sepcs0 sepf260.181 309.12 mo261.721 309.47 259.211 310.82 258.261 311.52 cv250.721 317.08 240.291 322.89 232.821 328.8 cv237.811 320.03 249.781 314.08 260.181 309.12 cvcpf258.261 318.73 mo254.011 323.13 247.841 329.07 243.861 334.08 cv243.771 332.36 245.211 330.52 246.261 329.28 cv249.931 324.94 255.491 321.38 259.221 317.28 cv261.431 317.66 258.261 318.81 258.261 318.73 cvcpf259.221 509.76 mo258.841 514.82 254.631 516.05 250.581 517.44 cv253.111 514.53 254.251 510.23 259.221 509.76 cvcpf254.421 306.72 mo254.471 306.7 254.521 306.68 254.551 306.66 cv254.511 306.68 254.471 306.7 254.421 306.72 cvcpf253.711 307.02 mo253.621 307.07 253.541 307.1 253.461 307.14 cv253.531 307.1 253.611 307.07 253.711 307.02 cvcpf251.541 308.16 mo252.491 307.03 252.491 308.2 251.541 308.64 cv241.921 313.74 232.491 319.03 223.221 324.48 cv222.101 325.44 222.101 324.27 223.221 324 cv232.021 318.08 241.661 313 251.541 308.16 cvcpf257.781 397.92 mo255.911 402.93 253.211 407.11 251.061 411.84 cv232.711 412.05 217.091 414.99 202.101 418.56 cv205.231 411.77 209.981 406.6 214.101 400.8 cv227.641 398.82 242.291 397.95 257.781 397.92 cvcpf238.101 237.12 mo242.401 233.1 247.501 229.88 254.901 228.96 cv249.731 232.11 243.811 234.51 238.101 237.12 cvcpf229.941 221.28 mo234.051 218.18 239.331 215.3 246.741 215.04 cv240.231 219.57 231.911 222.29 225.141 226.56 cv225.541 224.56 227.991 222.75 229.941 221.28 cvcpf211.701 460.8 mo213.461 456.5 208.821 456.65 206.421 458.4 cv205.971 460.03 205.781 461.92 205.461 463.68 cv207.911 463.09 209.771 461.91 211.701 460.8 cvcp219.381 438.72 mo218.841 438.62 218.631 438.19 218.421 437.76 cv215.181 438.2 213.431 440.13 213.141 443.52 cv215.981 442.68 218.781 441.8 219.381 438.72 cvcp235.221 430.56 mo235.831 437.77 225.821 445.85 222.261 449.76 cv229.281 451.91 226.281 463.21 222.741 468 cv216.551 476.35 199.651 480.72 189.141 482.4 cv191.441 462.78 199.301 448.72 205.941 433.44 cv211.671 431.72 219.441 425.52 226.101 424.8 cv230.941 424.28 234.861 426.23 235.221 430.56 cvcpf235.701 535.68 mo232.861 542.28 229.981 553 221.781 555.84 cv223.691 546.39 230.151 541.49 235.701 535.68 cvcpf218.421 437.76 mo218.631 438.19 218.841 438.62 219.381 438.72 cv218.781 441.8 215.981 442.68 213.141 443.52 cv213.431 440.13 215.181 438.2 218.421 437.76 cvcp1 /0 /CSD get_res sepcs1 sepf210.261 202.08 mo214.121 200.41 218.001 198.15 222.261 197.76 cv215.311 201.37 207.201 203.82 200.181 207.36 cv202.001 204.78 206.551 203.68 210.261 202.08 cvcp1 /0 /CSD get_res sepcs0 sepf206.421 458.4 mo208.821 456.65 213.461 456.5 211.701 460.8 cv209.771 461.91 207.911 463.09 205.461 463.68 cv205.781 461.92 205.971 460.03 206.421 458.4 cvcp1 /0 /CSD get_res sepcs1 sepf181.941 199.68 mo186.071 196.45 190.431 193.45 196.341 192 cv192.711 194.53 184.591 198.66 181.941 199.68 cvcp1 /0 /CSD get_res sepcs0 sepf172.341 188.64 mo166.521 191.3 159.441 192.7 153.621 195.36 cv156.671 191.97 164.941 189.26 172.341 188.64 cvcpf123.381 190.56 mo131.541 186.56 139.951 182.81 149.781 180.48 cv141.111 183.97 132.301 187.32 123.381 190.56 cvcpf%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5[[/CSA [/0 ]][/CSD [/0 ]]] del_resAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 12.0%%AI8_CreatorVersion: 12.0.1%%For: (ass) (face)%%Title: (Fernet-EAGLE Logo B-W.eps)%%CreationDate: 9/12/07 9:01 PM%AI9_DataStream%Gb!R&kuui_egUIP!;BkD%M6Eh*lnTk!sqOi(]kQt"rn`o-FW0Pqu(N;rR@:3Ot=^1G+ZJ*0E&8_V&EF;\^md\<`e#dGNW%O(TZqQ%038o`cW;3k>Hn:2igS.\[CUYV\^aE@nnNnj6:n(eHA88RRl/ACUs<0@m,>BqfA#PscW].B]m\AtFI+MY2pJ\pM<`6LHd]F8Bf4V8%gLdW%e-pS6=sp?]=#]:a*c=bXS`P`?\FA-7_:neBk!a'rK&>h_f%o$(_g-#f[FmUu\lGrGnA7E+n%5].:Q8FuC9$gRh]KP45BM8>%>AR]X@aocQ<5US.Sf]r#M-gZM#h53f0LO0fb^THE]"%&!3mHM]qsMKEot&bd]t\:T=pPD_#\n7roL&D4^N2t(6O$V"f6fdk.Z9U$%ecK'(ZboW4@lP4TZYHod##lt)>O/Jnf"[M$n!drkGJ/1oP+]%#F[k:nl1B/&r^R"-ot?7G"SD?X_bI2<Is9FAdmf^Z<:,,2]QJjg%i4=o;-@j+Os318%$LBW3(Tj94p%HW4b^I#7)#QuXc?AgJ<i=-CKdRu2>BbG]"!$^&*I8%pI+=TuQr_06gkt3%o3TDF\K;L^ik[m&%W%>(IC:/67qL.^8?!Q2;0:JS50s-O<G,',$*\XU5<<E$4Z.B'Es%r]m6)sbSHEB7M[)03Hqm[ZaW4h)b%e_Lio%c1,DK'Gma$E.F%[^rIMiGPdNCFVlbSlaT]rO]B3G7P81;#b>N5!9E?_[o#tFa7`VnCP,-X_ks[gSVH>#1TMRSd2)S%t8dFPk$pbj`ui?Zl+Tp-4HSA%W;]*M0SE>4#c6GuHpXfY*D4lJ:pXJ`2t]4rBf+abUZ$Jp]?u0'N<[q,&^tu=4ObUhKpqSh[O8*E$)M$)n-Pq!:,5ao#;^s--j)8W%:RJUVK'L4Ci"LRUN8P@Q+uiHC0I-@GH,F!6$?Le_$(B@.P_+1s-^8=%i0gYWN1=9L:a@I*-e5#\e*(N41cFV>7P8I%-0QG8K)*51%ZpZE8Z_hrR@dk1+_>Iht#qAmjjp.OJ$YDop&"b\!GQOL6$K_Sc[#0M_"BXk1H5%?LOUM00RaLm9l;3Ar-?,ZHe*(6$1bS'[>*eiU%'(QRU_!D1[@<PJ:Akd2PIddZ?#eses";@dCT25`(2c1=6(>9qQ;%J?9K#<0jJo*2^_A'ijTaP"%JiesPTMGFuggK3K+u2(q4-Yob%WHG4:n*(pRS1'T*RF[m96S1.a+5q-3m8R_m.b#A8QG=rhIDTm<q\]@+G)SdTl1$52PiHn:&IB_VFpnftX,L-VV08i8Bc?aWrXr9h%q4D6GS+nZ8Eub#ss.t2Y<S+&pnR).Uqt)uL9E0ToIKtGr*Uph/'m^PnV15PHoK3%Fs!Fa]C\/nO9E3Spl$*&lrYa*JiodOhn4Dq<%^Z?:1<V*Pe]&P^")?<S/F;bU<c*\I*?I3Aa^Hj+6f@2GWl]hJL=236@[5*=0^#iJe%0!$-QLA!-oYutO<.j&DpD'X?ju2G:CKZ*r%c1%\SH&Bp1WY7UN&r$pFX1o./EU,A4-te30"5BeJ%;FYhi=5P+[Gj6ML&KN/hH(TrN]0g=_:GMJnBF!Z$ifD\0QSWQ4Z+-thq7cd%i%rr[)@."XZ,VlBE#gUs])hjs>Q,P"4:RKb*J(hKhr$\'JV`=?L@ibKgkN78e-l2/kD0.N>^iCsXjNS9%h(aZg9I2n`T-ul<L>_Q%D)MMT>T5C"hH10g=:&([ea=@#(&A,J^jk!+(loL50m5E^Xa/H*h;O4T!k&A8dMlpo^%:7Z5s85>Z/)^A$7pmHfLdC.T=>+IN>4aQ%+de;]0k&oq#-+f>RC'+`0n_2L]N,ri=Z0[rZjl]$"`+9\"5XS1(i)5AXA<nf<`S$0eJF$FLku6`_i7iYBN*IpSg(>fZ"ucs@FTRm%*l/hf=Y%9F'FY&V/`83_UOdK;Ppb8pos)rdi4D6B[HA+(+^?"5b9L>1"E=r7pJmru'o"2s%A:.]FN+%1TX>sl@#kmN@J#/JrYgbY%DOIc6+akII(fuNS;,>EP4Q)*%`rS6+m?fgf"P7oO+lNI(+[HSt'6BbQL/?0ac+Hbc!=n[(i-0bYI)?\'DZg,5HSntc^CcO"d9urc%)?NFg%X+CD,fU>1#,+G97:XRSSG-M#V3,/6q7C6"[-islR,c5&-m`<YLuXfj4=AMOUWa8'Zad\K_LI(Bco9ObBoL>@K)>+4A0e>I%^bldF&uC.ROCG`P>Vb:o9P*j<KlDoo.)L@sqKH#;?Q;.9CEtud[&ZTa<#./&gC@\+@nS!(("_F?Y;#@,'QcLt%Tm22E03*b^*QOi%CJ=@J']S-+TaZp#GFdr^BVWCKQoI&kL+&AaG)WA<QKbX_-Vc1-9.e,tl'%nD5tblV3/"t?4=n?CX<W+C0U4V7P&ins14ttJ@pGce%loL,20UnXi`B2jR6f\euGfD#K(6KA!N?[tFg1\`o>UnaCX>:IO(@EV-iL9O'``hVt7Kg55Y=EBB,.opf/Cn,66jD(XOlfKpnQAXs%C`j.EV/\'.%G(0]08F'd]Q'=2lD8%*1/`]FF$c5',&9X`NI\5`?CdHV$"nH&lA'VBZl@1?)L3mG=%)d<KU-=Q,Rm/U7hV.3,;Z7J%<jSjUpgbt,,@gQ"R-GnJ.FOHOQ)KC+XCVs?C-%X(^lq[G)Y`S#mYZ*4q(6_WNc@]BnPe_nEEPejl5H][mmmOJa\0C)bH"fi`071G%>!,<D2a6o0)%6,,Z1]!KM+1&V3L[8aAXTkXg?tC])Iu!KM7),.N+)Y?:Xg(2%m5llNBK!dNi`ITqBZIn3b@R(M"M6fKfHBPhD&T_%*0H"%FG:(I6]qAb3H^;.f-"Dq'cmCa)DYq4KTd$=@a5mJCt*EUgS=d;_e/,RRQ=oY0P>%>l?5t/[QmOc$4LANZb;ahLi#Bi7TN4H%>2UWg/Hl[)&]%G?.."hd/r<i2+a??o%sefT8TLo+NBGcrir5<P&O-%j#5UU0K-X5;ddEk&_-U[NV%8X@+J'MC%p>;GT&X#,;SOAb%_#?ocaganEN%dJPi%$ijKS)=>MA2&K_A9Z#\?EA74Ei*uem"W9bZsK7N>j2-Qh30!MkER&7B>at)hD@t3MY0#aXcU+QA4p%`Z3:4%6n=pmMleJu(-)A9BA@)Y`-B8/K,CZ]Rdk=_cP1_&<gGlRgdd<a6AM:DL^ghfd/e6hGf9g_RIUA6WKE?#&UeR$="KqQN;X#n>U(9+%Oj4Wb/B1Z/'/M,id-Q[:jOqnaJS6Us*RQ8[bg^?1E.B&Z[\-a=;M*l9MR;I/G`ptd#*4/V>S6olKdUcF$B<[?'sF^?R'akR,`)7Q%r?$%LeX3Db]]3=m^C4=P.SK[0(0[Ps)j+2hU]cZ5VGEm@iMf.R+rt4TCfP.0JDR03.R&2p;HV;t<[_er>fF<EI;AOX,N<8HIdqX@%'(Mu+Of'TArJgG_K!EC&Z$M4I6om3kaKanXdMEamf[&+kCP\W%5r5=!a-MO?/`rs?s2T@.ULnpkQ">k==0i,U4%S;25o3-_I'')@%51?!t6_-]+,uJ<3I9]J!DP[5!*(/>^@m:F*W0LJiBRRf7+b++B9-Xou4q"Y`29r)P%HQ!%)N;WE_A1JWWA[&%2>JBROVI00r**us%l+S2t?<*_TGSNd,Vj5<r]`rg`AE8m>&Uqp;8=dmI0+Esa7P5IOE$N1>NKZ5A$d86Q8On(7Zl7+hZ)VJsH.8lUXG,43>B$C4O[V&<%RGtQT*dOL2)Q\;4HL&)W\DTlIO_m6ehdiol6hJlqVs(M%'#QDb2FPQ@$tVLMP/%A!fZ0]U=a>qP>G:_M='4g,?<,QQaR5"t81Ytc%k-u=FjK6l'Y*D9MBY&X@CI5[&g(__01d8/mGcj/IiW)<_A<2T7)OI5Ha_^<G\qN3E!n;JWNp%oSarn]=[*)/B]c)r`,VX4QqOb9)%Cnp7O3l`FXa;AFO+(8_k\Hr5eYrJUWLNR-iA2G4@-YYm,l9WRYXUCE4.hud0_Y_rTfJWmt>pI?#ieh33$O8R7T5O#AKC>\>QZDKG%#*(f+Oj0]j"1Xdq5Ot!B`0jYNIt[.mfd0k''*kJ=hjm+s#(<P]D]rek/!1`3Sb>eTK&/rRn]bsPpM`oZ-i!T"6X,hi\q<P8M%BA.%38(if:p2c<m>(S@]3jr^fp21&BrePgls3XmDd%AJh73kWURr:$Tq6./rRIWT[H?$<>[_u+*Jj*nW-g`+h)al$b5<C][ek$oCCP/p%pC)XX3gJ7@6hdmlf5BJ6j%I+DL<5MH.?sl$k[OiJgjQg[8GDks"k#Q9FF*t0]r9BT4fF_Ic)oTe2`FeSS`]n4eQGoX)=O>lkhQf@%2/\kR<a6_rb23hFq=j8jqrXo*)e5Z:A>e,F?(KfYG5q"(>.9,g>AO1PGA]:BiR@J3^KNS`HYnklPNL\Hj\)q$?dpn`e$#gaF%%6C%cS69k\+^G6=kUK)hR@I6]upVGgb")s2pJsHVh36i-@u+Dr)NYGacbjje>R_g(o,CQ()MmS@RtD[kcjgU9rg@\o^8m\Y<2YZ=]Ro$%CTFV(4u@1^Q%b'kh5f:W"a,90<'I>^0.%skd&7r`Xa[o_?[f%Gs/J&DpQ]Y]N68\WHMAB$*M-%Xd6+!r<0l%FW4s3u<m7eP>BB_u%IT'%3%l_0D"6OB4_2a:Fog&1(39HG1\l*k(B$R>pdF9Yd9/^bFGFCHB`VFK>4/_11RuW]OBcm?#6solYcIp.]C,?FbDA^=H<mBl%%co4ZMn/)Qm%=1J0".K&cpp"Q^oe<:`*ijt`P'V/S,ek(+^osdpJ4?m:2uPpf^\sjShTC6A]JBBQgRC:tH;TNpcIM/HYGG3Z"Xpt1%kqrFt1bjaY[8LY(=#]<5efC$\.SEtQ1=9>$kktt7&Dk\r^$D9fea.CM.pC\-XXds3;=q'Sc%D77kM;YKGD].p(ltJ^q";B93f<sF%8c\"NI<OF-0*<(@\aZ5^fBF#^)OMi5VN=/ZoH/#bKBK/!*n0\@#RRgK&uF`?eNCNZPsP>!X89Sfd$Ob^:$PRI5E*uD]edkrq9O)e%Ih!!U]1l+Q5isL..uTGf3*iJfr"fh(rsr)_rUmAo@VP`^-A1a2e_0tG?6#m8/U_LoDt5:QGF@Rkq`i>P3E=H4##4:<V6KVW4WT6M%X6k)H1eudg-"aSi^Nu,0=(YM3FoJ_2F</,.=lu@lqq'ADn$:18\DVj[;P"\h,-/o<e\u);W>1]r09H4TpibC&S[0(Y$NJ-]!%"NA%dmLW^opY&9*u]8AiJ?N]5%b*g)4]+^_\7\"?J.*Y9'"(/9pEeDoBtV3H-rYY[-tg7R:&fm@AhT>[Q8oG.XS:IpF>Ll=2!b\e]h+_%n,C0njVMLl[Q9\#WRh'Le[Yo$9=MFJg!/&qjfAmukeAX=eqG=4DD_@:)XW=:c.-+#dd;22f<(3iHYO<Y&46PY?F82Jp0+$+^KP9`%G,KB7]P65n0lYUc`qG'!gc*R*;^8ehG-=hcmbYF"WD_!1.iu8T]]]4lW^`$hIWF#RksW_,Z;k%Qkd;q5EL^,1,<58]II$griO0As%I/hQt-#</md@>3AH^36b2A/P'#Z\FLCS+l_=B7&qAW=$;%=uC=<`jY)l<Zqi6a*1A,-#&jM&IHXHM=G]i]>eD_TI;u?4FJmFo-.,%N/Mq`CV.u_L6ZAKGM6qXc4sO=W0K3iTNePtk4JITWD8qr<ok%(s)8oQ(CJN&YLC/MhDZ0\TDbl1]K0-3pn(TMg[o^81=:-D+Fep-%l;f<^?r:bn"3Yl++Z'`snGib/N>d3TCO+M!S@?f@M57HLU"rAS*gRfUB[2QVBdo@:94sge>5,+De#NA3jF[>amVgDM:9IrRRBsMC%YIL-p@Z#aj\K_/fGgj=/?'[$C0_YC%gZt<fq[-9J#F+M*;k9>0iX#F*=(b-9#\3'K:/6gV=2WP`h*143oq[=>ZeVX]@F=\t0Asd;%5*n?M27J.#46s9B#8F^M(j0uqX$*+X8)*5Ee1&b[BsZ8?=N>Xjm9dVC2bGeX?+?e,Bi*JXX?W"!9i_<oG]*'+B'6ap*-I+TdAT^&%eOEi=Zp*b+)Z=g1X.A/'.Kn"'2_&n+q:1L)Oh>/ZLJsmi3su/%$8-h9D@1?Y><BM"L/h@:Y'$FWmB;*rX$WHk.G<K.`^qS&f>F_D%Jhf83[+:J@AM[(]Y'\haDfo4e:kD$9*iMbVC2D;7A@@dTjguDTrVO<p:pXs_X&E#udn+6WW-`'?]L\C5.Au+$G\p5T$Ob.?Y$#"-%.C+Y5[dVNL=:l>4(+^^H3.E>Uq?kl_Wd^j]H%#((c9'juJd"gGHFQ$e=F;U93i4%8!,7%-RWitM-cZR1?R_.:"d8bk(:/\IrRu.k%ntgJ4WOJ.EG@()/]DL^McM+ll?WQ]Q<&=9>Ft=-*m&lS,UP)='OoXm2;07!YpN<HemG;ET,:fn8///Q&I<3k(Kdg'bZ_5e7h1-o.%(=>7&qC-;'Wc@hONQTb]5DR4f\LThAqt&6q'.-+)1-*p6B->&V)=F%aPA+S`2-!CM?i2UePj[?^SXPgJn-VoPe&8A&f=[cdE$T>W%d'&/BAMnJnqgL,9MMpfkG*)Eq.OFj]L-hA]=+2;5>QmhNQ(ZkM=R7eCXIme2'Uj+=AX$N%:ni;ZEAp-7KRu`2VsHG`=AWKVL#ncZ%e#V>BZTtBQ;(@bFH34on.M`DEZ^X^l=Kd;h+rp(+7B.)eN4_HSE/7o,7Fgg2.EcZ1gnCCH-giYBSc<,=a=28hmTq3nat^Rj(PBsg%<TYsZMc=59?>=p.FJhE\f8>foJ8s?,(^hj<mFZDZ\[k/K(lZ5:YK*ZEC_cbiF>k2*Xb6YUcMk<!H2]`RqN62?H]c`U`qQjSZWhT<%<4L_>W,2Kq#.P,Joa2s*`;p]P\0qne:oo"lFg$o%XoO<P=@ZL$SSefrmM(uj_;4IcZI%]Mq\5boZ]QQE-G-iFe;kV0</Ops9*aP3%>h*ubKGT\ADfhH25_9gr95_Ee7ik[aL/C5.1/pT4EOq=$)Uue/%rlW4F!jJs9$`NT%m)qS2:VPKq#(kbghJ8CfR<?d%*Ri48/k'P%-K>c5-]2,]!Qhs1-$ZRW!CBoAX`&%[mTL!O!jk#gb$DW&?@VnKauFm^qZ_Pa$9+UTNaLG>JK8uB^"]_D(4S6rrYO<Kf;`\Z[-F4-%X6/6Xc,&kteXu:pXfO)/R6R:X2@kDIl19]'M<\8moD9'ifnt:B:=eSl3F2O(VtnpLVb>%Xr-QV4nS.g0rHbZV](RZ0\DEbTr3Em,%b;ae_]s[!0IeGBABC>Nn9J0TLhOL*#X&UM`:<pUK/m++hak=qARL;5;WnH.cjSZ'FpJpYCZ=gq`T6kR]LA^b2LYVg?b27Z^I>r<I%/Tol6lJ(`T?P,01DU>oJZY%+M-PKJ`-PNEJ0cjK\HhS^\4U2MhY;R`"3aJf`?CD<]ln?\_J#T%Z2lc;nRS8+@gZ^ihIdR&X^@T`S%Ecu)8XOsN;Kt?(o^H74;gC'F?rjZ(dbjEodIP4FXFaDb%?CLngH:`;'SUO\3S)1opg!8li4+6Itk&n92lB?^AOQmO+_/>gS_tiJ.%+5^^Rg3NJ(4Su5V@e+/4VaeRKr?A.<Du*&pr)\]AS2"+.ke#6p>Q'dHe#C@cEqSJCqp1\$DG7OK;k5\W@(.q1\"38=!8d0l5I935%VfR:Eh3e%J=5D_lWog\ceo^_E>(,g^B4`KuWm73NEJ'f3C-#WrG5A!*j5BQN:8c8_mf*%$;V^M)<U9@'EUQ84VuG,Jh3mV)?VJaf%]$'^$lqVd&A(:tIDr4g31Tuh_S5.n`\XD"!7Wt]TglM7IcYp4ZWa><tD7\2G]SH5aSJmK3T2p"ooqnd-i4dM$o]S\OEhg=WQT<Zs%N@-BODRV7m1HXFf'HH1bGOt(YAF5O@?2oB0:cP<SG\XBCo4A"(r2d*Nc')B+ca.scFm@k^45Jcin:Nec>+A=3FJA'4[G'6BgVd@3%Xr?'(TD\%N\#(3umA%!1ZdXsoXj+@S[4]R=hpq_]0B@6OD;Nq$rpu6-kr\ce]?tjdRFS9?QbBN%Xk^JT^A%>Mk&n7I*#Q_)G,O)Q%dsL7*c^nXE'@l_[%ut"?F#uOPD4TJFFo'tiZM8`'X4)p*l?7UTbF>/'cNNahKtZO%:4H(,D6N)DqV<rV1k3e\Vgr9V\UN2G\mDOg%=NKk$q"X>(\'oNdp$>+JV\<(op:^!;I=!Ob^l<b`lEL"s/$%,okJQ:9GC"#MV2/_II(!p&V\<(:3RukTEi%mCK3^F/dtPM25JEZd%F1cts7WnR5PNm7=\UCj#SR.)ti_C4aL2O',^.j_<[oSR6XX&PoCoi-][K2pOp<1qrMbid-k<#]mH7o`ap%@3"lkJ#^G'tOQ$>7ZI%R4HrdQL""&XKXS^1AL>J3aM%>e>l?X4PJRiS\CYR4&rte3b>FB]VN*P?N*ns!Vgm9jn^iWqKdX<3sf6$YeMjG-rZB<[8Y]7>.rZ^%C\dC_[>Y%Y%o4S?o@s0/\'CKfRTFAWmqkQ<_u$M0D3A*a7m"`eMi[2r^/#R?qU4#F@pA`:T>?#*D/=]Nm:<n!9`DV4CnJK6nnQd9%pQJs9]XR4Ha0VnoH#HK;h>28T+kH\mgOc\W0Kkiu[V"m>Gs@emei!.Ks4$&;.JY`5F<2cWIc&JN2N<@fad;WX9kM\[\&Q8'ip3\T%#dJ=&`g8(38m^lq`YWR,T(dEKpc@gBaF!g=pi6*%R6[kBrHI/onb^p)hV6C:hLBG+]mXC\GUHqt2MGWg*OGJ+SXWQi3GX@6XnOho%:T)IfVoOd%Ln3t&mljIZc)H-B2EtGN=#k3FkKK^Yn"+.+FcZ"bT"jK;c%DD6h3je$Hi!j$=u3?o2j8/]->T)h?I@LakHfInP:rH8%^Z2d1@eI]QT61NXp3^e-[GCdHCldp=BAkXcV,`4nXjnuOPE!c;B(aDHDl2CDHgMoWI;KtkXaOK);4E*67\d\$40-t7Qep!Qp=mpY%%?/?)rj88pm27_aOir<Ho.B*P9CIMF).Vpmi<)or2oQbd]nfbirUeOgbL8I?78rO.i7%6lK&LmMXI5D:M^1d-cI'/7hPki.G"t-L%.BEo#lPppS\!`d^29qP/4%24YVc0GG.QaQ-lXTcrSYMe\SSg!5>,UOZT2*FtU@o[OC1F/T,r'p9qgU5hDVQK;4>j0`lKg]k4&u!I%=j-1H[=:mmZVtoKmJhNVVp<]!geJT/Dlm!:'3-'g9)Hs%'X[o3]M;],SH^0"*@CE`jBPQ[aQYP6"J+NtYL?:H24^Zu>tlt*n,Vqs%A,:6'l=ZH1?D8ERIG:T%FQRbF*,u@%gIljH&qo"a:mUh![sI*YBmsAW*KHMF^c&(b2s.uk\Ia1:duAJRD#ik7:/*t9n">6Xd25%J%-LX'6_slrrIk::))/n>G'gH(l^Z\9DGOR=*bo55`%4m\54\\m_KcBnNlG:q!Il%ZnNL>3,6Fa&b[l&7*7s@=iDDYn#4fqf]A)Vj*%?mE+IYiBs4$4#l'!:#YQ?+OjS<T-:gjD/8+GXtqij@ddk(=j;cKAgNV\H>%sa<-:*5#I:_cSIu$3cfa3PCr%R+.lKtQa$7("dP\W%5&1>pofIGD-A*\8->S(tBSgTr_[KkfSG>=?07f`/$"+K)[P/&ob?P>/2id=HK3?2IF6Y0.44*ue+WpA9J8uu/!6Z2[=SGD5e^%D\%`I(Y2$hoJf,.nkXomk>kVQlgPTfN!-ehd%7nM2&,7gm#idBJ#7%u))c:,?:err$4[O)8N.,oJTY<2lIXn$Y`Vg>[3hC=0U<5]*lO%C/8P&+Tol%\i[BRBD%L$(!e1_m`4W_X*aeVe?ulK,m7)ASW2kQn"-Cuou&Vf/X=+:":NRL5%%.VV6nY8m4U3V7$p[A8N%o6S9@D9%/1L/7q`_#A[Jl9d1,@ZC^koF`]99\Io.Zq]^%VmH=.7CmK$B&Cj'hUd1u4\`KF]+b\Y25VE^):r,Ss-2[]hg96dj"4T0"[c=2"<e%pL!cpq=.CL(07dfcC_fs\ILY[/)5Qrk-\c'O.+U-2btue`]-gIe/@<>h+2V;Zree]?/68p`QpKek*)4X0kaA7iFIn\M&fn3=>*H_%#GU#LL:-k8I%*9pBJf2jdnB\5VK6<[]QD-Ya#^tekk1-+`F?FNqIM's%'^EqQi`T$C7adY70\2/27p-NXb0,QQL;0C`f^DbEK*go%^LmHbNX]Gh]l$5orE>fk3];cp:O@1nm+2k79^gN(fPj7nSu>hnLW?rABGg.3@PcUMS>c.L'%m>4'6[J99,]^&9gP^up$d9B/6'.d%HQ_baENIJ_T$)hJrT*ddm8A\EJdqTcqSlIjm*!nR'PpNZK6X]!;rl27&5u+.,hq12Tp3#iEX*4sJ_5Es"AGo&"4>\rIji9HT=,/p%s'uM9hQ&8*AZi\hZH7)j1)XUJ2&:1&Yrc0Lk4b2$!mUC)%nWdR*2ePaUO+r8WA0NE+*e"[HY\_s;)BQS8lC<,9oju/Co%t6T"SKc%!W:e(b5`jnG`o-M^%n()3-OGG:qe>O(n`CTZ'KP.1tKC4?0dp)<e!&+o>?rriK<E21dNnaa&[J3"^c+os"cF7&6*Bs6]uZpY]:%4%6WWm_.nSa.IM0DDM^4m0UeUK*OQ0WPT.Ec4%HU6=@2I,0gU@?0hCqF<CQmNVK0:K4?*\3[k"OI-j`:@T\+]-?^%[0Gi?J#Nr?V;N%V!Q5*#=kBZoN(X*cn7&HM/(UVBt0ATXbZZJ]JeY25Wk"Nd2rZ3GEB!]m/tK#fXrg.f4;,fc-n@D9e4\rQZma)A_MUH?S151bZCWN%HF\Nl<2L`>]@Zpl2/>%KQXL'V]<ioTN=i`=bb^['G=b*q\>d03_l6(Oi^7[]GT^_ZQ\X`;eH/EOr\U%-I#janeLBVG.qAYKqP7C]%==-W@-7.k2!E5f;MVJI#,XkuKF@tf'1TKX&R<U6J0Y+?XcB`En%lRi,GI)H?Z7N^VTD-@NmI8OVo"\lpp,IP;<`9[^ObjU)`[o)m%$ZQn^D/OM2N/q%imb+P'K<<@1[3GMF6aX0Rr+ON*8_D>JE5)>l\VEo08nf+'Ft2Y:qXr+N]m,;uoW^7%..*'oN=?X^'.*#u(g4\P%:\Gi:2#I8p3Ibe/g548-cQ\CH$l=,J0_n)kMgDs>6BNe7dIq(1QFAJX38-[1/4UZGJVV67j_0c^W>Z]X8*aL9A"\8&LjoOTlGKn+%k_I2t1h]><+GkNO@G@cH*DQOi/%2dKCXt.E[c_!)(1le5]%7jdCqaR]8D?11b1'<Kd#1I!/=pL&^2\C$Ag%@s^t.%oX\:(;C#ah'%ZbqFTNSIbcS$g#7)B2k\cQ<tA532.FQ=VjBpEaY?M*^22WtpIJ4d%8`lAr%#;_*.5>gh@_\=LYXe-QWlZr8mTW0e!mWJCgQ`fCj,%_rfIgHs.:DVm\IP-K2?R<Z6E9)gt[rnUZZW*cDg'Z>+2\qYg.Q=gBa!#@!.#k0sC'90"HPS9dC(.Ag9?moV`]SM<MD@6;J2An@k+%rC9LJ=Kob2J+E*WE-ZUM,n8g9^)EZb_3U1;C*;D[V*_*>0FTi9m%$N]=h[1j!+eicH+S";<.IO:Z1t>mZ!?!XErIiDIF9R@kpGmG%+(F)ON(^RA#E(r;WT>hr_a;s4@71g[=_^bZ0qs`=fPd/j9\/Lfd:,^%ogMUa+dQ"\=,0:7JuMH)g;h.A/gp8(U\Wu9N@OU)VJYsm%BNo/OP\A1k]1HTAF(=5simjg'Ve,eJR<o$a.lf<Y<o4S:+njB&;=L]J&\18drK]FAI)g3j=OgNF),#sQBA&RSY5oZ`o'pb\k+I!O%Vlqqo-Z>"aH`qVDZZ>8e1[*7jhd^`koK8fG%(c6+L=(&*MDOI8[sAHCFN#,>3SB!OkKqHiB$a!"Jg9F)j`JW_F>:6E/VgJgK.bFb%*%cpu^Ji4HbKUeB15E"lK.a_2O3aLMcCg*dpdWK$/'ae4&'=#qFN#,>g-5)o5XY+s>#qk#Oj1mk5T)<G4&>kj#J63A;WJh=Zc&-;%;^spal!hdC3S!c_4AYsc[A<d`(f'muhOU(Vn\?U<@`jR,.LW/=T^Rpt9,LoSE_CQo?6WXP1d5J."nJK,3D7]%+E&m\@1kB?*Rqlp%K'XZRB0N1OEs;\/G=[?L<s<P8nsWH*F+&%#jUh-1IAfu(SF"u&miQT[m\)s5f$S2:_UD`+D1'!&Csc"BnQ2]hI@hQsL?8<_0bP+^%h9#nR$qPQbo,!bfoKoifkm`uDMb2*=>qZcu12t,sJL)NT,do6r)'XB:a_Z\uRtc%a6t<3DL/Y.D;Bf#ai[d2FacfN&LZ10>SRU<C%3glGXN5R3.A==dX7WAJSm#)<]gOg<j)W#J"J6:6>#eKFjdS7"JJ6=P!:6aD93o;?ICl(9YJQZAHDiAsh`t--%Bp_#s6+YZ(h.`,k%;Bc<ok%-&%$)WA*SOcI*MLkg&3?psK5<!=R%/_f)I/34%ZKi=inJs0@gfW'*/_*gTgb7Perf29(W@2PTTWnOn2T%i)*$<,IdJb@V%bT74&8]NJ)&X`oI]%A!uX!cCd7Jf(Pp?(;/>p8omflDAk:F2GH`,LgHbn?G*(RlWgH]b2THTdJ%7<d&!U3cdF\:KLQ9t]a<UBh3-%3Y*DWOU(!o%U>^Wc:F7KM3OIa'XrYS3Y3.mGlC3`@rQ2LZ\^H"#;@<6(iMZCMbMcgY@lHJ.6Z,UdCn`Q@:nY2Z4``r\Lekb*iJ2l%B]a&Y7T;DB:'l@8pXXR;*h`.IYWc(t:0I"U'Tu3j9>P=%pJ.mS.PE_5hpYCUUcsiuB(;/+9,c54*gu!r]:h>B"[a2upK@QpUdsQY%0C=mQPb^TBd,dAF[r4oaA-PK%fh[oHT8`-!+lE(LYm'^S^)]QDOd_^p41sSs[3pG#G'&cRXEhr5U[=!KQ%h2)'0PB=airXl3t@;[%AESd\/WAm7S8&P\.?U-!+H_l1nl!6.I/g?/%lL4tp*f&PbO7nb2sg5.Vs9pGQ*Q.!rHdAI:E?")%cc&apW.En&t#aI2`HchZ+eS=%[!X<h=#]KV@K$(4Qrc5$*6>,qE:VZF_072(8>c"VQDrrVHme,ClAb^Ym"5H_3Kr;k<R1jl6TIGV\3$#Jq?H*"9ah\6pZR"7N4i<C%fXUP3*Z^q8<'FPQK^'EGiC;-a/X$]H3a6R!HoR+HBc1pNcA0kXY4`p)Wf]T%l$PJH8fB`jUNA]T6tSnnH<j"bLPmiHaoR$O\=rNQ%#423Oq-kRA'bG;OF4Ts%9#j?"`Wi6fV>uEb6"cg'!KH40kR<UD[9ICdW]4'o^N:a^i-%^5CJha^MsVe7kJtjt>DXFSPAC2\B9?e0%(A6ZCJ4l[OUkfSqeut[Aa`.3*]bl:]JhPV/+;&?cSWD!r)N]imIf<6=aYSE=;,5uQ1?fdZiU"P-29cDC(g\/:Peh@0#)qr.7Y]=u%'B(?PG@3M/D!BrcDQo]&WdV$Z:E8MimtdAtVbImp2lQPKHruml<n='!1oMQ&l#UJ5_Jjnhb;_:U^PjfjouhS8;SW5L91GpA[5aJ2%<7T821/ag2EFbk346+CQL&A?!a$=9MY9au9[]d#\70c=6V9/5&dhgdEcQXRW44Ut`)4"!N91lJECn2/:iKE%paC"fl;W.u/JKJ)G%>cF:4O]14\]<XY_A6c*Q=t`5`;a4M:gdIPD9-0E,V^[@6^#l>LVqhFOCkrb`8Ko7Q%hp':YO4H"&n9bd>KNfnB^AObp5e?"(>j@s%!uW$CPq^f^kqGWl6\Z\n\NhT[r>R^6VeHm:c3qjDWBfP+#`%3a[+(aHB71;W=3&0DcZrm:ZTU)?dr,YerVXTh)oHkIQ+jUg\JQlh%9KmgtgmhVOqtt#GiS\qs/e-^-I($ND_7(F5=.``FGN+4>FEm2Z3-s8leqYf'/]hP4fn*bDSL$XYZ"0Eq?(B`=-Z/e`e7>l>m-0_[%f/\+hF5MnYM`Y6=b5G;FgT(!&Vc.LpOVX3WFuq>#YhPOeZf]DS+`DI_U/'1J=9UXm]pS_[bcsd:J:2b8=mIo0m.U?hs$KPZmcCc6%?_6*:A_9"57n(O;(Ii;?7cVO$IYM/$HKj?E5JsX,d-6:iSD.bUHgu8?eZ#-K2u.mUgWouk6IAK9Su1'QaE8*,a)A9[_2!g;if[R7%j)h=q\Z(WC-^0[S3@-`t-eEY[3R#$0&J`/_FVeXgijAJ3[D=#q.1LI`l"rIT53Yihn)u"fB^Trt:+<A<M0l>\'Hbk1Ak7#B?=uC"%@_([_`%b?R\k+Nt]9IY@hLM*V8hSrDe8R-D"o"`#]Q#23f/M\8E]T^':$Hh4M+co%cS'PdElL-/WPJF`q5)!HF,*0?d@ro9%&PR1%,ik8DmZ/k/VetUDerZVq-*tKp+-B9a2*rl>F\LJ13=m-N2I2V,RXZ.:A$bF*VUfsk`lQhT=h/Xbqj!5fVAh#Vn^6$3g+l+Rk#&eB%g"CIM`eT;jA'1Yf(^3'gCq;`c4Pjnc11':oZg"c9l#87bc)*"Im29Cl>sJ1UD\V>j5:W-T97B:l.Z>sK/rR,LmY[$h9pZ\0kL+)$%d4o4]A`_?;2TIe`l*Aknl003Y2I0?9?/D]5O3a\MoFC=dflSP2/'!`GQ^(3&3lD6XSMM8(8nZUa6YtQ2FBR?H`;.HA9paDG7!7;<%FBPskHUl,A9p_,<=)\d@?5!FHl*;3uEgUiWdq.XhV=/dO4e"&SQS(T$A'(Uk9#&J.KdITU_\n!('+U3>H@.VVC.Me6%[W<H1]WlS%IE=RWCRHYA1?,HI,$j%_Q+8nERG,X2TXu[Pi6T1*N,Pc?e1O5%Y:f-mZEj3O%)/pJ-tc9/(Y]jMCLq3>?)GU8J.m(rV`+;k>&?e6%nWkK(W[g.VMXDn,KXNG%nqfBuPd:EN%D7*IF%H6L7LdLe"NsK1/n.$OYEr^F893Tc(/]SZ;&M;pmPT2U77067R_+OVQi;p2L5JJp%9T?6d)o["urgGpk)AmG@h$D:C]&mnkpuG?)geF$U0HBbS41LPii'hi9&$sNqjt;Y8V4nNV^?0<hF5`?gR!p;9B_(9@f^^T]hk`)d%no@/l,d]4S)FH.']2GmNK9@9'na1"pf!+:J,+9k`-dmtoJq*g'?WK?#0S?^[b$BZ$d.&2L^#Xf?AJED_)p3+Yh;\ZE6;qVV:GT+7%)`FtE8c+5a*=[]`s1"es0`-@L3-E;i*1?REn@gl=4jq>CZnlMnD-$@oC1lV>?)a*<qKpFLM8N[W=`@0rGS4fFZ2e7LCgUZ=n(*$&%V"/5,^KX1<r5uho*]3RAQ^Qsl1m&`f[sM0`Pe%_mT=jVM*CG8%^SM=aL/):#c$jsplF@7`O>X`k%/7efKAleS%gY_Rr]tnlMlQ=$%[B)cN@IG%bG(re'ke@3$gDNLFkC!-um)QP5E4&^j<cqk*)(G\:YeM9b_lIm_IPOmK7a3=?Rojb#\/R3..n?/^@S"Y)i?N6MbItBR%n$j<6FRflbULucV\`'^@9mIuH'?Nso,ElQp%<k1rPkW6<mP8[J8_e;E<+B);BTtZ22r+)`pH"U*$OfpiQf7I^9IY/f;UT&4B@+2a%crd8PfKqGcr;<QLB4TI[6+`DMHSKX)j04BJOfpFocKL+m?W*bDr]Q*jgF7VC<Bdni;KshLE(N`BnmjekB!hL0N6n"S`a.pI$a>e)%Gg\%bY8eaGM)3#'9k$GFj^s1:k.C):1><CMQR0KP9*Ab@\?8J%AVj'i%Ymhhb-``q3i1,q.o'PWSun]Vc'/%Bjg_<6'dbYLkDbhP%EBW^DEQ)REMW$u!*7r`Yo7oFZ)/p['k.P].`RuObWPr&%RcCCd.m07MTu.;]EBW\!J)+Tu`#e69lsIku=t4=G&NR!aKd&18oiu6.%,r$TJ3/@f'VVbJCqn()OGR_*nSW;6I_F]&l_^!7igOkPGPOiFp[uf0Ba5"Ct]cB;aCuhLniUOBFC0INN<]`?j-LYB4ZBiCuC[S'k%:/l;`n2_(ECPt5k,d4b*@9qsO31%3\:T[869C-Fkmb_q=[o9'llbdUXV\@UYk1c*+]\L9nU3kNnGI:20WG12QbEeG)#?7)kn>ecL%DPOb>o&8a%POK92?fp6*VcLPE)L8lChXm#X\(5P*'&J\DI(6>Cd$%D=IiAb[%rsb&C!HL@GtE7ggeK5sWnZp/gpqU>ql_>f4.Ucj%@rX0,VQE\+a)AU!'@jYifCR`0-0L:1DXRdqo;;O-Y9/3eQ/g\R6qR-9nW(R6jR%>%8L^4iOdWoM':k,<:5U(Vq_,4QbOlMr[FL5l%TPnUK@?Zba`GB1aOlKonoT22YebQt^%2W355:!)n-I5P:Cpm?=pb\T52m]TN#d)6lkGBfEDem7E<oq1IWT9)(Q1cc\\/I7UD8:Q)%rV2W-'`.[!Yp&,6$Kmb$^Is%J?r;g9:f1D28@_lncNf3"QQ8u;p2)qaniT.@29N/hO,cr?X1<\&FhBo&O#d6cPk?aN7shV)^AI0b%fgtGd%uP5gl9nbWG^V-T4@b<j%B2oE]4LlIL@UBk(>tsrXHQL?O9IVDB,P^idg('i`K$5db`G=Qk5/T<F5sW"qT&";>2SI<Z[ZoV%eG:uBNE_.T1`PJ]O\bADiZV$\hXq)Fi+!;0auBc4!NY-4r":WoPY^C%\-EM-]N-BH@!m'ppI;6nAY*p#gpLr#oesIFX^!@6J9)3T%b-<uJk+%)%S)U;C6Q/iA:CJ]:mOUs5A;OQQ$CKoKO%\S&:$I%8i2nr7;`QpBBf[]d@Yi#.AU!B5TgUMHCu?m+V8`])!f[Z/q6H28%Oip\;YsCI<6U>PHI6,82X<8[g03pP=43Z"O9^GkEas&=!!uRRrnu++TZ8mF;[.+0"J2(GhEr_!c-U7T"]a0fDPm*Nl6U;2is".i.%0H&tA]dQtS;-AF<+=PG7m)u]V"ii#Ml65>?F;A9(KJM#2nnmGC=b%BYaaVgB5T`WF*rH,,o#3PnrKET='m\cXG:?n%(N-=@nkG?\%)?Y!d$e:I?S]$$;;SM4?8cR;:HmR'9)oJM""(L3/F=A<g?b+`,iDRDNOBS(%90E"ZNFu(&E5B5:`E$l5Z_:"IlSgeeCE3*F;'soi%cA'KUf5J`DgIL,d=+%(+UX"V:\C[p/6J4QTiU?H_>c+cr%AhtJ<ubg-0QO\a]mdr*;B!"al!D+kL&KgemMCM&r<E(^ar:&op\GWF%1F6M4=!)pq?ZKoGMqfB4\'2M:Y8BL1DJ+4<]ma*eG@QG*:#5,:9XmOeQ".B&,K`Rt>P_4bXaYokY:On$?SU)rcUo/<H@XLN"-:1J%05FgtZl:0XUNoc&@]g@<nWhB'0##kS9_\&d8H(/g+5_TqrJFh<S<8s&oh,cDSXl+l/Vh*m0;=u\>Q)u_&3]_n^Z+l"nrJcZYFd/R%1-d;S1?uQ%`OG\8`mC[YqSfF3=fV?DZI/s$3D5FSeh)Zlf<=sM^G4)!hWn6T[sI[nrJFg9n)G?Mmih^3^Z"YAHd(U,l"lCZHi5"X%pCNt@S:*m$n9GP`\,,4@0>lW32gSM.R="miebLV'BZ,8rP2f/=MiZ6)1[juU?5nC<]m_uD*4/5E?M/[DMH_NL+5^SL0\$NifDlFa%fjp9D>Q#UcU/&_AIe/9&qXs<9'II&FhWm+B<nb'd0@k%6bKHt/p0PLCSS@#]9dT9$.s2q@M*0QKpZU^aZ\H/Smr9Dm^AI[p51;"A%<^/*KnNHkX^PlHp&ne*QH`pe]?V<NNUYb='Q1L4``C@Ml0/^k9fq*3/eYDR*.lQ-0`cSCknSY3.Z'"JI9<;[]XaW]^AIdbC][uVW%d=]?mlW:/)P*Im#]m`D-iFs*;HH1$/hlFUurQqhe_nCN<4#X$sO5XE[_@8<BXrY^!I]j)soh4^!4oSd&4ATVHaXrRcf.VVE&=/r8%g[FWu^:*n3)=^iZ:+826OphF&0f=FI0/'/-]BWOfR$07^fPFmPI4B(gJPZ"h+-p*#SU,)_-J.ABr1+<#9G<4[TUJf'FbZeN`mmgf%ohO]#kGpO7]bbTgbi$[I2=kQt%?!J0($+rPm5-ngeaN**-c$NS3HMiY3E^_)HY*3PX$>S@Ms$^nk4c$]gW'*dmj2KBpYrL+GkYps%BXFtONK$`mU9VE)iPaB_rH2Or]P1Xi]C5.6f\<tu0_W,F^Pi8i#?5tfr:7]!Z?S'=HsPBs1ObihI5HtF%t>HETC&6?dls9VI_MHQ%eEM)+QTEskmH:#FoBr:CE"^B<BDe[#&:En3B'7CtebS@Jbn&d:2[;R]?;*P0>!:Yd&j3p+>$lDbGN8)>bNnHC<4MR/G5C@&]&eT@%5G%j<>^Q!7;?8-e(@I_(5B07Cm;8])[oYGY[*I4.STZ=biH<gSges-+gP(=/mE*>t,=f?IP4&uf?HiN%ZD55*nAk>"icqWTq62iN%4&b@^R6-pg@F)S@)QW=-NQ/0.\&QG.&%CBZA+(+P=!tPn=+Afa?NqUd),#sQ8]XL$A?6mJ-[<n.Z1P</OJ8V>HmJ/\8$pt(f\`]'%/XAR4,[`L$:<pQJi(PaUboB!gmFpWb[:!]h@IDAZGkQ<$rmTAPM(0e-IXkM'-PokNo>u^\LRXLRr_0B'2ZEo=dr^#82%P*+M>=5j%5-J<NQV<dsad_JJP9!nu`k(h,:u?Hbc%V(6=6ePV+85:F9@m*"XDL0.DgR3n>?et:^_CGWg[E]L<G-B5qYN/AB-)NIo?ZOO7JOF7%5IVYN5]MA3qUtP6&:/?*N0W/kG'E'(QS1Q;([-Q8cr^3Or'I$lX-`G3Mrp6"96jBAN*f\f?h[pf$g?^&el)E<l!>/V;Wjem]f9%#%<kU5R2I8S*TBSLWe/,J.>0e-l23a@6c]fjT5-N\.T!NlfIm9l5T2#5t^YYS^5Bku&D4dJYW1Gj^TZApcA%,L$RfFZA'JJ8P'Kc/i%(3\m$&pT]Y:fdR@U)rZ2Zd3<)Q?L!q9CI).D,kpYJUdO81q]A\*RntdV5*Dp0L)D#T5*>uYD[0hbnj0B0CEHG)_]d5hn#]'/9U"B%PA[mfod\C63u!u`csg%&'DX3e?c<fDh?KUh@&*7(VR<nAFj?=PW`^@2K"lZ`r7XL1TeX0i[:RV=S4k/RW?P&LU)Hb>WMA)0a$g!U%Jc`!&Vge%e+l]P@LPC)c]eu_%I5=IX>rk-W?A2UL>-$,LNSfn>YF`sg:fsNWI70>fOSoR^p(fhu'C@IN\c8UA5EkH_\)o;+KrN>&%'qlI#:ZGsN),d+?Z+J>$p5m1="/hI&NLm;(%89agf3d*uNK^nkmss&+5fC!N]k4<l%=ucnc^:TSW?l=sn_:^Nj-L.Z)F3gb8Pmau%2,HmTab!P8F0$=mNMX;?*lSWm7DQ5QmL;Uac7Gp^2<0(-G$1bf)5f3)Xrf=3OCrKnRQur/r!-rN;:F17O7)9*lHRga_d'^T)f'A!%[#KMeTF>^A3lMG"V$-j3r%O24VJBeBR?0on?J8I6n)GNd6t\IGR7gJ3kS^<ebeMq=5<$lgGAEbpbHn*<M[rgL([oF]_W"UEn'm3E%/pmkiqS&:CIO8#9B].ikkDp7$_#murr:I&_2R+oi:FBKjh27ZJh+o#;!*JP,mH@9Sm=ltEnX7)`/T+s_)IO;"gBA$e+V5;oj(-/u%]3Y(16YFZ'isPs.HB+UTs#f=Sf2M:FId[.1_;Q`BeTh5aJGV%`LS%2^KG=0;C389N;mF%3#+Z/'Oq1pDc+a1#UT(>>74k&BZ.@`j%N^A9.Qc#ft?=Oi7<.%/ek#Ie6Fn)?$pn-_5A6rH`(I%t/kWfI*4d:!Y@Ro$CnY/(5cl5'\;clbmqI6`NO.-W)l5t68U?[F<BeH$+%le&,0_(D-J*2@:@E-U#gW(&G3hgQ?CB^QF<9P</RCdD0(2]fFdC?uY#60Vki5L!C"6J/L9HH,F^OkPM#9ZHZfU*b?Q9q6WZTAKe>%+:TC06oD^c3!4)`0uOI#k46S?d+_D1Pb]\)S"T'qqO@8B/2p4+hZM8F(:0Sg@@M-hSj2)%*ZYpb/QFE=KJ]#;,r'!i7QFt"D>,mP%l7Q4W%ReJK%r#tTPBL_eC@F#.$^C%OBO-)ZQJZF2I_EM0*KMOMG;f$07%bkK:B[TG,BHNTM/B#UXYfYr(1f.[S7:4Qk#0Jc(r\C@%c<nFL(r\C0>$jke?kh>qDO)hd*K4GH+AXV$*K4GH&B)^n#G]oU'@i4L/7BIt-C;%K7^3CJIOrN#=H+,UQj.?dDf<1T;QtuZRo=6f%YKTWO7:lm6C7m<-U>5e*L%e6&hXb%Oo[Ugj-?3>ana^#boMHV5_6`G]2(d/R&ScWuLdrBbXaO1fqE]mKe_9P#aI\)0^2KE:Lqeu-%I#lePVpUf4h-?>XKXg8jF"rWuKs1g#rbc%l[QVB]F*U7iD_<%,/`ASU<"o8IB)UocauM0I)q*(LT57e*OUlMqqRpW]CerU6maub?%&":[g;9?HMkLDt."El)qIC$6Oq;J4$q:N6h\@S^l9K\qL>1k[UrO_ZEUXNuF[JnudCS*cF[dJI,jiZ#oDLH:NE7\9+mIO@i+`TrI%k%7>t"msjU%_T"%mFN/459"J>Mf#!Y3t7[')`J#::KN%[s0T);E+f/prn9I?eu$b8eeLd+2o#AX>g%*`U<2mE`7+#*YAiNJF8GLO%k1VKKk`oaVTY`j5^\7sQBq+$'W_P1:S:@#5YSt-;Z^Y5X(O0mel5Z3?8`qS-q:H@Mg3H)eig!TI5HK9MZjq*2ocG-F&%rMHo-s<e%^00`m5G+l4_WgBWoe17Mj6'dYmp;tr++@SMoHm?GX^h5F2q#tHCELj\3]`R,IX`/T^^/\E.bjQl`qClf]_'?0@dICcc%7-bdUT:t%CGYP+S4/F/WE:C*Xa@EVnYbB7h`>GN9!uYO1(NY^e'Ls:jt`*[Bmahg02b>j(;3i"?O6398M',0mctZd*E.<iZ2+\NlA'$KZi/S+%LdDmL(DkABoV)Q'-pq@0Z>U023Lbp9&-s@O,0%mZTAer\^$X:,H%>7Z"Y+Qd`*[*[65fMcLM)Mu_:&1eK\c_U%aSI"!QY/Wc(9@;%a(B0_lti88WoSl$>BE+6fNZkYoBS?],E2Z8H;hG#[^'uJCO>I)f&X!-?%beh)XJOl2k*]R2lkNbB&c="McoFA'Xd^MqdiHdDK"]0%CZEIei*p9liQ9XHfCL!bAnB!WC]/K;I`&JQkh(pVP,%.P:OVW<+!JfD@Zo<rV`JeK02'N4h(PeqdiT.+qo'7hnHD'KD>7_l\"nqN%2KIe?Su2n#O/R()Z=!V$Ys#_uAbH#Ve[_0pNa`"Fk!X?7h5K`6PC:ANR-\Hfmp$02;#?Ahm'N/^&$JP^`EcWp26Wm#St\9@k+]6-%Y)'G')*"]K\]u1O_tEJ:i90[D3,^\k@bI_q*5Dnueo3tpP+udUBJMN,CQOpj\WhH_]&EsH,#>W1,"8K;OQZP^>VPSp7b%<o-!e2&%&a;BSVM0H)7^QOOC&d2SP.7<r%Dt>WpH!p7GRF7!4q]AjFjrn+3(HL5Ba\:b22UPP(NA%t&K`hQo47gPNP%<E@Zq%&`ot_70'\Ij%Zf#-C0f7RQm7'h:oQumqD:G*#Q!<cc[@_$@^_YgC0!O$uaA07\]]mQ'lBAV,0,cdR\th2k2@_[iGRG)-/^TJa*mLEQ>.T$f^Q'/B%FLA@N$?97@*W2%48"HKWO*C3hP8>m$U@Zl`IIQ3$!r$i89&uQlkuIfh?L1_7EiS?^DR"b!BMQm=F(4)g9JiGQ4H)/g';`uU]ajHd%a.76[jZ"a(Vf;#$U?9Hn:&NMd,iq0[pN$!"ali+bcoW0LPJ57E*k+=Jlr5Q(libH%DrF]I__-V6o[LRG!usu/.YmUp.WbGhM(q\'%$^rcIk!pB.o'?E9JF:(j2,UP/Q3AQrF8MEA0S><2e/7U2gfHO?2T1bl#R=qlX7N/kgc&s:MDibHk-IjnKlZp1,Lp+dA%DYM^^r93%X,YBS\1<*Y+0D%G%WaD$he)41p84n9LUEbe@BC5Rnef3tO]?E.F8olQEb/Cpma==uP##%7MtA)ia`1TMeG`mA*3XF4HM\5RjSE;d%s-u]Qf#I_-PoSCechZa'Ef_rW>TPnk^"V84>.E4'CjWS#411=21o@t?gmqX,aWp6(rh!7*cR5aNq`.fo44jEp'@j+/ZJ4Y-gd;,:%A@6Q"Fgp3)]@E<'/+fI-re"!2XI*$bZ!:B/E8g'Tl,5-=XdF0pmCS5?ajNeZ[ruoF]5$4\4+C=tiR-W]mJX/pb&W3YSuAs@/$itI%`ec1I?Hn&-ksUO#AAY:HW;dD.V7o0ms,G06poO9dBNQ"Ek4sR<S+ssAK0Xhk%5[WiN2k_AeqnkTXaZ_(\*CeJ<Re/KX5[+8=2+Ve%.d'q'&6cQUTGI<2=BW"HNak%ljVFHaQ>5/n.Z7WXZpW0A=MA"GK@$YMRV#9Z=-2nRou!s:[eauuQ,8t/64qDB\[GpJXMC&JWj\\:%^_<fRB_f'_<;g:N^oH'/FD'>cf8#fp/^K+uN`G[;o`_sKNLCLt/pHL1/6=ueG@&P6<o!aG8tC:.G;GK3:<e;2Me^*P^_>npKmmT1%]g<94SrYR%:OF'V*?jJuKRCCDiQOHC)IE&]h!i8S<25AOY\g?G@%V06$q6@,CO%Ol)2=/'3AoEBZ+;j$7.hN@LT;cj@6K7831_%@%_SWNh"f`O:N?)LleZ<Io.@9pQeS>:45`VGg2>I]C`#1VAE2kc##&L7lTaUI3A18OgRU!5uRR"m_CVC$mYY?%-jf7EbE5>Pp(A>d9%=gSkeRgRq-6_e7]$@Q/_'UUVKKc5f#J4ZL^FP+j80guFB>B`5!<Tibu<b:HkWErTiQWH-/Q+c;`&XZElk3r257YNrZ(P`Y84]ha&%d8]=J)h?%b;tCFuO_It*R\iCs,RsF&;$nXc3jP9Q6@+?gVOFr1)_caA$ERa9:l?5J_A]2#%nHfK68]ZOI;tgH*<JnK&Kr>Z"p6<2%l%ifQE.R;l<7pMG?OF=q"b5(5URG'8N7JmICNK6I93j%6Yb4KB,jb(92$Q<%7a6HQEE_WROc=+s`QC*@0VBi$C^(Y-ED5P1EZpAB%O9kBpZ;lfNX?k*.^NIU6/\++6,nCuaZGcp]AIknH5`8>EAq^RDiJVC]\_;eYg^qTa,\S+5JY7Nlo5*KW#*HK6!8gYg]bp_a63*\a%>a'0bihk7H@qR-0OZKgB_a1(sE)Rme!f"Dm0.MDA.0?A*DI=qPVoIX-;B[;KRfn7N4,Wjf%^Io2i1`oo%>]-ZqS:i:TB<,7Sl!E.%hI\9ETq3YV;LI%+($.q&UNiDBR*5jOAZ,VX&VKCWfcDqY;t3f(KI6dR97WdFL2D]:40V]""I]!9RR#-%r(aV@&Tq<8\l#%M.XI`k%;!c]M[OmVIl3WT^AJ8[G1#'*tI4B-N2-h7N0T#j\i\2T[Zi[p:@cE:4@^@a@(q6W%LMYUO>[+QU,%(PMilNg\mAmdr8We[[[6gao%#)A:>DdjT],e%Ce`Wn>&@"fk16lOc'gg!R,!J,m7@"jQ2C7,Ks*h]11BS8FA":UrY#)RC4TNE/#Y0ZYp7][euG/oWk/A;g67!-+R%jU'VL=s\cSdQMue@XAAh7?K!oeW`3]oHUqI9[AEL,PZi$L"DLQ',\Y)A/X[6m'uZnTrJeJ@cfis1f-3=))KbR9X/Fam\8.&P`u_i%^035:`'n&r[eXj4(I9cbL&2X[,\S*H'TOPVOoe&!.QCr$d]Dk]`,D&:4#B@E(f3u]L;EH.-/i;P5-9L?nQ^<0</5!m)Zeuf6NTG\%m2EFL1P/`RoTf!'Kb1A[&9YrkOJl_%0nAPJC1$1fpbRa@6Nb[97n2c_^i\t;9FP0(4r!)j3sh9].,g#@I`;Et"Hl:V<=/Ju@VMWI%$0W)+7PYr)+s*`&,jL%t+NtR8T[hEpnY5-Ra1^7N87D!?e!p39i2$Wn+ro*."%WV52/8,*=o_&kCmD_cWegcYl27DfS,m%&BlT#q%,;bYEMAS[=P4a";ZN?LMn2sr]LG@"NS/1Y1@3Huq'gWP=F2]r?\7mWO.@lB-*[6FmU\'@,J92uFb5`IhjM.`$g*Q.6KgHgmWMr]8%%0M<cXoU(X.?LoC(+m-915!!f"N+uI=cg<`87;_DWRNm656K?B5rX`>JdHU$#^Rbr5c.FP;'7869j4_JRYDPE*_X>>m!uX9cXK6R%.B/a:bAE<.^<?sTU<G"ni*ank_1$EL`<@EB&CDCT+t=@gr@/Hlm?CgU1(_(5Cdcp.g'f`7Yt+tV-8EtS1KMAS_86h96o7a1nYs#C%g8<LrG+_D,ZM_L)EtJL;C/Vk]!=d[OKZY&gTd2EX,rb?;?o!T[,oT=j8C+@CXQJ/h.\"2)GN=*)af5K+LJUsKK6('HOE`#L-^[tJ%reGa_MI$pgXmH,"K'FK,fX>7:M]<7bPEHCX\i,'>*"ft&5T1<VG9T6Ql@OniOKP<Y+%]9\-Ye(&Zlk)R'aI6#:'?JWM>@T2h.+.B%B:A(;7+!b(JbUtC@)<V.7jpX_W,D.!9+uMpU8CiI8J<e7M3o@=-'gH$;rJr7"5>1u5R7QD/[j]DY=)HMU5(Z(6/i.5DMWa&7LW6"%DW67533Xa,m?2JnqCr6[;n/G*4fi6Ma)RJE9[Ec9Gk4`Vo3DY9iCo,!P!&D.#b.\#jb[7E#BpG&,!%YW0+t*PEi,9Z3h1SMNC\i,%J\[,m&lYJ5ifQQ%#.$UO%>l>agsg?Zi/3[Aj2D`j)'h3c4[9`J%#*G,T,pW0e.?'b^'-#WHA[%4>!QIZ5t*@bd\e\>ZAj$46>e5W%6KaWW8h$"tTd,mq3[Eu"N0pu;K_HI2Aha\%W=:-TOlAKHAHZh<_:[85W#`>-^^1/M'!S"Oj0D"I==:0RVJ8V8jG8,>>Yo5.fOL-M%=OCT;gQ/2N72$6#J:qcA,fpch8-q-nnd$ZSL7j)&\7Bb".n-.`0m]@O\LM_(#RIPK"YJJ_l=R-g.Z!&"*G0XjcZ#0.%=/gV<69.Q%2MdXTJGFr:%i"[;];36A"Ck9oLa8kU)6GVq8iGoJW8@@:O`G`YMEl,4PbB+#VFmk]/'DAghC#Q8-:Ggcf9g'fSB3^aT>74A')Yrc%257*W>g\.5_f?],bp`jXh'oTp@[9#BaJq=RecKJtW,s6&AC*(>g"C6m9b^udD?k9p.Io_u'EeZ6Wa\>']r7X/?RiJC7HcXQ+.>nV%/2[b]i`fGg:l>X.el7l["7m8RZH%ZA/dV"\frS(E5SNkDYO'rD[^]bIrn%gPOS*6/TgKe&K^'/FY05t"lY.]-,8u\u7^A$Q#p7sa%W+Hn^[-:#QZ<=-L?nEZKOA@<_+K&Ke&;lc]m%-/?<+'J#MS<XR&:pWh76D?U3q,C+'!bUj2HN$l2X8,rNQq^\>qqTI6AZJNfkN"8%iWR/$8qJN#lP$S5aAg;78i,Bd0$5s?D29B3AdRe8+WCe)f]#0CMHQ.#S=Wan9ZQVu@GM$!:%N&0`,n\WmaSiFi2a^p-_!uATgE@c%Z=ekh6.&$+c\3Pp'YW@9=[kY&,MaWZ*1FMZ"MS6-?*kI`n=g*Qr)Bb]GR[bWW;*sJ1.(OGZRGBr==M*b5`Qo?H-iR[&%I^KmLrI:%$h^V+1_"l<GL\e1&co`5Bf`As=X<JJqGAfh7m@i8L(V$_%!e+eBG[fD\/e7nY:Kc=P*WmM5X,8P7KF$5O4#:aO"BXE+Cc'XSTIf"%*HD>k8^eB']tl<,[<P@]&H`,,8tb[p;l?EZkT_W0;J8EfJE(BV]d\Rl=WmjkR-;aN=mOWd<Wpfiqf"k[I807=gsSTC&B'hP*mRDu%'Ji!&HfP/4d*W6JM,[`6R3%W%2Pe:(i;p7kM+cLVK>%hg_O0lQ3Apoo-h')h!=<$&fYIU81gsZU7IY!mY_%9Z.K\ec4V?]-2oTaN%AKbZKNI_RQf]=E?Nb.]DXDGB(X@+UBU*cN:6e8;,\o&okNCZ1<^P4ko2K=S(5l_?+<X2Sbl;'R![s_\OgS4)\BR:sL$d,F<<fPH)%+iB<5RDF_J&8+W<TE*08B#j;7Ti/6E@s;G86?\(sj1&Y.>@<MfAXe5$0M0t$nNG,_TL>@\2CuB%:b)d9)6l2\m6KYiL)7s9YZQ_P%*@V^Wp;6e;l650?0pO@Y:,XaX63>-E4_$khr7s<*,&iRs*<B=_q#J2\6YmT=45?5nj..k6pV=RfG9jPINH\Ss<1d\GB[Yu3<D!gC%&)`m)XWS1.1cA:a$UO/I6o8&[LF4L=!At1$I`,3.5Hl6J8e?.'TdNq3/TM6qCr=&PaS5lAJn[N&AN]Vb"7mo7Z$;QIS-LI%-Z1[K%]=]^!^`f=L$D[jKl&FG-@/@N##^mr)aM#OhenEG6kgluccOB=M'W2M"GK&1qC<4+1P@J)F%Y8ksM-pP>\:XsZ5SZ^SSq./#3+B,+%CI\:Mfj$HV6ZWun)\Du6[d4KT4\@TZVWaXX&T#L+i!3eU7\`H*.ZK[WDK&M-8B3o>.87]e6NJ[Q`+H=abtCl.:eOZ/%a*;J'Dc]^%O$t6m!5&oAou5*mZ>7U(KO]?3/f4%1+afMSc6b*rK5MrXIA1]4U2ZGi]g;Bia:]Fg)i\l=:edEQGRd8#*R,B'Aq\28dB3tU'aJi5%1^o:CE;VUMDqHD8"!ep[",nhKD0NB]oYe,Ye-@<pH3e;.^r=^f"e_WW7PP>Z#Qr!mHd(YIAQ(q(BX]<2Tatg3IY<4RnP&H)@)(\L%!s`D]HiUD_r!r0c=I*btfb2KY2oQs@O4tk=2Sr/@N'S'_H.rIo,4cW:$8d4cku(:g=\VuP+#cOsr;f!1`'tll2JbY=M?H6VXqOsJ%\?uF(5gfk6FO(/n))1V-3t"#?!!Yk"W1#&nj9ge:9s=o9j#2p+)imr%$7nU'JjG:CG>K59I55q]G5.OjD_IQf(=<8X?s`/]<X0mE%'l8&n!qPsVJ>r>TPQW,)<ba>%[UcjF2+ka%G*2j"?4:ja&-d[^+8^1I6#&pb7&Vh3f9/[UOI*cC]cUB`?h>`!aWi8CC#9g57I:?H%VuknNf,tOJU88jAm;#5eY#>ZUM1gJh-r(c)@lbTs#QfeRTZ",aV2.5Z%PtAOK2A6Y3I/RlECb5(?#6llPqYJh".6DBA"l`q7Tfkh%Yt$'-L5*XahD,b*U^l_e+fk,?bt.;^\Y'^_Bjn(Ceq64!K.U4kA?^!j9<;P(nL9-R#9GbT0uo;Zcu^e2g_4RN\k3=L'Ij/*3ta*$%6%roA%CXp,".dC`*_Wjj2faaI9o#9frBMf8P-J60V!!;s'056MTF'(Wf0?pfFYGs:j+3-qq)loONsl,Ie/*1!2Xc32'2gk2]+/X?%EZ;dqTY/18$6M@ha>kPG;3CB3$2"?V@AXU$&p;9V=q>>:$cFip6,9K-e`6uX&/#c3Gn;1^ZU5Xcb7fqL(PoClF\A50j:2On5QZZB%hNKi"D9E9$&rN`f[`Mmd*%Q0/3;SeWJO)BY4:Y2ddQ7/tC..X9f7F_<O#b)%A%=.!?3"?t0/R7?RO8d"T&`Eb2PY#F(_O8./.=%;%amEg$Ol1#\\0Fms6A,)<BS[;>DL^k2B']Qe'>d^"$S/_E$Jg8XhP`O/)]'1pb7G+U4Z+dL?4s%C/W+u`UbaSBa"iX!R,jqq1^IO^%,`19;2dWJLn56%YRU@1>i#-Pa8t.Et'Hn2'n[MjQETE87C:C;D0T7uQ$_L82;c#7ZVEpsGOE^C2>70kaWE7U2;"X\l?,JA)8mjB!%d0$82OCQ2$/Q.-+d*ZdjbD_]=>?9gVa23LX/0*UTOq@;!U<3I<@'ChG\iB15W[FfTW9m!h;^/u<Q5_#L!Zi*EHu&[,k%BfinJP=/%hP,]OM&7pLM'>&!^[K3<_2-m9/sAIqJr)Ahms-%PJai5?Sq)0t,$e?^=#fWAF^bXmpgb%-;9qM)&T`Yp'Q^7F+uHPVg71LDC.2!K%oNN<#*/J8a9e/qn\@S,i!Nl+BYQ2E*fUXb&B*ZnGkmSP$&DD!,q??D4(.U'AUL%D)0W%]ji5#-hoh>'(!jAKPNI\k3L[rB@7:*cY%0LGuCmgIErdS`JJ>*',L31FoQp&]Vb=MQtkH3/,V<3UUQb\0'SFs/;M_BaiYP'353>*PR$ZQmJ'nCg=V<Fjs^p01c%>nuFaosJ0r%e3M)]LS#(Mm)\L+>7=-OQF0!jRBR-U5!W[eRn1e1KPs0#f-*`o;AG.PkQ9RTkRN:o/rl>$mQkYWE:eO(-N6EZ-9!\B0a#Dq$5bTW%CS*r/.#Jf=.1h#^Z$%Haf>Jdd)>)jn$q]8C$&Y^#Ldi3ce;o\[j=kcWRBT5Tk1G.f>B@;B&G0P?.RoQmVSmA+9ZG2^%kV3:[OCVZ%lXiOnYO"_MeWXs!K0u2+%%2n]UofM_#Z!;9_1#Z_!n3hapZR2!@ESS--/n3QO:)YcCig$hZJ/jl,%r9i3Iu(P.7'aK8kk@LKb732%YqHXoF`GWV(]Ze;"&Q[)7SL,!"%gBe%J&G7#D<.1";+?7;$UWS7'33u,&l'O;,*#8#LkR>Y"-;2-?!3ZU(3d)<[8`#9*pc/W0GDc%J-6re(ZZ1Z']JDg4bfhEFBOVFeR_T/!+\(A\5,GeC@cO@8IPWP%`>]mF2H[L7Rd>#0(e@a8X_/0U9"N3#Q\InM6"Y3gUcb%!W^1D%MeU3a679QH`*Zs>j=PO#*[T\&Jlm+%?06[eBMTRQNOZ@TJ$:IUjp"^4Z'6icC"@NKfoU\$@E(WccN,a)PQ`7\_j:pY8_,WKE^6FV%F>?3_E`J.ol9qeBXER/H>*e5EMm%f`K8;5`J&%j9M\O+.Su'EZiQ-CGIk60[7;LP9CgK^5Nh_`Aai6%&^Y0ZD6(&0SeY7&PD",9)%R#k$cGsrUfi*&T;%@&d(.S(dt&UB>ih]!k;;?R"i)q^C8AJ01_kU;!I)dFncq$QK2795`C8_Aqe[QDLe@-A#9L*q<sRc)i9Oi5?C%#u"NeSOIuMaCCqbJ&df+G37_KGioe((@hM8^d(!9oH^f(%1l3p,+M3u=>\oT]-V=IZu_K*Kb>']CBO1K/.0a'J=f,F/nG-9He$(H%-C7sZNl*W9p/sb?4E;FMeh*LWRuT(7QQH$3*(fdrc"'TAFt?6d<k8[M7NKH3-tpa\,pY='_RCY-"!k)QOpFbgL\!>CLp/[%ME7Q3%k>4r+'i1;>?k`uf@?eKL+Gl^'b&2iYbE[Ahn)N.DlPR]uETLI<Jef;%[c9us3H>ncS*H;u/9)T\QHraCCcpILVO"".Lp>`IU_';Q%B`hE[4eImg9Pp#%\Y4P]'osP>&o^a+D+:!im#//D8(V'@)267<KE:CE2Q#VW:!A(WiuN<mZ7nR@!Ks)U<Wbha!u(eX3T7Q&>9IH!%g^528>8]=chPO!I>:G0&1*b,AXF)[)Hb]k"0gntT3&8@eN!,%a2'`9uB'6ZFbm%p_cA6cI^Bk3Con<$%Q9D[tSqo/+VT#5gn<EJe%5q7WA<_-`fVl:kt*k)eg:(r/!64be(M85=-5lsea_GI@')l%WA9E8@i\3=&QOS"L33Mb.)hh1i=AF+a#'[:Xa?>2F`7!t6?Ud7k#%,_-Y@B#mLIil0E06$A>$MaD%#^5Zr!0fk38A`&*.2=J+lZ'i&:M,28`6NnCR*PbqtLlr6E;R$!J-5]bC*Ci],KS3CKEHXo!7X;7b%mNWfgi3;MY1N3p^"&<P<3S)<[[>5VA*M<mDZBuq&&b<Y5`>9$P\U"T?qal50r*ek@7M4A8nEg=,dE7M5)D$p:$+4<[aBO[BB&GKh%`V)rNPX$W/'a>5T.'nUI%fr;/K7RPQb_sHZrJ5uh#[hUuq/R#WN%)]O';D;2:d:HPJcKTnAo^I/ngIBTH%4_aMP*"Ra.Pf3)%sA#%$()^@J9eu0Dk[V=G&egea)nCbj7-Y!LZ[iA:^Cmfd9-W*\T]>X#]$tJ+:Lc85a3#NS3R4@UjI,mW2+`K9F:o7JSjQEPhc?I1*tkV%-<1%BBC)3T>PsSS`e@iE]U]o!G+ut(#IY:S/)QRCXMeGVM4Q>$U5bfWD9u/tROKZtDB_:T*E/?^L+Y^;85./U7+96jpUinITCDnq%od$:Fp/>Z-^sdnHP#Ek4m+?_Y;2dgYKeHn[VTl`#jN]R#&WODVM:dR$^)P"e7D!OP"A<,+-]VP*pK'3'Z25`(aR*la\iCVJ0X*h%%.6okS;iAnuaI!/2E9+1B!(fu[(k%FOUr/&knPo2S=>\oT)jat]]1T`"#L`he[DUaQaDu"$(G%o]669gL<1dj>RL-&Y3a+eae#jI!%8+q()1s9lCQr/[3llb:=?$6X2**O"ZnU;:KF=@%NqDMstnEq_S3J$N:UCnRNlUfM4RbjF>Je:l\)V@:\3*&MrC(rB8YWq0,%"-dm%<IdLk$LFVL7YVfpb0@XL'u=tH(9AmX6ajr7T"[eT)E)/O"EO32)!CoeT&[mD&TUQ#4=!%o#s.!_7a56TJbN@[3oUO!NC%=4Vg&6h%(r5q5)dX+m`bc)[,&">"K'jP<((^/E&N8#=QP5pa8s)!1F?q069/KGj',5Da("\L0nEfM,4MWAJ,(9MUK"+EDOn50"aA"pA#sZfV%Pak,Rr5NSd"DkhUkQhk.L?,g3@hucaYoj0(6RuFO`k7csk-8jugTi=R8\LpG8=7#MJP@IAoan@rP.-_tOa(&;'I'NJP.)39N_L-(%Tp2jHoj$>G/WP:aa=4E\ZYr,m"p4$.B$nJUrD3\Z#S?WT7*Sr-/,>T\hL5bcj;e`,nGOaiac\c/Af9slN52.L9C=N%&uq+#'hm't%[i,V$%Z$N]+Nfk.lNjCL;'r\DDHj?3i:%iA:kgPP&Z@=FZk]g(L$`Yd(a6K94a(2LEIO%oJE05UTb#i2"WfMLTJQQmMbtR"&QHc!%!2ZX,Ol,I_rKJulIY'X`g2B,b#`n>H=stpeG=UP_akPd9++hQ7:ElnJ&#LM"Z1qEahFP\,q-d+a+))=W`iXa5i<m#\-+@P;J[GY;%62u_X>MA""UG!$<>>FQN#DNW6Bss`=F9t$L8qkC`S)[%8Ao'4a]MX@/#@?D!N#T>]>nSO,i>'1@r2JW6s%hR7A3Ibrae`D9:+nkk%pTt&iAe_/!>GMHjKFZLom5t@TnQ40T5Hg)97R69JY]IgWK?E+,g-$TLPU+f^,=1g(&4qf_0/E?2JR)-g*9YU^j$XX/iME?S.o7kG%LCD5-OY/9@Kp!r35pF*;+Y_'7^_/]Tc/<hNEQNdh/4qUK5S`."nMpRQe6G+$%SXMhhORDe^Y)Zh:MH"iFc;o#J>XE.bRDfn6TPVg%p3F>Vg,%eA35dVF^&,I>Rf>H1#6:@D>1gL0#W6>r;.=eOM;pERLC[I<VpqUXa=*dHISDi57H4Ld*`*:2#RKLr:PR;?d<cC@acQlA%KIE51,8V0a,#AIPSc/]SM5lp'MC*[Leit2OAkHGW,e_SX!lVXfV[4XGZT)e4=sHUHERY6E6\.R\S'Z2O2<!3p";t1:!VUV[&-TtF%)J8N=#Bo)0=-N71OBTkAVjB,l[+RV]0&e#6[KCC/IC:Fl*g")9q[TE+#IL;:P,MU+_.BJZgBNE;,=S%@+:[**-q#2+QY88EW+^cm%2pAL1g($D2J6@I9DhB\M%rB31&Hdd-B.bhEDhBXGLj:P+Uf0QJ`48=lU;De8AmetY75GsnRC+FUaL4rCJ;M.JZcE;d3.r.S%Au_U%_*>HZ0RnjX?e@`'e?)/%A.c9SnJRkjNK+t1=@3fJh-\Q7a1h6+iSY]([l>L9&g!c&l10DNYjY)o,UNrKFuTa:2+12XYT57JIK<>g%`%quZf#gJ')4=gLHu+b_JF-T0(@WW.8'@YZ\0.pX)RrRudtuNe=AHr,GNe-%?:RKe@4g:76U[_5:WjHTmtsn@G4$ZFK7'WaIg1?)%rb:+"$-d`sSno:L?&Z2P9F6f&S/'"uo[oNX%Q,7<KVm=cCWZ:)cWdf??3e?6U4jl?(Jc8e0b4*1F<E"m3MVf-6ZERXiDIt-CIKVQ%e$;:kYN5)6$4GT@k];sZs(k'o+@X9tW!sGj"*AGHikQ8=Y:Y=R;MZ2mG^'N5>?E)BW8WgKagEFj$?:`/qJ;WgRs^7Q"=t_G,5SU?%1LOJ5hmFV(^q]pP7Lqc08da[<W,:>0]E/W2AWqQL%$46`EeI3i:S<>Q>mWN!LS3[@*YWcjnJ_s.jOc@4;sJlCO'G3cWd!e`-</aZ%K8LWKR*,g;qV*#]3CV(,2k"5j0e>Qi\.nG^+GHF$[lDCF7aOK/L_[I[CcZ+EYp**.9bM]&H3'*Q;PGC5j0Z;<K^)[0)2G_[rPS0Z%(2nc`jIO4L*MG()$m2ngpl&C@K=&qd%.27'2*kB!ftc"Q2XV8(=ZM5HLdDT^EssXT!%_j6[3:ie@qebTGJjXi]7nmtjthO)7uCH"%i!%W`jWlu;7o"iL^I6=s2)GTunMhGFa:F<a+kr3i*?jFZQ(o*S,0,GO%ud@cI2oZ`OM.(P$(cH+O#E&l*le9>*hA:N1%Zf$=H"86%r\6BnJM^WaI78S2B,;/E@rDu-MqERrV[N#_1sUX)&=hiIb6BnrTH,AWP<k.!S@AYb8D'38iG^jEdh@/Pa)/9K5]0dj*"-V22,`>i%1^BAn6+#%`#q=/X`pRPa(MN=Q.HF'MY+.E;;*\u?3j#;W&r`#"Qq,Fuf_WO+8&k_TOmf_kCM?TtT!`K`Z7GA4Tc#`kN`4GrfM?7V%YuU&X2MCHQX,W.qLN3N-LIJ<3MD9^\W+-AQKs_d2'LaDc"j"NB:(m/SJTTD,.41!BJIAp0lm3.(Et*!>Ta0Xh%S-'<%0OZR4Z#Ug%oEF!sah\`<"pld\@WY!eYZ4WG.+Uk^OkLf(BZI[X*imqTfoJUWSF$C52$Tu'q&LTAcnH0dfOjE9Ip9Zb!hL$%>)]h5m#;.-\TC(X%.4(9T8i?q9!q58J2@_)=Knn["g"<U;@i=bQ">\(]2ITlOZ.J'cZ_E@'P%LE.ILB,8cjf,+L)L^**k4OkU?8Z\,.GX<oZ5E2bR-9O%'(lZ+-[H*V1FO$nj4HGl8)\*$[ZYK@>;&6LKZHUsPT-o@3g=.f7q,hI(C#s<*f>M=ieIdGr_7rg*]k&iU+!l::GPhdIu:*cQ'2b(%-h<rXn/J,P/D8@.Jl%#jPH3)n"-/!^U)PeJ^$J]&,)@uA_WO<i92>Dh8.e0X@IhP&G^p;[VT<-+8\h5,moeWr-ARF*[hHaV3ll2q%1WgSF^p9[_;=Hg?"UJcZ^ucN>0hD:4^J^9siol81BZ.a5*1P$k9n9iQD?U>DgXbt,l';O``.O"aN]@4Li]IJ5cq,fV_W6pQX?_*-%U`e)WisZJjh4emmOpths/u,65(n>t':bbX@YJG9M5t?\!Ag>H@,0u.gqC_\8<0F*<6n6L$J1#H9&oL1sP4Lu2WAH_12EZ9R(iNkM%6NHb6p^e.bgEL8FR.(l4AX?:8d46PF`C.>R,_>%+%bq@U8K:>0BZTOGD?``Z704^,r8Wmb!!aNuY!)pI#0/51=X>hX!JdGo@_TXq%jo[e6:.'crVYVMXi$k!+r2'?)9P_%\5Dq=HF@_!"<79(]<(KMs(EhV!KZoP\2'+'_W&Sm59-D>IGTpIi6(!3E/*fS^"U&jLS"su&%Tb3eSn4@a6h_\h9r\XiUiVa7JIR8$;N/FnJSouY-T"mr'H-#Y;+ooE?-.;9oA(T4>*ROr]3HDs4)aL(1B8c\L%7';Y2tSs@+N63N%a@YQ8.gI.3K!F"3cal>VqMUT<JUA1#!0]K^+sF6/n@=s=b^;F(&PB&F>r@CmqTo6I*!O%nV-]6@ba45>_Pqdu5p47@DChQ(OB;oB%7X63Api,?SYs@=)8T_gDH&Sllpi1CWGec7t;(@`RBbro:K1Q<Vl,QMdC_%\WEn\64[qBt#cP]>?1`6K@>P>i66$e387*]kLO:fI<%]BiV<'B)8?]phcBTgQOCD;*D28qVWu/hr[Od<F8KP?i6.>huafbq^A:d\([Bk\)YG:3WrhFj8s:-Ep**52<rmGW!eF-=;gt5+d@k%PCm@rU!p`X*4ff]IK69l-;pK[Od)V*jB)Q;%RhiSpul`hs$\PP7)r!5Zj@@;L0\mJVOZEY-&<llPjjnQLQ^?Tcm"gVd%ND:/4)G_%+/37N69/f$j`j^7E-0N*`!H#EIoio[6HX^s9f_UW,p:@P+,R(E-]ldjHqrgFj]pEak86?Bn0>b7!=;jnb!Amt$/d:"r3aT5YCqRZ%"->W:,H&p\h@qhBQ0?^%1Whudm9L2^5l[?'K6H>j6sJZg1t_kA[.-F%%dGU&bkWe'3T!KX2G@KL&R`6u7MP]:I(ZOPH.X*L*2S:U%^30K<##X#XPE,<t_[:Ac%9GGK*6>Ur\42,KH9Sn]0rbbtF1t(/a/kCN:G8DpC9dRhnq.;>m6t2\TlrFr.%/HO:]d0/LZmKg+%P:5%^36#kaLf(R&B@M](=3J1K.*Tj9R_'hRW?1Nk9krrYiat`THoOD%Qb!X!"Y^J=pfL5%TCaE/:>T]oX.n\!Xb8oc!p*8+P6/13Re\S%n:0+Qo<l)n-;S!b\HfqI,$`hJC;h$"%!VgA43#o\K,4ql:\PrPm?;HVUoGj-F.[@\"[11N]%\gB,\8G]1,>/&6l_]3gug-VF\?ds%#/`GFbD'rgKCTUBSr*kXY2#HldOYD7Js"*o%Wcp6&/ZB]ZF_kF;Ye3n1\4/)NF[8*-?n;]qR]@h/eNN<gulVTZ9,(_L'DXiAs**a%.uBKk1dA:U1b-?'Wm%;'O!&0D<94KUKZ-JWo[M&BUu5kZV?YB`@7R'7I!-*_BnRt!9N0lVP^fNl:T/0H`RH8'.n3u"'?eE>H^PeH%$DCIU5p8Uo1bm)gBJ0q>8\?aRU7,.\W_>Eb<#5IH-\P\[[4HRLXhi^*>%5FP@Xi(5ra;HESg15V<tD'*7m&5`Cf6I1kSYA/WE7:c%1/)&71eL58njoR-BXrtQo(o_Q#kF,=H*1sQQ%bm<\fYAt^ljKO0Jj0)8e@h#&kC.JV+J2%C@m4@84`sl<lNgi'u[]QF2?S(_%anT%G_ZM!R-RH2*V^:G^^-Zkauu&FK%,!B3Q3Msl,ZG_#o6C&'%qYpYKFm-lAX&h<#9?jq>AI64S/AA1:)*!d9mA:Di<4t,_rP\+H%Da%c>T=')mS:rhUtV0&>;$W.$0j4.&eaI,?Y!Z$P/:\#@WHWDpQZ:YL@8j^\$P\H+C+b=."i]o?XG7>_P@3pj"LWPjkR&a0=\I_-krA%`5(_8cIb86O\\T7=Mgsa2g)G^]+q)<:F:mk4NV[V=/\/^l'4%DDD;d2NMT;*'mm^)O!aQA-8RlH>"qUhgC+jm,-=u/`EQoQ_F>RP%]nN(KA-$gb8oJnCjt)RNP?qF)Da[,0k?MIWZ0FjpjJ3d?eJ7u>2%O3+=?[X^>Pj/Lo'ds^TkCGoYls>*&QU:O<tqG)]0u<K@oPjo%EW]?$Tr6=/T8d%'g][FBTnFQ,;\0`(,h0=j@G.dL\G=FXW_:*<^8)nEBE^C,K@KWR@Km?*3_B`H632WjS0sS4V+.&hTct[q_Bt.h%Os?/OZKahoR;*C[WGMe$`1,8%hng9l'u[4_Gb3J'oMn%amrE#e"?=[>CGd-XNY_GnO<WWR9pH:5%;*(#TqENBWS=uF,;:Y;i/!5B%>2j#E;37K@/q__05V6K:<A9s%B4VkA&PLgf\LUPVb'Sek#?cc")lZsVq!)hRV]V4krr%s7`F&tj)M(B_^<-`T@X0(E;K!GU8oCR+%CIX\:+R,h.$@1()8YlH):mII8]Z6]iplWP%BZqYK%Etl%6tu0DQH3*$;XBgD=bK\1d@8fpKUa0cSC8\iD30)gN_J<'R(0Pk:Go)V%M,tN)ku(+YGj'p%P+fi\gtc0+3&4)dB&4%DCT)3jW74H.TeN?GU?AnBHGa\f0JGAEQt=ME8Y;F*lXc62d(=a`;]e>(:m(sDMPifo%A.[l]/p7-q;!!RI8QnIp@"9`#<W+2]QocTYR'`6?54D-l.p%]maoNk3Rb1"2,dL1h'dOTHfDf?QEcOg`VXb8qB``Ad%4dUoRH`h&%3$(Wu:k_:DH9h(3><H^A<ABB9D](.Zc=*N?',65S4"<Tl<E+N5F>rIr,qkXY@UmO6WnsS<c]%&Yj&S;3R%Zipm\3RfXE\'pVk`eD%8AmIHSUlrn;pcKf\-m_97,^\2gZB77moTodX-b*P,rHH_B5J:Wn.@n=ZlCquHV2L6++[rl'^m)USqqgOpQ`+?V7Y!eDe]]4NgOq(%.]A?5o\T)tEW&'G!<,[rZg)U7Ks&UISGu.%DcoYkf_5ZHaQg5\\\Yc1[iZ.E(BB0!najh#WTE)2E\gk=5.Wp$c]Q8Ed4/lLpF0+>%(9j1eSdD3ifI-Jc:cJ8??2h?hFn[2JE$OtI'e'XW-DhX-@.81^2I3b1AopX#1VL_5cqgs0L^_D]+AdmDP&nUVmQm"<>oEFB:V's4%H&%$[`BO%Cn8EfuBDj>?bt3\="JP\<e'N,LS#:kQ0aCk?Rq.lg,dg<]_k\ERC&.6&XMajIerZQ1`MoA@DP:K[R&N>0C^De$*e-qR%1;h>Y+6jdZ2XC?7]r\_T2bW9+d/:W3TTtkgQ8SO'$ibOqUD&]Ap8;bX@7YR3jq'H371`LF$GD9mNd4@_5+FbH%pQ8n`Ao>:9BBIm%!g>^He?<@Fs67Es4Ask!-4>]Y(f`4,(YKWkWV0X1%Kdf!Lt,TJ''6&PYHYZZLfc8/D;o%jG0pHP[I4%dYpUTmm.#[YW^rTQ1,[*D%@JOo9E)DpQd\(-6%,MA',A18Y"tEg(M\7IF&nok1n\5"<5b\pqGMnZ`#K94G7Oc!Jc6ZgL->WFBXXX[F!A>k%j@,6Y4])eke!XE3%FB17+Vs:tol!$rrpja0>=MJ;@`n7BK6/df28P?I9<!'2YlYCYJGs4pm+B]n!h676D*u>5Rp2R6<X>O2pmho_%8.8K1G^i`WEB$e+%ZAE=la*(0nNq&dL'/&p5J=oNPlgrpSmuubQWDJuF9tj([:Ki#k'*fNmg-Z'8WUq,l"u^QtH/SqIap71'dk+C-,*"e;o6-Oa@?)+n%pL#4LeSlF22Im#0AJ`?&nP<u[`/>[iQ<V$@\)qH[g`il[__A\6*mhuC%dDT*f)4"8LpSUX&$<i+:[.TC\=t*AL8@^G!L)2qr0%1G%%D71b50?+7d7FQR<8OJpbE!HoODj`%"!YqN,>+jFI2$t('9CKCHET)0p%8<5<AKObdVAQba7=q[$A*llCc4Y%E9HqPWg41i$qk>j%As@IKPpI!<"O0YJ'3WCTOJO27+S%2+*A4uIo%ZN^OS*>`e"W@SPf)uh4k<1LKQD4OB*Q1Pq*W0'DGG+s'$YRK[3k%2+Lb$3lB8Ih%c)NRigsI_ACUHL1Pq,Y%Mm_hQhR$9dQF^!QJek.;gKWUDM6cbsS7mQl[4GuOW-h#TC`I!"Ga5c<"mK^kBMHYcpe]R=F4?%P8dc,h%:["F:o;#geHK59:);DVr<<H*eq&6%\Di2c_Tj,cF3g)Bn.^-dr``@5h1ls8!+KJN-a,dB6BqT&VKiH4ET:-N4;OU`lLno'Tb/k7j%j?$r@=2W*km*#AbW@&`Smu)l)ksu(rkgMEo'qQk^">qaDqPl[_+NU8h7Ld:<XEp9q?h$LKG*`sEJnkn10o-@?6_jpW$`/Tkq`FAA%V=>`.@=l?&7,KLJ84SPu@0_l/9[/l_Y;6d&Q<*X:]qK6*$qo+%(4_lD^+(ZSLFg%?e(a"(foQPE#u\qul"b,)M"#!EQf+^*R9,8r%8<[/jbK;`8W.h3;1lXNiF>6]Uek>$;R$,EF;-JG/@na.l,,90RE1BLN(>2Z@)SQS4qe!fdmhHlIPo4V:O@38+-f%aV9ON@/(8qnq%M^'7a%B)3&$r'[Enn5p*$\Q(qR9>IVMpCGm`@0f<O2kngO=TrT\s\k?JU5K_A:TeDo8P]AAY5a:E6XV!LS_ceE^08[dkb&s8<\iQ%F;ICT3k018q\.5HHu9*DX'q<rOp4=g2EJ+&MY"rc"qtkgNR\n12j19KO/H/P@dfi4b[c]?7'eHAd\K/k;RJNb11'f4B9IBqP:0,L%Dd==HTB>CV'kX*;6sNBIQhk0D=ja8=XP!$>ZtPjOT78GK_pO'O(73:tW'MO9rI)EBpTVtRC/WS#%P%id@iPH[!hoOmR6'l>@"hu0%9m7up+!*hia!@9dA1aW2(TRo_<U$9l(*<69A)s*&Ci>cp``0&_C5k]C(:&XhfRop"KGo,8(#2uPmS@nEi]4s$cXY\:atmW@P_?,/%nth`S"VYZC/<p\Ar3S48Tm?+Vk?V7:D%N,md^u7LI43=XhGREY;-44L[^&e@j87<TS:$kjD[21i&qj<Y#\b$;"0/YcQ0G8+N69Sr%Z')U4/'A&t/Q?Y<+IZ/,Z-%t>N_88<=(:bTCMM#1@S\*g`=g`kqkptcERhD\4cG0XcM:q#*V+VnEJ[AW$R/4G4OhZN&N>R]I9,gH%Y?2F+NXZ(,kb1;=E,uOi8:9X\NfI&?+E(,(_NKQ]qD=/49a1G%II[JR4r(\d9mGq2m>c\ST;MA$Q,q*El(RPBeuCo<_`oN7M1ZQg%',B]I@9Go.5pB9`-4D%K.m`3`'kP>harfg752947:bD3NBK"f1C(H/\C4g%"Ca%>D`>Ik$E9T[LmDPcj'0BBL,T5o(ObD.@<lHI`%[8@<g)Cl-R@T<8,<B;a[D;9LuEiX]SkOTP\0V;g99RIGh6kJAKI;3:l*?Z4kEuZMJ6BLuj^PPtgUICm!nrf,upO%d1?&2N^9!Y;A%]2t"+mfc=id0ZcTaNP/L[Y[Xe5=p<kkm2Te8[)7e:kl\7mc.#/(!!b=m#9F^6pkZ\?3".#Wkrp_N'C58(]+Ol..8WWqP&\CWLJVi%eE8q?VV]%Q7:%38]4Y^m:IN\>b=en+f:lMc<S#T7>cG\^arnAG^L]I(c>OKo)S`7SAj(*EkZ5m4Tt$h9IM&]1r/+IHZ=-ln6uPmB%(",G_[kmJeaUA&/1WrL1dA+@"\E6ela3mQH8@<W==tqfhA,"=WkIM#6iE<u$\V3[ai3?7hZL4!o8#E-(]J1QM(."*RHp'p)&rkHY%,M5BYHr1VAoNmG"*(DZM`B5%W,m<D"bEH8b'YR,1dhC+F3"dl1AL&`\D^+p`E?`#9)hVVUI>O`Z(AU;6Y_&m$-X)Qi@OAfXkIVR*%BWPpVnGoAA(#`Y\;r5j@$)i)3Jd#sZIM&sP:F.JGI&U&pWh<$15]0bHohoM704,2`r=9gu-Z`G!7TZ;UGK!T<ZLg%SP4WGoK\9R^%&I56A0-]bk/A`Pgn#<2<W]i!S7I3SH`QYPb7Su?RQMO@aI%I7'Z5f!?$B$8<9()rR:ia9A%khE),>^rukZ]rpHB;["pJn*1=?OCa%\8)3aQ@*;,ql6D,j+aI%3Ng[p+*`'4^X@RCUq-d<McQ%H$g7!o.YDb@OW([:'JZa`De2s"ZHbu!0nq`_<LIW?n^Dlk7]#7]begUo%OmC+k=Ca/8RE@-[?LLMs*8e69`Q/?ud8a#cP;7LU[s*Lag.llf&'E,f]?IKI]ZEJT]_sl5Xf^tkVn,[!Ub]7pbEHsqAX+2W)1*d<%i(/]EOP04ADFe5_)<n-[h2/>I*Y3TQHXc3Lo]VK:#Y(Ca]o_R\_HAW%RiZkgdpdusH/'.:>4FO+k.i]^DDgmE)`:s&CTXF&2QNYA%TcL,1]%BuT&T]"3;ccWOhk0]9=$FgEE3)VpiXJF^?>)oY!Gi:AnEsioG>#s:QH4sS"K<h"ia,7%@'=p_Eh9,LaJfIS9]dO]BX?&Q%1h,pjXh:"@A?nbs0*a[.KA[D9P7ogfgLjaudSZYT3`]Z%L:LI#ZK9P0<%3Q^LI]?bN&4'pIA%ilpaek-B)E7!:pp5+W4e@`9+E3h%%E;]9BCh4DGViSRZ93\/gNmh4R0^.i7\%gQTfT(+iAalh'`165f9[IMET.'Yr*^B(_gGF<pQM#2,Hp3GVWa<(0fP.H:Sm?AV6B"h%Pg?_L#M'D4oEbi/J&kEc?l<GeNCpU6W/?tMYdTEg_pQ!=`*BNtB),)"^1J<GJeBS49fr38DKb#BP-mh^d'E.Doh3=h$_=N";!1D-%*lG%c$mQRE3AsV_0:c5UA=XBn_,5Q3O?bochVk(jp>iP#qZ%o]oY+1Vg9SX?Ps?(GLrdMkG:Z<n=R;5;\%%jVdo[lg3E*>Ps5D-r%**hVN).R>7at#-Ig<AY0$,o@^+6JqU//Gk7(1fc`MX#?m4U8s##Yp/'9g"]%\dF*&AAcXDjr5$*:W7u8LM0=?V%:,"QhjP*aE2mi%hP&`$m*NhSW]":-jB_@lch''7(Q*A@T*_h9j(1403eZK:M+?1O+t_n76"VWPeWDsP*MKY_)[H`XCC%VQe/&Yc!<;*Q/g%]$X.$%m%@NGqET>7UM!fr^,1q*Y_jQ^_bf2a:4])p5Iim72Si:=1jE*'-=C)G4Cm6QkT^1ZPlcN1jTKVMRSUX95tXZj":X<fqDUSmmYErR3<%fgtL34Ckaoi6[V5&oj1W2T8TPHMt`f3GHfu&#`3=Z,N/L"hu'Z&r%296*$;2PFm9Snj*.`(*%,JJ=r`C6llGJ/XE>[C:pT3I-!rs%<H8Jtb%t"Fb>grd`-.\t>XROf7Hb,Ifteq@R$grZO4m.1'8Y,P[(EuZ0qqj:<Tjl^T4=fthGOjb-^(h^'ql\Si<\YAPk=NCVbD&D%R;K0MMJDKBl'PU70E!r.Q&d[te%WDUrOR9\4i_gkBt,m`b'T!qAuensJb_XM&^`i;g3@;)\@L,!,!\bqPH?/c,#2]Aat.5K+M!md%-kV*)'V?&spG)IqZZ$aL):;/V/*81@:4/_\+*>`VkS%%W8!M+fF2MTt3Mo)@O&g<LIAJ8KM;0tRWsOiUP-etKj>"rGB:`ObC@90V%#o-]_3U5E@'ak@AEuo!L_cXR`C?A!m9_0aUBb9"WA<2R+79:Y$nlbGnQqJI'g6:l^i0/O-4&X1h:tAacnOg6_O2jB6PHV8(Lik_D%eI6;FqH]L(2[prUBcbIAfTb#0o-GFbgD]+!n.4:RUn*3':J!V,</kbDV*7YQ1n9&s;KlT,n'VgBEFK^,eAC&UM_p]h)noj$3g*iB%BN_qq8J5/P_UU?WZ!mT>7SXrBlg;jO#eP#tZ>=NQ-W+B5oRg-dnW/[T$DP8u6io<q9I_>M<L"?'-)^PMTjp]ge3k-W]edk";]FL6%-K_*EKrO2-a@D+,U__$=Y`aC3SWC>?pJT1Jmd7s4JqUdW$YRmqqV75;H]Lc_K#L83o1^91Jf`)qP[!k-nWEcY;GOl4OEpHgO[=R`%Cg+su`AZ]H']`Ei[na_pD1qC4NeP-Id"_Bg\Rc\@m4_^u'/QT2RL!G9f[@.#j+I3GI%5GilRMM%O,)34Ll"pfDlo1UlWDqIjKn:r%:J:0",>("1aiC'JKImQqW_sAIXc]su%&:rTD&()9+8B(Ldq2d0`F3&/6ibaM>-,9OP$q&ibO.(`JU^Qk:O%&TrX6iW;=n/Mr-^Q4%phBJa^8CNcmbrdmIH]8791FD7HMI$rqY'*O3VU\b5JBpIjg?Q6h)P>Y^$Vf-%V`#V[EY=BG7QUHlu0LuXRCVk3Lm[m]=0`lCjYL;%a$IE9Ys/03%T^&'s7uUOXoIdH2@^7HI+pjY(:S%fJ,Iq\rY,kpm/?^mrFtQEk2B'XkK0goXkUJ!&8i7A(7(;FoZm0]O&+O.3'D[Q%\FO#,2*KF7k,2kG%uY/rhr=\(rHDWBB_,VQJ,=3^i:l-qA#+mJI\+'Ma1&Ujl._*YeZX?!Wa'LEO+-W"HU3#='5]mV[JnQZV='uL%P7-e.H0ootGQ-`NPriLPqb/Z8Rm)RF=eB&ng=V_;Z&_`032bS^::hmnq>V5tG-;o]ch+r*d-c[Gcu.CO9XbaU2/lXK*F\YbB&$DE%rp5''F]UNZ];t=cmODD;mBX@H*#833^Z)9^Y-uokin&+f3Gk?OD4[,Zp:"_AoAhY@nIXDZSd9164j8!hAPh)lg=fdlVV$/4)YJ6E%4Q>W<=81P$f/\&_[d1*i3pu8fpO2A=Ws;nsFO+[moP*p8e>g:(2nqW`7t#&l@krG\pFt(Ph/PsU"aBH[^ZY$"qMkI-^\YoTIJrE5%0#L>+\F8\jGP14&]=Qu)K^P1">Wm42T/YQU`V\i*H2=mn@^_B5a#EHHl)fI$,.+m=)8>?^R-?.^@dME%_6UE2G[LL5Dm"O,D0?]`%\?"p;gsnR+cHGXJcDitmq_qis/JHhX=a$,*GkU'c2G]r':X!kTpLs0mCU__6(EI3rDIc39S2Pd+1S&IP_!\sm>>COQlI,j<S;u(U%J&`:OF2q-b(UECWI?3I"`-jS+:`XQMh]Zo-Nfa.Q^:O%ZB';j>MiQD4Nn.M%hB>eaGB\2>Bfuu)T"4ZT.jTm;2l&b+*p[.fG?7Pd%T'9R+k,tGNo_d?Ic/*MCQeXfX/&,dKV3`,rA*a'PR>^L@SZcqK%.Yuop&2J6]&c!?I,X<2pV$UcY3rj(l>4":34S;H_p7"@mcm!^%5'''5@+e7?k9XsqN:k<*oJ1@j9'>"X)gCH[Dk*<[4\dUOZnhKiaN0kohV%_K\D4pLq;FMb0_:3JE&[N@,!d53@idtjf\t_MN"-oV%97QC3fDDr3A56A_rN1Z1*j>iMr70r,^\[fO?2^;bc[J7?h-6f?"o:UcqSHCF5KhheO^>a`_6*<cek]K`j<PCO,QBs.qObSq:<Wn<%pEZtI:0?t'B:O"'-R43<*h3^u;.P%.?-PE-WrFZVrS7EZo'8rI'=mGO2e_sOq)NWpe9>@UK>0p)4]_FN]Hb.KX-95@hnr,H^Wq\u%=F@UH=FC,REd`Oms-keiLJ#=&?fG&3_),4>P1@r9IdM1;NjWc6"6XbZm4Q*aIedQ??BE]\U"r/9GR(:mh(@[0h7Gi<F167X58^$]%p=f/u3-BFaPEQU%cGC%9WRP50>P@)\paNoS3o]CSB<LjGfM7XuSLr+u`jjBjmCBit^WCgBTC:W[L\9Sg4)hcJfCJtk;8.<pJT$r\%k']?(s-@_b_n6rZKh%KsC,"+F%l8Eb+#oH_5:=9*^L#iUPNqm(s6KbnE/X>epL?sIN2#4DT:[F-^RJ"-@/'D=EsJk^o:3-tIPSOg%pFt&J*jF[tdWPV=3=2gWU:L<6_p1\\qL6cZlb+8#e9;,rUD!a4r]TgV&<V0dEe_l>#KKqr5ZSj,G<&"`3%bDr4`eAtHLqm1*'gb*%l_c>WSD6gP(Q([QnJ!:Jk0")!L!t1Ap9(%oYCCb#iPNn15Be,Jrg`,Ta'I6<-F6Wu%l<$i`1,X[gsloI<H([+A#b(M>so+1UO).?%K,Zft<[ZK-g.o]Vrjn(5NS/FZQ$S#UIFo62AJKF?-cD[).pTccD3$bcR[W+3bgZ<qBNmip8!*Q#G?8V,mOe]o4'17ghB$N0rM]14%A6_dUb6#`,O'R&<c!3B@O1A`g+`/2Qh\b#r-AVPc]6_P3p92$-2<fgd+#,!I&B14cZ@0`?Y^s%R<D=X_n,%<I/=E2XnDl2bcg\:\%A+/Cjg+Z;E+gc*rmX(91BQGim?(SB0H^>SoP<6/AV&OXgY:N:!l[)lTE^f<E=aoPi2jjDR"]lO5T!B7nq=V]qs6_gJdB>6Y<sO\=%07ClFVHMBMSFtX#?9U>WZZcjGb-meehAf"RO)NfR<mlp'^0[-ZrJ:KYO!qU,VPr*Ve[Br'[QXI;0V82cF4VpFh0kmYI$%a&K\cdV%llYc)qe,ESFk'^-lgJ)"K,X[)6b:.7IWs8u>@hu,Y?K]YoKCoQilHrj^#`>&na+\&m=gs17]\d_4A1(F@8%X4HbauoYOY.p@M,=2%kBHq0nnarO5'Y&3>Hmqhma'aJ8+,Xtlh@b2^&2JJ?9+F!rXuu\ENbqJ_D?+BBQIf[n#[PHr)G\T]pDJ_R(n3emF>Fta;6s_X"b\U%H+UQE#!X4$V4\I`Dp<>Ld"M42a7nDXjuilbNm`:?DOKX6f5/Ih;lB6Z*]Tm_T6%4"h0*Qt5<CMtjN!fRVe=k1NW(R#Q9^C!o,$7L%78@!S^UVP"?0#5Zk,l2Qc%jZuJt&\6RuHl'T6J%]ApO(SlZ_e9D+hV1q@-R:59kArUmJ.WZfgf+$Dk4!5MmJnq%@J7_aBHOZ$=mL%5meVPie'pR6=Y4bQ508?/sp-#^Ad9HpTcCn=m=j)[)4[S-HLVT'@>W#rlsbro(M5@Atd2Zs7unf:@>>.kTsaJgWX:1hq3UKr4]<1%L#8eRpE!)0rC,F:'mC=7)t'_3W;h8R*qG<!a6&g/]_Vai_5-n\9m$+SPl/s(@!<!mJNpQS\M(WY&U,#f%TnY'HOVk"$Vs"*Ykn0r%]3:np[m*"tqafHd3708#QQ$ccn&)i1\hEHRo;+*.l+J7RXC:[JHI)30<M#W!\b=*!JADkupBo\d*DX8a'>1EY^<X?9j'-[h#2&?:%en#;epH9nBi`A*h.(s_:r;c#QL[2Za%6D0!-0E\eGJ;(MguZb*#o@9mM-n&J$Fc//cf%W?S-r,\`AuH.#H6J]Y1Bdk06$`6O8'K&%\\u"i.$>\Lr-fUX)$ROfHnN;S"&=s4DV>:LkKm]ukiDn2gS.0PFTWLTGN&7_@ZSZQ[H%bGP#K@)D*&(B>RF;#p*V)$q&UN<ZNVu!%5!H2nD^$HD7.)OcfaJhf.`?M:L@EZ;A/_jnf=N59+eEgbAt2uZ]3DQY1;p!Co5#0JrrGf'p;&cZScSAQ/pKoYbAg8Nht@20=8;>-%-VFZ9r.t9@UJnpN'WfTqpQ-bYbO,V2Y85.!?+@2-5nP:G2^-j!:50]Hc^b;R5b+a2*_ITHCG-jV:Qlqshnr-sKeRQ_d;'5#D3hW"%#QQS/.j".Fb1042@u/dg69GlVoe##5,-9SZM49LUWH7'h0QE[:Hq<'EaT9?5kfNbc`9DVF'=]+R$'KIjjfs>k7_gp&,j6)SCC96p%FX"?,T*"*Q2DY#,NqEE8[.WMX=?coI4C.k]pD%FVJN[s5T+#`9*pfn[?bSg#.QF6]TdJ$X[(\uJ.P]Pg6X=TEn5"i@n-t',Y22*]%kF?Ub!HF\`,c/9G6'm(AJO$r)RJo7I:'Wns;lmso%KGabLgREk%Q<.nj*)nAi)^sDF7sO^X%-FRC[XL-7bG=t:7Pr^S>V9Iko=/M%HM#G/k01\QOI*ZdGD/BU$uLG3559pYr5(sBg&nE2G`6BZO[K-TC=!^:oHh0D12_\VW(Y`&i*TksS6]!%+HDeX#R/OfD2Ik7B4B)>%fYk?Qlj-BAV6t7K]O(-VmMCP8=WAcXDSL:3^m.,o9"Tt;'16O/q@i,T1WYYn\/%9fEWS0DDM7EeIXR7liYj%gMhEXkc1e_HY9MK/%a3]&C1Yl9LC?E),WXEXpf:3H%qCQVX6ViT'TlYn?n3%&s6fda]+.thQWI=t)H,,Ae$u!Ptnp6I:flL$R?Z"HE"f80\bRq8[n+f@0%Ct6EspGZ"C#/6<0Gl(eKQ2]#Gnd]HS&R4Z\)sAZh\bC@?`+Si\3W(slrsh-32^J-qP6=RMT-jRfD"Nr8.j1,^cZUGVV$U9YX9UG.%n4S"B%Y6br]NaDVQAG\?`X@$7J`G`1cCl)qbjI6)iAB6)h&Sf"]1DA!Sd>YYJRh,-n.&?DLjN\(f/`Am!V)a6`^F74Y<G7bH]oUZ%hnr-sO+dH=^Y/[-jZRIO93rb*IXsTfJ*nN"mr\K66G.a5)?LhIkD=,=EW<0Q0B`H8I1J'.".AW:"XIW)nF_Xq,2WrrEkJTJ:eSDP%09EOo0H)'hrJ\0VHM#Jhs'HB;.=:^*U\<q1K`?BSK^X8Tl)k+lOGNjX["5EBp1#3h1LRcF+hD%A!dM3WG_IQ(<PU<(B"G#^ZlsKD%,6RtU/DEJsrs,_'4%S#=+RM6QZ\t^N0JdFRHiH0*]X[EMVgnVh/hN[rBqM]G:Pd&2:%r"iG4a*Pg\9X/^lB#rhgGJs@i'7+g*=q/%fC7hf_6m?@6,2I:(@9-aC?Z'FIh.roRJ2,XHHp`\J2g?XhtM*sLtO>fQZ+^ul$Jf^IK6`rLm[]=(\A;-[tEK6'-@#g.JNluh*o`g%M.!Uo?Nh.rr@3mb8/LL9r60))ZU!,['(LU\HN"7pn@,k-\Zm$jd4J//"6)7lh;]g4P9](8T#&N%+_JBK?\'+Yq+;T(r;(JehK>Gq%P$TbM*tf^Imj8!OflA`jj*.k]&%L)4B@"'3)/Pd@p-eni$cuX]gIs"Ha7h::h#_#2&[X+*SqGp^rW0OWj<\XD=-?D?-WnjhYai$B%^Jjh`!icJbm/CcoKm#5f"p.NemN)B>IY%S1\FKgmDnk/=.nQ0e1B8,KPe4[qgY=gbSH8PWXuEW[N+;G$Fi^a`8GqZE?f/apDnY4&%#%.Cp,Q7ngn<M%;m.VS#L?QG;hrbQcZuSojB0^pDlS%V,Ij`V&#NRf]Ippl[]8?mK+IM*oEbnKIbHj4_#Zc38`7k$M@#QJ*#Qo?t%K&lZMQgXku3]gV+=1S<VHD^K,!'4m0lMiT0<B[jm$XDYa^4+Vdk(>h/l9/>mD/5>A8$;!8T%I'3qdWEi[$Bqi4sJULC[["[mO#4r%aAqabZ)dTD)m7tXMTnV<a?QT]s.5_Z?No*]1&,nNRaDENq1N'1iCMhSNphs'f5Wc@DRhq"rY=0.cpg(6T.fJZhKsS8k'Mb8`a>`1%-fYfBH>m.[ri3TM($HBa>g(_A<UMTef<hZ`\>p.5>jgKh='M$Ie_5@o[>@%mhurdp#><7JCTr]e(D*]ZgKj2VCMEHUj,24?o",$L%]ldC@0c83NE*'d\NWY>E*oRt$0S\Ie\-$plc<ZOIriWlErft:#AU9cV!o=;lrS/r)p`"YYI;nEk='19]cLC-P)-Yfcc:*-(N#V=m%M`:'0FB8d9ZM0BSc/n"^gKo)*knhIF-+t"rrR:?7?Hs;=/Vk".l]GQAaZ"EdLP4/qgap__!S;hH(m`7PZME&NqMq.cPOIh>A'B#g%aNO-.O^;'Z7.?/LM-]F3Eq;H'`p_4n0:lAo0?mFe?HL!hmC94;4L+)c@ZEG+5!R7S+Zn@_^?R!n%dpq4RsRSRbC/X:KbHKCpY9N.%]k8CuN,aaa:P5#m1>2<UOQQoGkhfeW>@c;f@'lP<GkZ!&A_mYeT:>_pbd+*eT>BaaDFlLnr*Ht6T)1u8R^SuY\Z_1!RpPe+:]$`q%qG-I>%Q!h'Fk*+*K:Da,P(rao]D>7YOHe/j,R[o%lBBktT1Mqip<5C<S[bk@:QrUAFfWp(`4D)9Z$hnM6@bibQUq1+bK3cO)^#J4%[lEcEjA-0HBOdW#pHs:nr-10V#hrm%mK[[,QWq\dXOBbq3IP7W&%4R,?#sLl(Yj;$Vn:19NN6<89Y<"P0sfJ&1-T)N(Yt2,MiNnq%Qfr!%N8j1Cl"-91D\,QgKcH5'Vl[8o5%FimQM]`;H1Z_>Z;7X;jpAjl3f7jZc1t_'4RI'sJ[D%F6Wrj'p.Ilb.d;T>"=!R^1)%U:%pD;Vl[U1^X8Y3Zh"H).&/ZUUFe(^0G?R<hj-976TAng95mPBd5n"q[Nq[RtKpJ#u06Kht&]'S9bKbuCjJprSr5`4q-%C^'*LR8,9%h*1:4mZ7O:4G)&''V@[F>pmX:PH9#JD;*'#(ck.6HS:3X4*)L"YpOO!O!sc^NlF+sik1nG.<+,U996mdc8&H?T[4IZHEHUsdl8Y:%\OFe/Un))=DTpX:o)CkF-!FRIMrmK`juZA\i-j@^>NZG^eG[#?k!N4_$a+?1./sP1g:k>,EHSJSSok*X$.82BV!_P4-N+U$@e-Pl%2T6Zk]h!PMB5GbX\9!EV:KL3C5iH#2h$6&`GoI+H1-AlM;FOi8!DVT!,^E@=DVpP+r=kaq:%lqc\.lOU4(=b]CLl>5LNWM54Cj(g%htUg)>0RQQ"=jm"WW/41`,N9=TEdjJo*)Yo#WdH09MGNC]u[#d`nc+JFQto/nc=+6%!;76aNuR<ch'^gaSo*ENd,3,W8!)6Q>lJ_%f8NpUDm.icmB3\2ncS-1r"8n.bh-E)V[rOGT&*uR]8mis%D9$#U@mCT.%YA3%dX*@QfA*WYn!Sq(:U@V!>I6L,gdOcH7he&0Gb.0%@D*aBVf)#B00$QH/=H3Jhhc&SZ=FGIjF2bM4cd9"6<J\+9`@PViAUa[INdkQ"]t5QLt.E6Fm]pBs!T$:jT.@C+O^bOW2.&<LGN<[%nEJ1,P8?8*,Nq@G%'N2'1A=o6,+h=oV%0d&P,b0rod.<DIZi9ogd8X.[+)OITV9g^TtlPTS^%G=,6BP6^f2V5^%6rCrX#h%)X*kj%#=^o:M<S?#c9Ecc6e:?VDO<B<r^bJ:nbWuUo+g`)K1l+u->,*CFl,Nd*PPjCnmpf.O3;7V\b<0lG:>"^$^fde1@6l/#k"\4C3<)^%d(=s\4Z]fls6f4\=7!A]AAu>C5KehG$U^Z&HC"b%9;dOJerXLN2o>o>ON$.p*SiA.La4eL9e>;=pa9HGLN5gOq[_,9O;C2ZKL5Rl%6`BP[J6^4&G*t=4:kUlH5PX1UF1:m@H6JWLjBE4FdJZi0cW-K)jD45@?o%d@OF8KroA+pK[6`/hRjV5QV`!@:pG($]H,b!!5O\1+%;GVVL_^+$t$Q&VQOVM&1;_>4H#`nF,o#?$._BH.)=d%\t\0W3^o2VU?k]U*gj`S=o,Rim[Y=gOLoU%A['jd$-dU_%sjub5@?kVr9%999<k-bK*R'$&5F$ARQ0oQQq(URZoT4B"LHpR'efEpe.<TIaL%qXe?,551Iu)5q`SXT=Gngmpf[C%k3qqO>;Qh]q)07/?n\rgW.X%A&!D(SKEs1Gu&&]DU\E9IJUc'=7Ep/*#,$4-VtYN*OlUWVmFW5=#m"`M*N<q<CcWL0(J@jOsc=od'%V/7QMWuQ[?N>?SS/,]-O^/%3<\9:c5T;^^q3sXk+$F^LF`a'X?'-ZjP0%b286(Danm5K^egR2(:HqPfa!\$6g1=5o"o:20>,V4omg0u8A$4SZZ<ktXL#jh_gaa$%--%YHL'T(CE]\kkR:.3PZKQ[1KF[(Er!8E4DB:m3q;;:GrgJOJ,Ra;YP]`HAGtdtA@6Fu,Ss4o!72@FcU,dh;+ZXa<+JM6g$H2J"%oJ1s5\%(]Z:IfFQ++0@?]XQj07m,7eK?&,gks3!>AF/^"9A,r.3S%r#r5"c\3aZ#&NhF[X\:H_%L\`r51KN]YCpln1Sc36saQH)H%#sZ'Kh`$qI%QMa/la*^8B9q(m`Rfl@Glj`!h!;&@%!.&P532EA9^isgJ$22*lN<?.3pYiC^J99>l0i(WT'"WfSjctrbZO>=)HTHf%%0!DNOibB:=aIX&lHf(il%hDGA1o:qmL!f)q?$6?mkm1Jg:n5sk)_"5d*b31C]EH&1)*lodmZ=q8b]'#bP!PA$a0<_,@nfdbUm9o%H^Cprgk)rCfiK>,fT@V/M*sq@j\*[kT_CKKg^e7TK[+/_2X0>CK(SW*2kns42kbM[cEuIQ@/iPK-'<?Ia:4sDThG.J(%'ULr,c]%%Du0g.p_BgG^0@*cB=!E&,!38X"6np,#eV*=o9:Dn-a;^dT.lWqInNkeag5-N.F`gojr_>&,rLI66#&Vq17n<I6gZ6+PTBV9TD,.J%p%Kj=(V#<.QM;3uU3;;n4@=6_V.YJZS?AH%E^^kAa,\I"]mVD`e8?r2>2Gf(gCI-*IS0;XmJ@M\4[gOk8_Y0K.\*cWL3e6'[dh`C%1Ujj4dk=F0Cd115gleC*djU9iHe"+%mPWGm$EDcpe\tQd]f0&[<B%q."f>r>2=hm#d44E+EcV$eMOirW$Rg]ZBHVNS,1!qg?Q/i/%`FJK%\D!eBhG$tq<-md_SpV@1$,q%He[XX!ruAS!g&Ob.Y0WL?2M\!$4h-RLcY2J]M9g<nqKGTsV`(E+&>CV60Mo-PQPecFi?@Z0%K:fco-uPaXQOlf?dXR0*89\qPD<iP+pVK'?>3?k3s4c.&gV<>tA9q,MFNS5B/T#j'F,EpfF$E`b$arFTj*PH^#1:0N2GH7H(u]O_%7<b/DG<,Sm]BO/c_c8YiCn4#mC9PJL5%u\9**-Er)#['UU@ne='oB!i*&I%pSpAG+#CJ>-9CEXlq1<ui*FEQ^7uH-r'?'$[C`i6:%2uutMrB56I&d5U6/L?Zok$D@OD0[bi^eP:m/><;lYSnOT0/A:Q+keHge4MK[%5,4`/XJ2LO`I0A4l\fFU.V`7%Hal+og-^D]77tK%JA-F_;LK[&CQ?]`%X&oseM8DAkQUor?u8)Uj(d;b4j#\VW_GuIAVnCjR7OP.#EpDO.b?r@Y<$[&6j=a7nFT*7F0FD!Q:mCrc)k/p%+"[Nu:d2k87DQB9e8DlM<PIJKah"jMq\)c_cP)p'ke<7tgb)JZkJCcbfi8PXVLjZ``9o09\nk_=?D5M-qt`,N")ZQ+&b35V!t"/k%UK)hh\jtLLoT&5j?p0Dl*@dOI'TY7:1ShnBO6s"\=hf@iiGT%B2D<ERg6Rh);,cO@krs\6gdeAm%\%`cfe]T:;>W!1_1XAP9eT:i%ElRfg1ooFFjo^f.K[kRF,h`u8pjRn]7eOJIPl;Q1kuS!]n0Mp,NcgCB::Cf0^;YD_,;,.fXSj-n`YPoP$FShIUKpBiDr::r[E*?p%MH!@l[e;uI?eB@T_@eW,[T([_`j1pT'2(!QO<;?V;hW4nM]<Vtk`rL,m\_"=TRpPI(!"U1+KncUN\ZaV$H.l.88RC+UJ-f)g'di4%74^lmCj0O;amTYZmrZGJg'90OruU5[R?ZE*&!#2WeH]bu`+$,mUE@2F@Y0&U$h`TkbjkiuIA%7pH;8o&-GS"5r/:(J9l>8d-.mSU%1S'n"^l(,_J.R('p_.o6p*te/*.$ue0sEp5pKjARh\hO5klU$p5EPqI*&j>#(f(@JkBh/LS?],j.Gi+TZ%bl`1GHe[pQ]go!NE6:%E'BJ2VY:65blcBAIh>$W8W#H8UlXpM\k46gVmn/3d(7'^"F[bq?h@ZQp@$"bhd4>XE?B)q=Ah8VWoL>N%584(61#Ftd0Eo$,kZ%b%Xm$Re<=1)/E>PU>g`kbSCh%>Kh+"o!JBImW$oRprB2SJs^u?Hap(8Oj"5`SVWFM>!f=T*L+:S)__uST,7ld.Hg%R\EW>hQ8i+UDu%[IG+.Hb22.rAGVg54F@@R=,O361E^Me]40.?GTW(.p@Y:ap%F2:ZLJLY>WO+qISB"@p\rgT>m)C?3Qd:@FHKJFhV@kl<cl<?i>l*%RIseCX+%_Shg?PDoBeEdjZE=SK1XW!5A);BMNs]P_+#EMTIV@5P5-/23ZBKspMgR'_UeM_+%#FQ0n[bW[ael(rrWOQS^[!*4X8:u%?&Zq%Y3o\\D6L@nM=V.3o99okX]4K=KSZu"@A^eu$Xi).Dd.YXYAa^0eJ\F[qhSa_5_e]Eg,[c_.U)]Md'uO2/.[*j`-DR*H--HF%n?q;%RiLV`4j8$An.raU,t`%/p(fj`f*EXKgdcXQ2O2'>D]DCbFBW<U*-h5uWDh1CJf"EmA#\jVN=t83EDDl\:V#K@4ANp=@NT:m%V`B;B37bu@[mW8A`;\T3<CY*!DL`t(@O_G"l!+9o6'[_\V8cC8kN"R)nk2_<I2GOqgV;T2IZ;kp:*trR4j8"L;4.Q7L23Q*iKo>s%J3E-pUSi/R+)pt[_)(FZ!(()n4!?kh7:8Ja)bUK2N&^j>^n1QL2uc)ud/P7rFW([%_NSsXIK&3f1[b6!-?F4`T1Llos213'mLe7N%qa^-)-UGBL?M:=7Oa#Vs^]oj?rk*4JcR[%S"rRDM)stQA#Jf;ej>&&:U&0nP5?.RH*,Y0m^kJhVFH.W1/]k6"!kCF>0+ktJ$4cME%IH++RZ31VZNdarW?Cque.t2$%c9DHA4&&V?ku\k(5P*pE(WTl`*:Kmi5*3>8_jo2;NT"NWLS)\\S`>p\SW"!;HPjH-5pujJ66g?6%=Hf.pfQJl6T7I8rb./LCSp+hM5^j4k6[lb)REc=7d13\W$L%8[&(Rl0XfX[;!toN<pF7l[QX!C@W:L<EHPSud$UQ>a:[3CorC%_D%D,#S,If^)pHoNM11EbQ'KkGM9M(b8!$on3/1:App_b::tHT-]G^(Nk%4Y-n_l<YT\k^iqTd2)8j"fPFQR=r:m6)L!Ymh3QaoC8dm%k@nHX3$B4?GNJE&bFK=%.Ar[s;J:&ne]T?cInG6_:usTb:+2=6mm4il]2F;<KXh>52&pT3A0^<`;W-Oa#*p,%nJC.S`+=(hH$2s:%Lk=q)ATK7s3*jC83kpM_lQFAU6sr^7?-?l##b5p]7gXfi`8giD4W38P4_POG2aL1c&?)'0o1)KTA6\M#bI]h@To(/#36;S-kN)A]%amYJC3tbLgo^Lq_chF(E93jji]7#M`,qrPtKSB?dT[5Te[6V!5GL">!%*7mZYmVKM*Nr8a4^@Y6dp9icO^W(:LE@dil[L5!UO/>s%$YXLA>MAhsamTYZmrZq`;TQ0@9^H@)Wq,G%R-D>=acT)jq[sq8"[PLd`:(D_Re%+ZpRD>2)%$$@=Ul^._$b($^hLA5O>YYJU!L">%4dA!8a_T=Q$lM8sEg5&s:E!C33Uok3GY]-h+DGbm?KV6&eB%YMm`Y>Ye":tWcB[_&+YOn>>8f+cS)99(EINJZ/[:H:+Ka5s;84n4%_'.]=pGX8/Mr[@=9'G`L,e*"aU`*EW];(./g:to$X[Y\73Uok1Ggk-\54m`oEi1huna9/,G^U)Yr=:1H=Wj3hB8ZQuNnQ]C%FD"?%GI:5LUZ]#_"QB:[pu:I^nEo;GqR-CdSR4U4[U08q^A1cbpAoJe,Vf9CH?g%DIec+-o.5^lFM3ElXK8lsR@TbHP9F8i_b>RW.3Th0%3SP\b\Kl5YfI$J7$.S[j_XO-&L;P&U-R;9N+WuK_GlprJotF;FiK=<s:j_SeUe9lYUXGUl4sVb.E)eY<L6a/bo#)!?P@$'gBu+BO%ZK6:Hg[oD\S<[9\I?N:U.B1b19I.ZF<=8ilJ'4XSl!Lf\S*TZk[FV\:(oQ\[PFP4?`1%U:ZKbkq6f-<YMXu.`dQJJ)RpM1?pFb-P%2G)Ca;QJ(n;Lc("_<,ArI])L.)j$MKUbC3G(E,#cs#`0EmpThTHVOV\BWFQGj*T[Bs-9c:^^<?&Hq[f!#MS#ZBWO9j?@ISiiYO5V%(Q"M=YVaE!hQA-I\W"ISVa[=iQubjeTRb7L/M\gcLep_Xnf/69GLLR)3R[?g0=EJ$;ZDUnc.r.cin)8eoGNef_#;`r8lgng8(,R6%UAKB@Q]F^*qNZlP-'BSB",J=u>43,Lj^imhq:`jk^*h7H)RW\u-$k\5^P-Ge#',DOV#)-&o1L![f<Qrj)A0JEm,'SGMe`GR(!'[V%E1Qkuo\p7AhNAJL\*GAVmeJ4lB]]re+b0)8G<#,=4!Y*C+fD!/jH1-BcR!/qHd4QJm4>H&%-WOTWtq[X(-!6pjO,)cSMPmS?j<Op%1XsXd:B^@?Qs/aH$Yd<[8!HE+4@'"6/B/Xt9g*A-_UjhT,i(_),=Qj(q4.B.K)ABsY=FJup@iu$fhD_hB0FI\Jb?F#&3Y&b=RlPD%E?Ot!/s(8H(P,@PNqmipE8/.R/&@e\q44fuO88pK<FSU5-=^D^HC3q\+\Cl\:_-?_#[is/\;9"FYm.@``dId([up/ZY?hF`Q)"rF%k6X^9/><!4:!DAd8_W\EPQtoR4.A>WWI*O]34oKY;jTbt)0aqICaWk8k9Jot465>R`7TO.gh2e,qK?abJ),fmm0/R2JAAp\GfP.V%ebq$_8lQ2?B\ai6lDM_9Q(8rLjp8X!6<^ad'X0ZMs&C1C*F`hK!<MFLQ!W<>C0sG'`qf$CSplR)s":Xfb`%\0=OOBrQ[$h>Sld4j%nSTR2m!Q]GGf-+nTtC-X8skWd)RIojo5#_e#BrTti6RWY\-LE0&K<&R8D`^i$KUr>CjHeJk[("!^rj%aFVS!-7InL&iGY/.8a*hu%MFY_b,It7\.=D1"GE-jEXW.DQR!Zc4"&sJ]"I1"uD@&ME5L?1h5j+5Q0*.?76>pe1%7t$GhS$(.V#rJn:`-)t)4B>*aJiO)4@:se%0/@T"Jp@4`hK#$+ISr(48Zq,<K%Rf4(Z"%C8R1)hqqLq,p9?m;fAM&"S\^URjl1aMoHu<&,IehZflFf^R3'nNjcnt7JIk%3mNJKg%<!`SEebOfX/R&F\9DY&?7g^$c?<];n[14T0e%L>pUU)=PmKReZ\rm[JpHnt-lc)Rj!@3@;H3IOI.S=g"0hYDQ.<cq86@'O(ob)H-%%!]]Z2Iq'KDtZ`f2I'dO+`=q19EQ0[/O8<B$'+3e2H<G*r+Xq1Uu]qjgu<-7@\_c=F?Z?q$PaWa'%mZUBd8%=l_eRcTCb[6#2QjV%QSq_fh.09VkSti5lnaB!&tFHl4E6p9Iqs/`T5W?gDqJ"^GgGDs^@dEoHY"r^^$icdm7<t\IS*HT!,OXlUi8EW8,Cg;C!9I8k"s3=%5jlCDOI!aG#69X!6LKWMGZS;RLUra]9-,F'eSbI>^2tErF9][QSZ^";KFL8sgjb=:*WGkKj*P`3%#WC@4G&K32NVGI/jq-'C_l,)%6nch&8uVBJ/t#/%G8G;7c=oXPWU=mA]KMQaGEV@'\$f7A!D&Zm@A9T7S)+eQUY-[A;"S?Snd[W^!6Out&Mduj-qF!2m`dWhXRnWY%=SNg\`C"/$hE9-$EY]VSFM6qPDk!KmPGdsJA2]22@A`dO.SJU0GVGpA%l2BQM7eE'oa:$oO76^S;^uMcf)C;CJ.O1^i^AorhBdaR%$acJuVT/*KfX85Q!WkO7s"5#kHTee>d=/b]@(m=<VG4.!)aDFAJlsmU"o$hAbdrFG[HKb(JkbVA[!5abh<b]\$!s<0QBChUQcpZ$%]+5:BGYdeEJ_:``,V/6,UPE]:HbI>'CXh_p0VJ/rqb#cIlWQJ&@ET#W&:6n8#nY(=B3lbJboW=&-&(9'X3=Mdl$&aQLp$PdV9B^P%T5HnIY=Z<#_40<DL@df$Mr$P02<%iLYeo0^OF6LieFh\AHcT-B=/pW7i1([T!Ac]@"G%g(V'LoP7MdETC:#&3IG4XOf-Z/q^Z1cZ%l=]Pe^`0YemVg28OL%J-2m0I^"A\Y&<jBoQCCohO:;J<@mU$Bt]uQXlY=QM+(=IYhp&["Hqjp`,QdbC\$2#pESS^61#gQ"g_PDUk%k_/A>FGgsI#_8,Dn5VV2G0^Ke')&mHiqtrSL_TI8L[nKMiI,;['V#td?R68'g+!]k+Gb#EMXY'5qflEsi%0]UFM6eLHQSKY3Hd4s%G@f<W'5S4DhBR%l+9:eV1lG?%,,X!&DOMYFEte0:Db@3(R#[7\KrM[KOMB?hdqormHV%_LK`?uRp34m]8&Qc`^+fHP-WHX4BJ`Te%k)cK*+i9?O>DeU;,h^jTF=!rYG2HRb-i>bCr):lR064@=jiLJ4Wd8V>1'IRH#N>as42leOM2$$EetC4<aR6)s7_WFi/:S?0G#p2)%[Ws5mqhuoO5p:n7:Z!LLkT++<"Z<oqcW0/7+PtT?nuK-Dl2:`PJ:%l&$:]UF8JK,qB_`DJ;6#WMLt_+>6A$RVh)D^n$nG;6%S6@k%mg7Xa)gF5dneSb4MYQ)@Rlk`s6":/Ap]Gu'0BZa5ZQS+'Nr>6AmiQ'QS%1\Um(53i!Jf[N?)ch2)j:f/B=e7FY63GG!+GVg^cGep%rfPNZPTT0ZMqJ.jajP8R?8Oc?lN7Fo6>Gb4U`OeRjkiRqGGI4f':t4MDc$57Qf&+E0P'YK-_D%44)X7&R(VK:\VAT#8#';KSF@n"%po!J&c<aLUHZLqdL[W(,(1P0)G)?j3k:@r<asH`cf]^9ST<ghlZ-plo9Y<f];2Wl:L5_6=92fH2G6@%!i`4skZDf6@/g6hBGF04s%2'r;c-f,.Cmj\-An"RX(\i%=V2rDMH*u%Q?3l,IPZsCL58+GqP5i%8sW;???OVO8W>K"Sp,;7R(Ig0o4Nc+`td4a8(qfsh!3e8"<%hdGrgN>_4+ri_Tr5%GAK;#`+Zr-S$'(19I9+NAq(^A@7fpr(l@j$JoCh)m(_djP(kPTuK4ipFMPBl[Ijl=$P[$,p6MJHAlfHGJZ7%M(4Ke#!pac"nH:>J`@ViGmti(rhSB`@`C/sHku<C_0q"[CjMG1A0O(%`VQk`0UqZ5P@m1oV];t#dt:il'2*FFp#*!7LVn\TC?(h[%!d0!<h5'-rA^>^s<"MBbT&5-`,CDU$H>OCK??O+TIuV_Bo!^_3`;>L;j(7RSR(beG3:lnlW[HSo0XH3\jm-ldgqj:p*hAMg)3FP@%VZ<TM$HM_U%!Yb_1S(-dEuBh0"?t:#+r2#lpu4`FSu538-[>:sV:PrZblZO#`u7;/_[b58HZqbc5<'A*StkKR3IZ8VPfn7V(&@`J%i]RD'4^F\Q0MDmgm_@qK;$D@Y:;t*tf7la@)[$;r,C@(bBC>m7p3fW]n%aB(UAtX';/g$'i4Tm0)((_&lufF,D'3MZ2rVaXCg"`@%OuMgIF5i`EnXacS/`lui>u"L=9\0!bKaQ^i'*l;sh'(;H&IM\85)LB#3atbYcVWC4ajTbr@=Xfmr=;H.%oE\k_b\lJP#_`'`Whap%:H*rOhpK$SG'Ni.kP3`)D&X2=%uM9C9/Tq!#4*"S1&W]B'N2%)\(Dn_PPT4N2IFN9oDemj/$bm3OVI7Ib3nsF@,??O^+moBA"9\t%;/-R7^8)E9DWQ4a.Nl6skAP$DMsN`t8,_]p"Hf;nRGYm=aZ1M1.C([S\(N;cT[6=o])m[mdu=D'Y]gu4jt=7STQ"i24<s>u&FV(F%'Ig@_<8HV77Gl!VrrsYRjj<lNnV4(bY7/,lE>1H>O2C(.C392n8=6\6d2*%X%1r!%[#q<P#$cLPO<Au"M"DM2*Nu2:[L%4?igJ!B%<BcVdYQ_Mm,<NfN8GYCqm5#mP;t`0PB^S[R-U1FC19.);@A\Afb.@X!WPn.C*B-Rq3MD)#Y>\mY6&Nt0$Shr2l8iO<&no`GBXKE\%UEJ_>bgYY]6JD4p]2t(G&eLuX8\d7-'h)g4=+EYD^u05Rp$tX/]hrD"2[OP/7*6MoaTTQ1s'f4fd>1#)fadBH]Ht7%["?KL<f6,+%e]36Ug18tp7/e8@cgaDD:1/DGJl3Rr+lC)Oq@Gq"fgn_3p)X9A=m+`>g5,2\hf9CeEi31BR=)q@`jm\QLa2l])<#rR1S$HaH@B6p%q1-eI;JD;)U/.J8c<IqFZWLi]@nH%HYc%81T4!RP(W6*d<Hj^I#R(e5ik.nPjHJo(3?/UN^'_mF*ER0AOe-"CH&CA@3E;b:@U4K[%g'@>cAV=DEb<P0L4'6s?+.X)E)%cf3qFN!C]=1d4@DU&fG'jfqAg^mOHR,%aR)UG.qg.B^d@9@B"a6LUq"uThbRWe+-0d$hdd/W:%p2'klfm,$E^g,L#p'>Nk-EED"NkZaR1YJtC+)o!WE;UO-=2NdcTEEMm4b#pRd15Bp2;7nsO?F6<[DChYm7T*<Sftj:rsB>S?i)2L%F^GHD9Ye5UTXTne\+=GmfkjZXZBnQ>p8o&$RnQS3WX!a%9"^'u"7,B',2o8,Ic`KO^IMB#7e6/sW"V*T3KghE^HbWj(C7J1LFmCH%j@I\2d/D_cNfU+S\(NL>:iG&9kPtn,akL1CD\\,pMjV5RF4*5[dQV4alm6K/4+kZ*3iRFE7f\G>5$&=[ru]<LpTR^'P*$h?$q:0l%9=.,!oGo\KGL<3&d0k!IFNJeO(n0^dRa7Cs,X=H%L'Mo,>Q:nuFG=Eo]Vk(,mCeG-I,`f8h8tI/^'?#8_`"E4]"Z(p6X"Lfe<?Gu%pD*m4M3RLlUucHB-%W1eQ+gY]8]WdY97f,8l`],FEFp;mk<17FRqd?L[97DZqMAn"^ZhoXi=gR!+LQtI7A../r*On2`nu-%e)BC?%o::^Bd<ft,H?k;rE1[WYS4ZP2rbJE5o^8tOT7Dpb?lF8"r_.9IJnW?S3nBF71)0@53]/n)hKRJ=*kUf##-Z(7H[hSf)*!O+GIkNI%rXQP,b')+lP;t:D&!![C8llQpIR1QsG,PPZ&,eTNqF>KraeXlf\%a]YlNDTU]'phmFC-ZI`bG"3grn;KK94uoF(frAHYdX5U$)sc%luAu*+]A8NRm*\9.p"7Q9aDCLB`BkrSpS+X)^!f$a#7\[55JV3"*D;1E^=10riPcKmq8m[:>,)`+-gtlH#cmhWZE/IE<=,SL,V)%%Z5[*X5^De4B%usO_(A3-%EX)5oBT&K%>0de"*snu'%T\a:p8H'A2aK+^Yt1%n*3-rN*1kY(MW1YT)kbO066Xs5Et=jc*JP[;t_1q%9U'<f:L=MX6e]6Za(j"Ghs>[#h=W*<.5)p%c2KmHH3*`NpWcE.eD9?G7QpO&S/*:_IGiG;q@7sAlXY_7n%lhEH^$l_c:Kf%#!a*s%@uAEb3U+(=<''G8(kcSQSMbU;RFaJp6lSN&.:74!3ErHo8Au]?ThaFP)3hW<6(\Xulr?Z8%6urHVgiaENn<IIP._lRVVXY#`2*>Z%5chq/\B5,"OWclL;E1M#b7a!_!5AqKao37n.!")UVrW1$HqU'IQ98`.3(P08_rP9CI1P`Q*U"*u`"0<1HH-Cs<#-?FUWgB'qQE3)%hg\dCVSUdfr'PmjBdirS$T9_0fLJNte:5BUq,SV6n_b2;rTSTeaKm#Ge+Iqna.A@.QX6&@3S!l^FE`E:D01RANePb3TU:AfS)6KQ%Id;f-rXg3%DiSVZ5:\>*G()^Q[:OP5bWd61laIbg7hXsrX2=,YP5Y(l>l>4Q1^S1-GMO3"=4o<9!'Ae2p&mgX-sb;O:24Lj#:R.3%Gmjmr"4-`EKX?O0jT*4/Xp>)0Ei\jtE_^FJ>\a8N5/LH=N77GmpGY)-^Z1ot0HmUeHZ0T$d`<#bq1=*F+n<="N3A.Z#gN0sP`"a)%gC03snpc:NW3;7WocD$o@.?#]3q)05fbfcH'gAiVQ?XVl5mC+Kg7FCCe#.*Ai$Fr.r8b"E,NPrtXOQS];;Yb'l0^9Zs%W-(cBBiB%Lh(!(^1'K:@Cs0^4EsX+=L%]5q19F(5nE0jK;/efo3_`I$'4(R"X.`F>(S9;&YG_VqT_U65^%8RYr,WLkX)0h$oeZXklu>D($E;0%abb;[5WoDJWkQ[`LES)=_<&\<Oal)h9l%H?rTDSe<2?u\.^VOO/FkSe#J9>6+b_+6j&T+pNW*L\ELZJ_IN3a)>$,-fmJW$a>G8R_%]s7=@R^S=5]B&t[N[)]K_l8E7F3s^Ae]m!,;i@8k&*8pg2uU3R4B$,>jlri7=18-es/IS;TmuIY?J@S)f_o0+-6%@agie&X-Sq"K%n%4@eRsSX4\eR\SQFm06Nr/QL4+FKJ3IE*2j0BC9c,!-ROk&jf?Oh;X6Ue&3Vi$j<^\.!=]gk;1^E:&LL1f,!p9kL/*ZjZsfsM-#%]DlsP>>AJ;2YH)*?`g='TD[aKn&9eSFl`PbqN8C=pfBHJ`VogUW[7]:i]l6@pYEeifCU.`ajf%olaO!q:HZ)b='UEb;6(F+V-u-e%5Q!;eh*jM-rLF\0C#4`&%7-@.ZXN"!(B+Za@Q#m_@\ba&As;`:D*aP#a.AFupYJpo:V&cbZ8ESVX\f$i_e:sQgg>BnCb'L"nSFHB%bM7a<8".T)/87^h;uI7dUhhrMm'@O8RG&b'5'Z%icYg2Zr"Z-3fq`;X;b8%rYAPi<BJrZBd#pNA:?+1%bt9pR,gU+]de-1ihW*H2%VljUiY;f*dj4oWQ]@*#B0ok'l@lJ[)*mJ:KSr9nR`-lr:l6B.g>9p%\b?M<W%<mH:#YR+LXIN!%HQ9U\A%H^,'lLIX[f2.gm`2EQ%?!B4V'th$kcA!K0bhQjNDFW[>390Hae)%P4MDG32'']IlUmuQj\cG:gY)nr/e6,LL)3;;daD9fk1AV8DrUSUc:>rdTMHYk>Lms1Q%,aPUM17J^tg6-.#I@R'j,+C0PBf?4%)*`gmRcK`RBRRJBEt]kc&[uemMtL[KgcWlJntre`pUE*(h,%@+DB6pAI@=Z[ZRKu2->p8Z%JCk=7?s1@bO41dH#3VS!1Qdo\U#d&D=Unq3d_*2&)FLuc8W1'2&.24C$&T'J"=36g)Wbj7h-Z31pa_q1'(0BQ$gf04I9WS\-#BD=%;/mR)4dE!@Qg;uKfWCp3RTlPgi4Ft8TtN3n0=[osiZfc!XhTHESBV\?d$@u@DUk$G&iZX=2H`lo?+Uu:NTQf_o@[.k$Pr&)!_+UP%(V<8%Pn(YbEA*TSQ>SMQ,i9S6@pJ<&!L&c2Z3(HIE)!2&*ln!Elu)R.Z=RK(MoGak;!'QObnd;FmY]qs;C?u"h/p8G'1\/$PRPD%%=370>XGZ`6/qc]=..[6q8p&Th;p32KhGD5GT.q1ON1?:V2kdU4H@M"m^872+=e6aolf3(l79VJ4Y@*o4S;nQ2>.Bh6g5dJHbd,`D%THg.#[g]N8LhdP3i>NiJ6Dp9uE[:+f3G*,QGMooE+n'A%ZDM^o9Ib4]k\$Y]Q.!08(^+Bs'"/P/7L9DHf[t1S\X?5CD0fGk-j5ik%b0"F\#n+&W-JHkKn1OI*CFaK8Oc9]3W8ht&e<8u%s)-M,mO?1SU.G!UZ*>Fnr3s2,T"%L&lu@]:"Ai_\Dojb[-F#4F]/n8`LGG6_%cCk%pOYq*Z_JS9tkZIgB;@WQ4Ud[2:>:N.:Z*n4e2FW`IJM@g@WBuZYiTGlj9pN=XG8WeLa?,'cnIGBLAl+LQ7g[&@@MW;eR0Qn5%SYX7?4B#b<gr,HR&iU8NVc4M,Cu^+Q%i%+I&["n_n<B#i>"ZePQ0cKXW+.7;D"Y9"GJRC=6J`q\h@2N2UIa5KhrX$W@lT\L;`A5t%N*I_MP%B4"(F^U"B-!&SN4G"YL.j&Jd>H!]1rpQsKnZHFMC"*sJ;?QCFU+-d#L:8^Ucm;*kBGlo$gs[?0T\XgN`3D^_@<6VOb/BH%V03pqR=:'@8'^R[mRjtOh,MSbZ95CT8TfAr)^m1p915Ts\?8+NEi$1bb:2j&g[Yr'Nl?1s<).f.OWBWRr[f]t095a[CI^D7a&l#'%TL%/d0jstX4KAUI>h:sX'0ULPSI`cUA:`O5'6`DbGGO\f<ZPpm;kCF^#P(@Ai'*XfAJNZj8MG`r,U1Fa9&uRaHj?(1FpmrZ$tm,m%H`;HL%C4okm4K<9WMOJZZ:&=d9l-Pd%PrNa/n#O[W%pFX,Bk;)->t>'j,NV&mV+1]h!Pd+i.U+rY*;\lU#rWXiL#?AGEh7h"5Lr.%+!NWTO\"7OdX,_->t"D*BuQ8DaAqYbm@I,Z(:aNRQtI_AlNFgiEhuPMgrS7lE9$#)R;]R:KI&AX@H7fG\W'Sp`MCM.h#X=X^`o&t%+H.R<N#TBaN9<]+KL"[>CfFpqj@;.f&B<Uj^U%Yc3_n3lEJWUZpI*Z>=cGB`F8'llHe\#0XhPicaApA>L/@^a5e^]F$Bb!+`s,GO%E,N<8nuUP>D[XZOdhb$q/iu0H$87H#dZu[+M,Z;PA`KJ2ZV!KCV\BkUoOgPTVI"?Gq-^]!d5Yr@o;Je%CJlmmM"N<<1ZD.Y[la5B%V!s>gQ=fHd1q)qar>@W`3gCW$B,%Z=1Qs,!Y[qoEB;7?c-8dL\WESA!^HFolF=bAi#[\o@FPC![&[sWb/GD\o(?.7c%79KN0aQVZ%$S7cEmVq!V&S7guK^KWgEns*Z&he!fBMEB(<,g1M"'tZLD+g-)fiG*uYjpX1\XZq&.D.4@j-Ks3j5"7f!]q/V)_i_Wh.12]C-I?.%W-iHJ45I^>QBlEm0GbmrkmZYSVa%ZrN"#M^7""_oVDLT&>=S@b$r:1YO-iNTk1/Eh)CO[TNdm<@a%;V2.&Ddj<A0Bt1\k35+!muI%[V2W"0Hn5Mj,p0[2])S*TnIfa];\?_.JMZBEj`ZX7EGb%?H@i/<XL:fQ;e'h1Xe*K4>L\g>beEWBa\,Np%jUd5\MXSr12L&7jK[-%H&Hj`0oZ;L3jm@l@C3t%G]&G8qGg9S%<[8n=H'8;1bQ+&MpcZK&U*FcT$SM86B:E+4EK4cLk%)RUMa'g"J%o(k1cSbQD-H:KQ'en%8eW]0)E83K-?=LGp[AXqMbFQeD?WIpEHe3N$+/nXR%^hX_IY,8K.dfSLIYb&V=:S5a=/t]7pi=CU!q+=QFS'kBXB\QgaF-74VN!O%jp7OdD&fpnDV]YMa?7F^V)E,eD+ojGOVhMr+t3&IY$5VO^sKkqg:Eu#kKo6)JAjO7A4,>UAY/\>l?K'uFaBVj2Nm?N;OSA]C+l.#%l/k$G3`QJfEC-(NFI3/Phn/XJ;J"Etkg`<%;(bk)2HZ@K3!;V`$;h@f4psHV;!_]hG!n1]PEYIS=sEV'r\S1*$^FU>$ge/^KG+!3%SJYe(l)P2unus6+VF@YnX&pnI?52p-`i":n[BZ_Y!+pOR\g'g\Qbu6=6&!Y;bUmYi(33QJki\5.>duH6,JIaOSntE_rNR$ir+2J/%L<=;&rm01GLK51@S]'#afr?J7Vq`V<Wbk^9_J>7#GUph9WhV8M9Fi'cbWtlf]*AX+;mSgOXWHj''YW:MC*Af"<iQ_Ua%6_4,a]jN%:!rO6\&aCOAo70D^ACEU+!@aH$B<i=$E"6h$)pag=<9m[b!KBO'Ih]D5pRBRSP`]lfVc?,7^eHXP3?)-JsQ`Zcj`R!$)`*h@C%KV%*_/!6KYep?D-BPLFpDH-C7^=<IZSn2PR(3K@\cTKO-+=>W+@>pk`0jKK1()Zj94%2`*VTrB6'5ia3J)EQfDV"3(DackQR*]n:IWf%(1N'$(h;(;:jFP59n@uhdSo*b5uFX]J^VJ^kB=(k1[9sJ8h+!Y-R[A(_@BEhKN#B\:mK+]<Z$7!MK"e]N32+/kV%+G9n80tNp!]Z%P-[*J_Egl*5RT#F_Gq3^QQ\ECk[j0@PFqRmZPQn4hp1'm\_P[G^/gNI,kimY\"Q7%kt7/STNouI(,#8-6_l7fMG1.im-8ITE>==u%dp>K^RZK3aHZ"HB%J(LCT$S['j;)+!N@6V4JJPS=6!LcQ@`Y9>3R$\]jmn]LSXkn1IT(a/$!f@[_H5u"AEUg12`0]KHNpJ+on$I%%'2_tj4n:_B0_lCQ2nPD='8qHNei[-o7?6"nDfXD^MIXt06cXgJ5X6nm;Bl=8iZtnf31_fa7p^O=K=5cb>a[HB/2@]m;`ZrQDTUug%@/a!B4FoQ@8sr(^VAbk/e^)BQbD6'S@PF""M:AsCmE12=F2H!l_1jF;j^+\Bo+=fZloqah7#>'tLDC<M,0ktB.#.K;hd2XDm'KUh%N#^i)D(+JaJL`t%3T[j[4-7gnPls7.?P#+=E[k*,;4Ag1G9X)BpI',GZ<C_eb:JmddX2Kp0>&1W^KN1ofH5:%>mckSm!X%CM`7@:%Zh6i)L^B"lXr`I$lHL%q0kc9t?;s'&AmX!K>Kr13R4u:5/kjO\in6;W<Kk?ih,_.!W>AC,S9_b=:.c5^;-sB:Wm\T`Guc3<3$'!G%eMc@ZKD%41I<1a2?F6ud@UmR?P>G!fH:)fBAP&Ikh[<2?d`*\O&C6(#-hW54Pq=GB1UB<cKsA;CNc$r^nrk(YGSWsWjW8hkA^eN%%gThSPi5I%)</q?7:<o^Rft7lb<?&6uW+sTI</aJgY;JcLnS@(`'Lp@8=6iteE]Peh#3%JB7[a#hEJ,_U)>HLdaPZP(moi9j,@DhL%bZi0dRHeZDCImHEm-YoZKtKm6X]]39C.U@Sn\R?Bp(7l`c711YN(6j%f\><&fHeY8/lK-=:.82dMrfU)+XRk$Ks3B/7/)XRjjg?V%*I_duT#dE"EA'ed;#XL=Q^NdQk<kui9Q5l[YS2^G4rnWLp#R33GuiU1d2Sn]]Mp?rPFjD;;rQ!lkhU8J<\8@[a6f8.kSn>GAJX^4%:faSC&FT$lKf?O[')C@bUkNW_d`dB,(Ok@!<kU304fOaeKHdTro9=LcO=>:p%A1e%"^mQ.@OaJJE\/k]eQ*2tCIn"bWA@2:19/3<%HQ@Hk^%E2Vo&s!rN[;bKZBa6MjSV^,\YKJTYcjel).WM9j\9>"(I,"u)n0''IL(4)&m!^G4B8mDD(9%\Z*M:N9;/RADiYi_%_$t-%LW#a%k4L/s.>^`._XV1YlbrZ_eQ4)ARB@Dt,"V:6Cg:tqM4<DmcW!X)V0Up;+_K^s;TlFWJ*Ml/R<VJbs0C!V-qS5k"0O/HQoM6!%$p"$u7cHS&DM58TZ15J^hLR0=d3S6Wgr--@8Q,"6KCA)a,dqGB4sos]7qt0EPgS0-/ZH5u1)iL<*UJWt-#MmEa547oA<Gct_MlJ-%T:(6S7^>Vp7%jE(P3nEOTS5;B7"mLK#J*=eJ3oh])>Vo'b$s\?c[T5MWjn<Umf1#Be4-9^KTg*CjmU]K<h`>\3UfQ<B)*&qk0)Z1%#;&OtM%43pV)D>]frWMEe%4%1YJ.kJFASm$3^kpS?&^ncl*jFH[67@@,u&`c[c?YbZ?bo!n*i@SB]^&)gn`54)L55OF,fe"#4>RQ%OEE20aD5Q2\^%T%3.$Y^f2%3W;l"TbN1WQ3e#IkkePElUZa"t2ekatrZabHnO.YZ2kPhu-clbJ.aV].lA6`/LP%VdGT"7nN,Wh"-%=*4hN;,4/bF*3=X9I)_Q0@o7,-E4=(S(?]Q-7QDN$]ds(N=pA>m]O[oNUlt6N8L951hd?X)F[rpB[TT>qTHC'e#W_4kt6)HWigEn%os20seth9TotUc;YsG.dBq7,pZr)/jf5U%:E.b#mf;IpqGEZW&Y.]m3pIuER\t,L395(Uje>s9WG)J*0`jk]:DBGk4:`A[O2-Wb<%`MUJSF3NuL[gS2MNgd%B9fAr=V5eFXC:&8GgVrHDZR5QQh$SA]9%RIk)n5L"f`LKj_Bt3#R*DnX0%jXGXBRY'm%AK:l'OK=DJpQL%@`OJ8%<gO<[C:#cDR(3?=I5L.co!n-h4!/-nSYXjf<+5rp@TaOr0X%(gl>aNoT/kN`dJ"bre.l7TtrN^o3Tp0*905E-9k)XRo9!j%2#1^C]5DAdSL4),PDeY7'</gq2!0^rH`J'5=uF?%h)X'M6u-hONVVV'I!.Bf?Hr/pi#WkZ+P%QliuZ9Om`@3@jY=g<\C\(L'chLf%Nk&01S?=`Im'tNQ_5TNapoSmuC]<?Kp[YicH-A5'jM.jE\]=[,%A*.%2ne?n+8<m<qs<WTr?gG%EHK!9i'7s]TT278@hbAn%-)#V%0f293@\Sm`W+.J!&K3MH7ignM%L-W4Mpr:aA!iI"9M->5dY)J:iEp=*R3inJ"59W4aD&NYeBpF%"Af1qkW"a(L,3S],)sF(l?K0e%lDXe&eUX50LKN)8=CX%e"s?tVlua9Vec6Me6d!CkB+:N@1"b1sW3$PVX$Pe2i40&Bh&$9u#19K&pr6`k2'?9?=Ki*.3"@qg"!rtY%(<8_#%D^"F3-$!&f`\Q"LLJbaRLNZM0t:j*%b^n#4U*>UK:<q&U=Q!;@o1_\Yj3,G[K`'=K@AE0[P^<f'5G"2m&acIRh3GH.,ltC%E>&bk#$%gWR2Z.Pa!&i?JE]+f\d#^JJ[4UWm4i;K)">-<)L`)UILK1^LRaEXdVH)[)R-mbI36GI2o+RrU%MpBq^-:]3.SaJnK/8B%(_74W"VH^4(`X&OW!+S+"Ykr@3n-J>)T!e8+VhDXMh]$+>4>!5]V?5B1):uf(-YV(0<#,JN!6.:Ks6Mk\Vu6Y1^2%OJn\uY2RS(*%nW9;F:er\0kBKs&/SM((=&]PjW^eEo`\>pES]1`))FC:cnPmQGXm4;9j7-=GLou'Rf6CP&4`[VY^8r*(2BJbs%q@[BjYdkXf,,qq%(/7kk\#[R128nn4A,@/g!:+WVoiT).Lr4tW`-UcZ6\Jr4%^Hj"=c]C!$b!.W@u^_/eg!5r@m1jl6>OuDoa'$d5h)Z]eY]S%`phUM%+PF"Bg;ZD4=u^CeaDQ'4D`n65+],['TXZ%f>`VWtMIEYX3nL.#)e,[[J^q0Tl\=oqH45!bS9Imgq!iV!nS%KJGk5G8kk02n`i/T7%m!ClZ^+"rR*c#,Da)?jhYK-@gir>LR">o0PW95*:91Vn*=A[=Yd#e-44?l/"#)/p:$h\<E%2g+FVf\m#I&Q4^BZ_CDOCP#VLSBg(%BL#eO&K-S,NA4s6*W=BA&ZHpFl=cA"aoVr`<i2Y=%JAThruOKk8Bp*fB\7-T2YUo`i"/TkO+u($<3YkhCDuidU$:2=[9"@:`hru+%8J!>O-!o$u^FE;G%C'+8Ph(@-n;b@YM1S<\-0:`^fGuHINP&c.(HQ3*;C+:AgV+p>&_.^B$pBhB:/^N&op@=j<jE&Z!=LW62NaJG%XW&K@LN6@_7s6^`#ZcPq@qudsmPdp@H'_4>!eOjjo[r.Nh!S*45;Y;4^]4O(GjcNqEGt8h&tPC^KX=,N7gYHA653M%V`82=Tp89o%p',nD3F!/B=X*P,.aP_]5$=tUWQH?,`e^N>2AsFaEM<3H_cV,\!o\h`X*<%_/MXpm,#qOAZeA'%JF8>h7p8ldaK8[Ba.t_f,*+H6%;`)4reDgSZP89uYN8%k`>ZM2=aG8dX[M4e"l+rR[Ei^1/n^!^#3ubb7bj,;f7<OA2;mTb]D!,qXGn0V1Y&nDJ9OL4[79S[\rrPZI%]G2lP.jk@dS4mi6=0Rq;pll_P!K0jHq'='3#X,[:JQeo4KB;#'MLgXbm&]Rmfh3B(PZF3#nC*1&1JoYKVj_qB`,*>`H5bNe$pMeC%+Y-NLX#eXH9b!.!Gn[i["LEdO*L_2nA3fRF+fAqKX<-r1pQdug)kkb;a$<A(nTXN3WLl`+>5F'%Tpp5uGnl';626\O8lLk?d?r$T%O04S*(0.Ar&1`59\'30*l!^;#0jIlbUXAXY$<GWWS/S$[A+Q:ZP0LqCl<'4EcnlT5U"%;8YU2Ald`T[dW$4u/-SWV,3Q":%#7f6=%Lk<-2*Fk?,=)nn$3VS=2<*K[DO*+'RiT7$tg7hNh7hq_3_^H[b12*/'Z["RV,lJUL(:*Re4k;q`+STOU:Wuu,mBA.&aCTVbK[mjg%@B?H;8sSN\8r!Y!bNuhHF\9$X%21D&N_d-eJ_Yl5.l5-WQo,SC=4mhUFM9(mL+cCB<^`Q_;8SWSImc>JaIJ@9JYEp7\=CE7CS^``%aF'Mg\LS8:`;_Ub@=+cZn\U(okq'bOj57\^<?%VgcEsc'4n64RP<pT3;S`np%,+KnDZ?=>'FPj8K&:J2T4iKYR!3M*V,ATHQr[Zn%e&'NfV0eO1#RBh>p1be`1t:,:c@Id[0P#s.:<BS<qjoD8aOjUW@Fb'_\%<[ogB9VcT*D8CT\J=e,ss)CM*,,;`]>KA(o!ro5VdC"%(U5p@dj2TJbPhQIK!T$NEd+-H/ZP['1N<\j=_q\7<T-Pur=J@p&V(of'cW1.0[E/B1'?t>pZos@MtQsq?^_U9!3s#Ja`h=L(l`-m%'j9sUmW/L1<\'?rC83RW/-OBuR)2s=TIW]f8L_pI(O=bbRFq%s)n*daS8NBA>2dn;4(Q0KgN]BAN!H?N#4mJk1mV@b!JN,iemfK4%Y_)Ouk>E&!Q0>fH=H.)pO:0Um<kr:2-*cVL/U8TX057#&4uYC71?gejL.q-iQd6>j*T6$4D3N/s"g"S![.-ds$_t=!\;`SO7D.\U%emcLSFQM&W/O??AkTJf>;I".9W#3PtTX/`rM@#Mr@j>CKhBNV0Bs9LkG-ZGHBFpRRI7qAQE]O7m:uG#Vi2Rpn^bq0J_j%$F`Og&@%`.(/6^FCt0L#[\,q`+dBQRP?oS,+XU4U?Wb*<OH<3.drHnadbV&DDde9T'9VK<J?L*i(.J.l&fqqItamp9.2b1#\#$JulhicmCR\%Gc,!2d2#ioPiI!Q?@XiWHLn`uaN`ZD09BngE2\k=^B#1&5I`kX3l"l!>r(JOl59=GB5HhFL'I/&(YVbGCZu/P*;GYQ)&55ib3C\+%"iM+5*<n8s!@@9.AsAFdNe*Qt`u9On'<pdDbNFSSbaU5Q6oBpV#-*>R6.1l^o"9l91nrBC&5b1S,!di+<kc!r7XFFmFcTQN<To-B%g2bF>d^%,oB0b]m`4YRE?>Fdn)#80e)1P<(<udZ4<'eDO"6GgK]bGZ&RVNep0I'\u_R=]a6HRJLTn)'0HjfMFVg?6;'Qu7-7Tr&d%<:ie"Xa!H6)n/rCk0Pf3rf!ksW)3;#"IT89<N&Qki^i+Y.$L.RoQ\13^-Gh4/djK3.kfIP6CjJbCg.<H'KBP5IY+=_[R#V2!U/H+%6j\,aZGQ!>Q.*!t.:XilI=rNu+V7'[G#\!Kg*AakbET-]YZZ!s#TJRoRl26#cQms+>"Xh7220+6[&5euZ6N:(5,:Zm3^LVWZg'h<%/TPu]<R[.V_+rdbP46TgW3N)F+CJ(5Ti8)'RN(aCEg"G^CLX'`+eZ5#Pugd(P[MMX1-selUp,V*;@p0SluYcSn7B$o.W?uR<1Trl%gT#\5&<+X@#,4j^8hhoi,g_Q,.#&US#r0AT&+19k@Q'1;gNY4'Uo*pF!+$GY5_^[)Wq<i9R.@)*jY-7%'u7LC2)7%#9/6ifP@s37%$n6?j'sPbt=O2%Bh&9o8(pqMolHgOH0N:i36!S[S0fQnu@un#koO*WkaWe"9#bkf'4fKH&OZ+50`04[knm[Ntk2Dj%qO*D^_"hR[%0.\(OQ^p9@.2Q!&7X[R9nuDsgW7$pO/lEuf]aou_c"r%G58.Z"m8052LdE=-.'0j$NtZ]?_il:9;YR)frddI[`9C6lKTm-=hR.$?%Q2T)g_/PA2STm[)8BXP?JntI%'@/I*&[=HPAlYPDr.RMrE,'nHobUX6V=mrKaq>p?][)':"*KLdd&'18!dh><j&GA+\XC1E#irgG%$PK<]M[s,afgJK0m*%7ccNEd]nHa^32E0Z''UbL>90JT[gMk$pTf="ZCuIT.F!Y.m+9/'h;,6>862<pT?#elgE7;rejMML+d2P>q%H3oH/*b"i2Tebq;Z'L4rR6F(g<!q1^+[%+1_JbX(iV\55LD=@RbH`%C,XR?4$Um*J'*S_rappp*7_d7@,X@c,T%fTl'sLZ+PEe;*%Pi;DE+t9OOg+l>pj9#moKtg!9M_l]Ac]^ADhH+fIDU8gK,A.)#FCn0]T[4&-.YiULHDtSU$;W8qi_m$Ea1k<^f:P$f+]uM2SC+=T%jGA7:%]%asi(^)D)_NjC^gM#W\4<iXL=3&G-7rP;+H/l+l-OC#I%g$PN6de:,4_u0gfoal^8kC"1aE;KE#X?5K!Za%VQe2M<>qs!%2YfN`;U'-RH(;dGPJ/e;@t%MF<%(:-gk6jO?rL'Q[(!P:W0)YHF#ulHEbV+FM&6dX8Ygl2h'Ktc,6?Pu9<tCpVr7iV!ZtCX(k.m(%('IA_#'-S,+ZDSd/$;io"]um?g`"0T[aYT[J,24<?!33J8j>VT_nH^*!E2g+rKhrO3V!R]a;A48(u5Lg,Arp"RPZF=#(HI6Lfc16%.Tat5"O8WCGPu)B7RjKSir'`W79=unn&D[e$^1b=8/>h8$d.L7?PfIAHBXcJ\QrXsq%d*Y6XSP?_;*;*$]>8DaKjL1iGG6pksF+7%5hU$h<MYmaghj45BTO%_\j+5[$oo.siL6RZbN8"kn?hV2;UhuB>ZEJ`0Y'35miMA!W9JS342C5BfSHA9&)3Z.Z'^$>%e-lLa,IB6%+u@a3D(UHP9)Rd?e]jeCr)\+^mMORbJ]VHeAXSui79JhCR3@L76LT!OnKL\.o\"11-L=5.erE0!hD>q\j=LWgRUM8.?@@+uC_X40%&p8n3f%rd\!&hEoZiPlX/8RS!DqeFg[)G(:2))9j>ug])2h>:UjO\*t`[Eg(agl[O_M&+\M87+ILTa.@c>$Vm$pL[*54h^j"+lLg%$-k&Y/:A/B?jQ'h*1;oo\G]53V9I;]Q!/>l*OqkeBCQT36a%sFa5-s0*\&j8IO"uq0RdHgqcHu/<#898O/67Q'j(&d\l$=QQ8Xo$%[p/HNNJYU#Ze]JT:j&#)\c<buk?9*7.$u^;i8Kcp`P3h-R$XZkO+Hr[moWl9fffrTj:4;(.;kkRKK7[?;0.!MZ0/hLbb\mX&A<"D%T/RDWL(2=d7J>huI"8kXZ67tCag0&iO2B75ge,L4jR]AE16HV\<_o#41%I&9gub&_`SGnLg2B/_CQ-0g-.>EtSW0X=%of((9pnhO%`9<E?:5i2?b*LHG41ICE%WaBMWqN$Z&]---;$hsR[L>R\*`Wh2EP`4:L!,@Tleo59lFG6XZ0f7FP@cTm6r]IJ&?G/VCY1a-CVB1#%Hl.`Kl'JNK,YP;BQ6DR#qU"K+c+GP+9U*)nn/uI_Wa6aGKXLo#O2:RSiM84>2FDEDmTXp"gq[&I&01Q!)qj&?b(fRCaLHMED83<t%+.c'X>ZH>)3$3O;f8.Efh"SP+L*V0].85O)Z"1%!Xo6G(,mM\9N"KtcB+`LL"LpH9^7ech#*mYAi\^EWnml>fHqY>E(1uJ\WbB$p%a0qrO3Q#oGr<^Yt+@n$5aqini/>g-NA[?;eD)f)1#8Z55L>Al&'%Q_H@<!C?9pWJ;EM3UK$J-.s-UqceARrA?3I]p\+3Q6<@63!7%XdL[9)6kc[,K;">5APcD-&NUEb9!"0q0I:k0UUi-F7[7m#W#P_Fh`1[G)WB(%T[;&b,U`\U(\m:Waj^T-WV5YRV&]J(O_^.eTn6G%$S#VMarX37rrj@'3@ZpfSuAXRY$5ma"='eS>p,1"Kn*MM<>`7k$V&ugqb@>sRE)Ia,-g@PCd*(2TP>a`4ss%Q>Q'``<`FHDF`0M0%2)&@Q;ODk&.Wh\7Qtece_KU&!3jA^dlCDtHFJb>RK\(6R"P`Yd(8JhuHkm2%QAcgl7pt-E!MP5Io&1B+rlfZ=g:dZG/,(%oS,bj[%$Tm3TkCfAXXJ1.JPQ<FZAAPV(+4f=d:P7U8]6%GB<u1+ANM]n0X"E(S`KU$;=a,d;F^:-9l)'=GgmD_,9N\r^E`EhH!@rUBmSUFY%[`A*Nca\qIOV;5?UUPCj0^*YR^':42XkNKW+;Ff9m"193^RK(ueVYm([R.J=';UoG6^M1f^i\m\b\rj)T33+(lKl,2$Ko9Mc&=T7%&@_3HpoV&\aMGBlc>Rkr.+?+3Yr@Cd293*#RKZ?A735sM6\RUK_8UiM6n)/5)o,?R\?H20VLWs==:_jd7"m(d7s:tD3u!ttT?PO4%DNqM`4oAJF('<G.Tl3#E=*sESeN+h&!ku$8="Nl'iqF+No6)DISpRE/YVlS&gkmL?RSJ<iF9sEq@^+gnm9rJH)O`*JZ6S=9:6fo8%^Z7m=8XQ\;6XJsN@t_cWM87nhE0]s3qWc(1rnCi_.*&LQm^d.5mE,=B`I^DP[U+!eiHltHDT0i_g+%T#8+&lVXh"5^(84=Pk].Kh%IOff,(t&X*)hnmlf2rT+]MN3Pdl%X('anZF`jaC\P<h[E4;WHnNkaPl(Q#5YOAbiU^9ASc`Bd@&s6T]4*%[Xk$KM(SNjuG"=^@AJ%qYOAX1KMO`h5]3#MKNB\eAC3:@;NE<e[aIe0ue"+*Qf.dVer;qnA=ObPg>@$>/4gQ*Q,kb,Yi/0X3:@DW&*8n%5C_$%:^@RhH`K2%Kj\n/`55-WBWp;(,:r-"iNjZBToUlK/4];cq=X;gGd/'/QmY5Q'+N-)&U+?9[_3.j3AIU0DmVrtb^X1/mAWE^!nSM@`:aEWEnn=i%_7!<?F3IopXZ?=m(kU#Ij/R%p'an1]M!`AlV7GOlP=4FgDgj.O8[:M4Ibgq+eP:RMrWBkb2oVt%&F[?+g>=\:W*qRJ&FHEK1CG%2%kPI^U8&QqP)@pa%d?GH]`L_VFnmD)\29"_BTF,81Eh9S#dH#V\.,X0"[bEUJ/Rf+t\DJ3)jsN?E\oZFX:.QuOe?`=Te[Z;MIl\_Z%eDdion9\\iKen\_0;M`ZiNDK6#G)IH*AKJgcb,!W<OQfuN*W(VCkKC%NiV2VmfCkO'CeqhZ9Eue4N?_R]!*KS/VEHl`e,dhfrL>r%g`"1eQ`F<+@_-?B@<2Q6m_225Z#4b$7Na6Xl7qakU'9o(=3:QR$XT;1@8S3"8h][a(X,O17u$h*e<jn\/(J/[/tB`RB=/ch1fmP5%R@%r#%f1M,$>im/qq'lsCdZ.O&@-qTL8lZr[WcCM4W/F[35d<!id&6mp+`fT+D"\h`2ML(#i!4SHp"JNX_BVpL5"&p-4ie#FN_lX%ltZl<//B0:aI0b]Ioh\XF]#X8ri=B3=J.?U&5QFM,Dm)acnCT$6Lijj;*M`Z34K_nNch/KJk[Ucgan,9oKu`&VX?">5Apu7;X5s;%iiFi=!)68ZC([XL^`>6+4r8,$(R>O7E5oQ&OCQ_RR4;;1A0Kc_8f'je\mjW/G\[VV+mP+(L/P_q6':Zr,KDJ\IV35%;*44\'J"2*%CLDeifLdJ7I<1"0\mk>O&uts<PIFRHXi1PtX6gXm<Y-uS$uug.XUD?C=D>AR^SV[)UDNd;$653_.uNspHo3ZF>k\X:Ut(J$UAui^%W^WTR$.!,fY/Ci:Qt.YG=OS[Ion$O9i843d)EiU4c1+'<15JFYM]n0Hd$142"O.C6*Tb:=KOD$+_`EN5K@=%qeJnG9M^T6ohK]s+%d%%6'aoZ.mSQgXT\e)Pf[_^c@<i"IN`;_GDq!:"pd/Kcn'ubn-1GRDr'Ul7''.o0V_[$cK_&_fYaR=.Xns=^hQd<!l.ns-3q'>Eb%hK>@rPWX?d7T?fsmuZng9LGm%1QN`WmC%C%2q<u!f3*Lgh>k)<,XXbc7+?/.%j/'0+CfJ<`^XjfDj2_=:ZFl-gCj^Z#<?3h6<S'3%BCXa=So:aZ#eTU4-a%EggdOAf%#5<(p;]A7rCj2L8Q'oX_AM/K-"7T><k4"Z4URht`!_J>m"LJ[\g'eHCsTC7ECFpc`X,VKjtPA)%;/mSG0'nN/20<^.L%p*kQQSHG?D1X8ZN0O$-I@Ar0c,t'l-dX<6/9nL\JI:e$cO)k#Qa0mbuOF;-^#jl-7i:Idhh61ZnhBmlqRTI%cAkjQ@(b7I9jhDpeZ7%.#V/SKc6.S#-m,JMe2F=#`s(0u4#V*3D+?d3+NEp3L6K6<p[B_qZWZ3;G'<Jop_!qV!f/_!`rqeIrnTi(%[WFk&-*Ve@!p%$/LUf]@g<qg>Yrc6RIam]TX6)+qp>P,nr9]G]nBKeH6+oRS,M%AYKLmtT^4p!V]3i9X^LldK)A&Ks-I-@`D)*+[%'ASqAVC$gN,=sBL>,V=Z=32]-eGb;X62U-`&gp`]*Jd&oH[K5=7Y4gFPjX4bc7NG.6o$3KEDSR+<DM2'0Vg^Sp7b;U/uqaVLE88r%Y$PHENYN?@97(-:XY@R=L<j&dr=q;3\+Z.eGubXK's=7RD3V,H!_4d>nNjj^b$3_?//X<end]$o,s#5lLjk+VEAM)l8r(M[]eS^k%+qRZ1[CK:G2td5l[Vr9*GZmpjAub0)`m%N4*4Wf`!b6],mq5&ej\+aPW5%Wu$\@pc'oS&brSBEZPi2KTp^ZGLf2t11bO\sn=&8s(%Ln0"jZ/?$CfXn^l>S,JC-'/W+c/g<)l9-"JAK9nr.-HVcaXT":=<V3pP1aUXj6NT?ZRa]Ohl4oC=6j$02P_>6QSJ&<>UU8=URP50%YBNdt(1Z"YW&eM2dLVe.X""0PCo/RrSXg)OrgZ*[LZPd+N"=s804;jSOT.7.io+DnC8q?G"q)^"_EJ^KW9rVhk$qlRld'1pE"S#<%?]:-P--n%[I,BJ(TG@@^QQomY[O&qM^%N>AVHmLi(F&]cX`]uVe+gI>Lq_^E723f,FEIsApu5d3d"_=2<6C(]Z4E=$5fU0*#G3tr%&jPt]ocfi)GfdRQ9MkV8D%td,n\b!<kG_3dU7quJlmSR9J[B1L>@n!sI71s;!ikO]4(Jq,QV'@nm-F%Bj0%D[eH5tN3s%5T1_=ek%[T'5Cj:7tW,,g+!=4c:h#)^Ug=gojr+7qP=l-,s%Y4Kku4kVkd=[;0:2$j'08k;4#(`C]gDO_FRRa,WB95FEk+HE*66otB^;u6o<%qQU&aAm<V&ABi;e8`NC0WeP'cG0e5"dJefAWh2K&Jn*^6eCHUa@86k`!U3!rnR(=*h#3TXMmY[k$-1NV'1QRC:TVJq_!,hhFuf7u%Ks5d'N)h`8?=A<rC0WQIlOs)o"&Xh]`c>.ii2>>TBnM8P+T<QU`@OGKCn>hPYQm.%rr6;WQW(IQE2.OAXQ,i18KBT]5u$Sa/kY_%%>k]uhG=QN:fL+oKi$S\3#XG\^"W]q0GX5_O`M&m6^HcD`.u&N8B\n<L['JXm5jZ`-AP^?^-3qILPnB(e4FA&tD;0QPa4=O\?0?s%%hHlQ3%AE\?U50g`?@0:,D#2=b''Ob/BD%KOIW)Nq&s8R.RpZ8.b0/P#qkA7Ch-0n_4P?G2e+9Y6klP8>NnsSk4PIfn)Z'qB1!bI6%0FOoM2OI]QcC=q96aN4G]OPi(jkU//^F!'iorER5pBOch.(jA8?D)\ud^!=@jr/)<?r]BnPs2CaVuiI'D#P@eO_@_\2KeMHXFToV%h-%H949kkp>ZfM<P8WT4Pneui<iHf7F+g"iV#r8*.(9UgpjFb]pO-D&(r9&+:LY[l.8R+RZe$mW.Vaj6Pl&P19J0l:7g:j761@rG%B<:ke+F>%\@`r?pe)Wo:H9R2)e(a>TcN*ANji-WA\3qIB_8>0D<rUeL!fVlm0>m82/mqudf39S._=Lo=U=YVeRO[0-W^l0`L'4H=%5^*ntU*pYnQ)%4i7@ttL-%i/gTG9o#.'?"$/rG)!i%P4o&]@?IU.K;]MR67I9aA[8FA<1q&Icu!e!#<0'_de6JPpG`L)9+e7"Qj#%P`asc;CI^&P8(3r#U[MI.EX(?4t.6s5t<5OWOF='U;!@;>MjKRmE=('DX0Bropt".Gd%Sup;Dl3r3=R6^cnqfcp**dlH(q5r2.Bl%-pab`luWf1NmQ86HPGq4+FlLDO?eI3d#c&!&mS:p2!V>9!_,f?8Y:WCI/p!eU43:U,X`S[hK2G]KU\`Q*MMq4KH?i^#j3RD!VO)J%+UVf1ToMbkg`g/G$3)Cs,RHp(`a^4I-[8;orM*bn*kLrNnd)HIA,6K*VrIh-3Cr@#4b"kg'R^J.om%"hrXh2Q&pFs<:IjeLY"t,X%&N!=9%oUJF7j1c*d>`D#Fp89OVkX>#5:9n+#_hFBkn/Z2:jt/4:r`nUQB:ZlKLmH=+se2I6[=cA?:.'Zl0(CL\*42Y*?QXRkQkat%a7*W<Sdsr4j*ia-OALR_/(Bc<KMBt&Mk4=ONd;sM,U"O`>/OBpqn.Xd!Ml*U-ckD#G^5rh1,b((A:u_%Z"ObZNDaUKp5K]*HA527%fhiY`a6Uj74ph$Tks.QH;T_g&,#VU,&<2p#Pd-?sIZabu&dji.RM)2j#CI..PZ"7h[T#LrD\mEDJ[p+nU@HbgDGYmrRn\itqQ8J;%`j]9$%-B6k^uCCh=]Uj5\5^G!IEF?/p:N](3A@lWp9p&u]^8Gt;A9eF!uVF189dB_0h@-f8fd3,7)CNJfLA%&W2Cjd"=9`m4W$l8%B_i\_;Y1k?P#79$;N=O>qrrAk.5ON96:r=l#Xq'7l8_?`$V?.G8l\L:91ikqMNb?;5/$EnNrR^mc]Z=29#bj/g3#mGo;8-crVY,)%qWYg9_(<9S"N;Xj-@m!_kX\iIb"GX0;GURja\3_g8bl+!"Y*qL#u4*S;kJ\mQ@]tF5V_r1-=n)AgnTmfUu\>3XjiK"3\6IkRtU*l%^n68keIeUA1%dOh+\NY(*JUO@2'jfFN7d_iqBXF[%L])fTTh)$i"%9/-t*rAk=A`H3AIMr.Of]n,;f'-Vk3IDOJ&2HW.ZIn^aXt8%p"68ID'etX%ZckTZimZ\(p8nJp#%U-[0ZcHi\:&$VH-sUe!-*+PZ!p&h5#FrKE;n(U'G-VTLBlU8O-"%53h)t!`)Dg9+#)?9Tu3@%"SX0,."t-=%R"@e2.RgVKf)!n80&^Bkt)1i8Jt2bV+F6R*U?:2:dU-;*.#QOCIg-QMJ>bf7gU07a!YGSV$+`4YbhinUu3Uh6TsC*%T7[32?:0<Q;H-SHMc$:/6>&&1N<3oW`(c!&8ROOce5>F)O6'5X:P/=4+@#u8b&BZS*D4+8$85;m;$K<!<)ScUl>TB6P"EJa$?oAJ%PX;)WOAq+,H31&[=I!<s"Fen]YqguuK!kg%Pp*aPYa<5A1.7L]`"Y+q+it@9RD@&["<-tQe8j,%GVtuRFY/0V>;6P\R!IL+LT*>%%9.QB\A:.u4`(:V=1O0t=^@dF#BcB1'3`+1AZBikEagA3u%.l8T2Nt`pl.`7a^s)O%*Eq_c,l">A;5Is*$p^YNWZG])#`1Z54T"PT%GAfk;/%^.V6MY]hT6C5uoSr*>eMj\lUP2\NW<F!f'>0UI\U&-n8%.]m=%^IFFB22g;Yl\7\e:$)7f-(1Qu^(W]%DX8ehHP!I7jlP%&'gGlYS<Cg,./,tV/WR?iME3N"9t/7_h(&FA8Jr6"N4:X>s7jQ\6))C9&NkZJ4h"j*Q:Z*?TeZGK8"^`6J$Mm$%Y_d>lq_Q3*$:1%;Ri%P\"7iIN8W5r^'"S)^qr8?Tkh=G-#a0c92SHAHP.H#7ZC<Se;ZSUJ>j0+Q/JbYJL-\b*i#R)XU`;rW30LCGs.6r!X264@8F7t%TZ;@6R:+3!XP&e`ejIgfS#0jVXL,``,$]dc2O)t/]OWt47W-<8g8E^Fo__G9f(5KWnX<dFFOYp'bm1r\%7nh%V18X5KqJ&*S/GX\%"qRZ620%,PRPhMF^aZ6j?C="QmpIk"/9)Q:.O?VX:`=UWgI(g1n[$3GA/V*[H8K[];(J+[YqiNsl?Y:G79nc^[An2,nr7F8PZH"G%q\p?,MB-Imb=_UGA]to!7bO$H4%J%mL2f`Mac:<oY0i!T(?7Yd\6csk>'MaFeue9:0mJ_sY.3&?qq(5<@O529B&]g<<S1(&n*Aob%Gg.Wu@kb,USrMj:`M\g-G!d+nZBNnN7p(e#^kuEpV7n-i&2&V6*BSrN$u[PNe^pFU+[`0-fn12Qf,.ouLc7r<YF3B:`no;9&k>dj%>NjAiZ@$!=>s+uU<"@(h//%D9:tTW1Uso.Y^ZW(6cTd_B7ONUH7)]QjH]a5F9%eG5$\i'JC$iH#m%(!7j'3<5(2a.VY;"(MrK"Xe%W#&nIBj;P[bc:lMOI=+e>s/,RP#@Wd6j:)-%gn11XP"hVY.]/&T@(dg>RE#u'QO.36^p9B[&NL/4Aqg+gkptCTc<O(+MBNcL24W&%,=X*(Q/IVYB3N,^[V'rldMf[S_j4R8@`PV5#X-6DG)0(-L*kI;8]5h=M!Wt,LkS1T1D?05'+G5$D08CP7pX5;#`M9.U2BJg"i$'&%M)<qrZ-:E9?3PL,DJXmRd]OLq)[$GdXg*g%,d_'#J5Pr!DSU>#X5)"s\d?t*pR1d8V:jGEH3q&$$dQ7`s4L[sJ!-[,=L#q6;Qu=N%2a+m\_a>=;%teHg;K"^WA*c!LqYjXtb1t8T-Dl7RW"(+iics7g7;)KsXCDJZVW5BJ^0c8+5:\h6SLp1"J<!8O_nj2FMJ1#)TmWpa%dFjX:>E5rM-d5@pb/]RY`gO]o?h1`@Ba#C?BRWH2+E5cq8F8FMKl]9f2oqD,:%plPLZ$IAO5115_-F,s3#BUO7=F2r'3WUqo<n@n%U:(4PLg=BrH[Ln;>$[pE"VfN34;L0imSC@CQueaT[)\B"KEEjTBKJdEV'b0kpO4[s>/J]lDt6LH7d.o4Qm8DbeF-Lj#o+49<aJB@%;ZZ?WJgG@:(?u,+a`eoA(Bi%9[JCW>8<$m,DqS,7SkFRpC?^6-K'\kYd&.^j-I7V9X8Ul?CUWFa?LnY\Jgol1Z%]3WhGnu]N]ltY%0E`\tH$3LA6#n\@)n<`V8o>.L(3uKXYVS0M,Vc+8%=\Y'QCTIjSeJ99*Jn@(%Gj#,cQhit;*jAa*r&E.[r]IQ7pqrkUi,&li>8E"%Z[iP-d;bY@osYDVoR[kD_PiI"Fo.dZ,4Zbi`@q#5V&ITR*Q`g6?LN+q$j+W#rFbFp-7lMEg!AqW*DYcRnQ"piNps>u'K4J1lF8e<%Pr#Jrk#\u&eG8g]#`PjUXQteN90h`IM:=f^C:!]n;8.O'8!N(Mll=dr;;P2!NA3pcKHT&)gZ<B^m)XX78ChSnL@L#H+Piq`K_0K+%!u:_PPU.lfi?oa,6g-"52[/b%[TCkjb5W2EYX!jTcu=aa(0%QeN-jE$cU1`BZ9XZi]DTT&Iprclk@S8@TEd)sk$@&=mYE7db`A;8%%)mHD<#(lu'+=d'3?0D:XDYT-:HZta<tIeTe]PQ&X\;u6\);Eu?N-V87tecSr+KCJk4f)ofn)JY>9Y/BP]PNh<Dd8U&"J?,6I*EB%3ka(dZtREP:[C?L[lLK(*D'qsI@Zn-5<iYXbT(XN=XG\4H!>N`.#.cD-#og7Zk@K8"ZBl8!ArB;aT>Xf/4eB<HQZDEmk+1ohc;h_%F`ebOKe0Om9Cms$@k8k$[=R'=HX\NWs/e;Om"5mU'"lFIXLOlPV0(OHmg<_B@fX^e=mT?5!3AgKT/).*WBTG!TF1D,l;iL$Cug0j%qeYcNO.ALU[["-BN::goX`eMc_J]_e[Q]X8;BQ6SF-)'SJroe1.RXS:8))Apf83Y,Wg!gUN\?9"jAQ+*iS']Ub)tFg^VU_.6;5EN%8r7D)>Rt=m%:nEn/frH"bo+KG1UcdjSqG#r16u+Bi"QA7HfcE^!mrsS)kr*&XtX06A8"TK`?hsNM2oZ2[EB*6e+<:2ajde3MA@l)%p8m9;X.\9O`>2J`':;m!*OqK<I'[1(6g"T)Qp;D$CK`8JdCoX2?fM=ErP"0`X58jD7_@Kq"\W?,*>SJP)iZ4pKdWm6LO+V.NU(9H%s0t7%d;&#45TcY]1(W#%Z,U#2.'K<]:GqtJa&q?HVB@.eUG?d-r$Cbf"("=W+JaQ#p7XsRqUr=#V!hsHFtkQd\!t1H(l?#>:fVC6%JS)2W?HD[i'Bi6S?r]rFXBrSZ5NY1Z/:8RKc&U^<2D`]RH2A)pf-]!Zfo`ML'/uD-UIS&kiS.5$mVJ4![gEC9rt(a!EI,hX/E?q1%;jEa'G?fe*O_($'F2\EN\kNHt)OK]NQ-I%0$0Bm\EA0iGXW;DBmK.7"C<bLU`;ng8fP7ONs/[kSG0FHI'?cIrjMGD@2s1b'Z4?%<%:H.hl,>iNje+8uV<'teF>g&fl[5'"W9(07Och`N]fO!P@&u!!u=;-[-[D:J7_!CFp9Gc:hN%B3sVG"GN1W2#>cgg`h,G'0`%+j;o%/3bI:@QClDF;NA[A'cSp7(Gl#046"p08dO"_Ka&*IHL#`T3(0A]5pBjCtH)cV*LmA`JY<t1.+d7K,qb!Jq+G[:&aRUkh0RR5H5A1%]2%B"-kCg2?88gA7)OK'h5q@7ar8Se,F6#/_/Ik*#QFa`H8UB?C9Gui[hECoh]LUJ_#,4[nnlc=:iu/]4@M76q7mJb&;K,"gP.1]%-J5Q,)b9F[NDAAMP9G(`q3mm?dej5PDVS)e(A&'*pTR"4`9hFLSDA>Yi_*K8p'R3Ir=85D5.iH^[c',lDpK!2/S9,\%W.&&]7hcX%<m:Ls=/uh'B!EuNCCJ>OdqIjW%Dd!$?8gs0q:II`fD?I+=Q1"2][uDT0?,?[E158@^D'6iY&bBQYk`Me]Pj9[+76>dR!jbjEe'3i%&/B7?Q7+H[Ebi0+#J*q%E%ILr(ZPM1Y[ck2iY+C1,NFa+r*oO`(ReJ]:R$NL*!*LQI%U,j]bNLHINJ)]!k#UASiLDlXiZ$k4@2R'%]l1iO"6IuZ/8&e>k),)1TB-Jh_<@;bbt#*-42r\0?eY!eg"M((Ss/oTdjZ`ND[6L4D7MkTZXsUL)c8[.8Y[Xb!2VP_Lk*V%8q^c`%jK3Lu:]Y/3'6.DkhPB;92H1-HXI+8DIMWu-.,?K;me,qU`53"$VWYj%4+"QB@mU]q;[<.a=MBHM^,;/+\=eJJK#/_bR&HiNN3-66%?^C/]itGNdrGDr0Wcn:*&:>k3b'n,<ZmI?3IUa@_one+%74(LNN!S/!]J/pa]m`XefNlkQFn0ee8[k=f,>d8)7GFXa/QK*r.nP('%C#P45HKgm7BY,*u.?h-0dFL-W".R$H:"KM<gZ0W^FL9k!es&[/pLnoGX9m7K9oudq8t-9(9-S4WPVkDJ(.cau8Qd8aD7?;mRF9)L%g>;)Nr@)LmPr4]hgIroqW02m8>tZ\^HK@I"(Lg"DrAA7V^5po^<*s/8=am#:+@qAUdL^,u,"ZOFWK/;lU3RHt[Ii,hc.=4$SL!g%%q'"!+AXOmi7qp6uc"qO%Y@h/mbFM4Z9s\eQY--+64k"hoO:gjML6>]`ZB(0De3%?3mF7Z)k"WJ+Wb,Q`456ZO-,6K@i%.g^B9SO,%F-`*BgpQ4PZRg?a/(]0[k1h79YIXNe__4%NeI&7H5W&eH9?>Tj]tcoJ&=H:ff2AR$,1C)$E^S@tR0Fp6MI^Ib??+D/;FIpUBj22R%N2gDD/WD5t7$XOi*EDj4![uS*WL??l8!tu$eOuo]b&gI:>,p1QAX]Z+Q_hj,:>;&4^I062lGuA1VM_`fd&hHU2H@Ph3]Ya=4gfI$%*j=2^WN%W#ri&6RW?BDAL8mX@[:1Lr<4ueFLs/h^Wi]8!AZ!li/SD9\9GO87C/f>PSa]UDWL8(?cQ+ANjus%K$[M"iS#mRs4sd?l%F3Ua5flt]gCE>^bp@jGp?87P@$<2BAO="Ml"][O<$::!j:EbGU/2B(PU=g)`8#H8V1a9Vj,ZC/1*^qq:RBiYf^Sj?Y(K<4MSW2iP%<3)d/*nC.d.L:<GZFImmh1,7:GR1/5W;p-E,=->*l3bScR4#EhLepl'PtuL28o8pQB8q(sAG_n!"Vs0\fQI;!$tq0'4m];]T&2<K%f0["Kd2j)2.GetBLRouaocOGnmPCng/:%o[]$XcH(cp*jgoOPO>rp+e$r0(]=8HrQ]M^]-4.Ep'+gP%a7D.Qfm*QA7/hS%kn4)W*%]R7[!XPdVnO.!35j9iOR6eLs72+qk^O3mX<?*Hj7f`.J%/J)JW=R8Ih^kcca7_:/FC&N0DI\3$SAu]2*M(QPB=t-`/Lhn2`^A_;=%RNm4N*nb1c*+3D&[64'jHXuQ.H__^+S<.YWHuoa`2dkt_\M1ZL?c"%[*s'-1SIsu'^>?J.gd!UNW@i-BKV#G&g5b*20)SDtYnHgd%P%7_ZVqR88bM2ii\q]"$?2ORVV:BiSYHl(G-8YZZU_Y/Z,K\/*/OX&<&pk;*M4^"32'aM8bt):E3YNYP,dB.tKD'D9%9_k,m1-8#%QBR'Ig9eEZlJ+=Hf!`q.o4Vtq/T%GMB%<N+G'/6CgA+lt6RVh`ZS'+#TAd-nZ$%\dHQ)'qO.X+J[<lrF@l`knr9Vt(olJ]ece96t%lQ<67VR7([euu[RBrt[E[5577cdiT\=W_PKeh%oUPJ5qHK6DBtH.qq?f)F%Ea#N=+gil+\4!s]-Q*p($hOXJq_-)+IB:Y^mDUEkk%l)`pPp8-?seQI[nX:Mc5b3h?+Ih$m>kLUiiTDRKl8b:u<7C'@!cC->#94i%qh">eb)F$l9kcBKF2Oa&<;.o9r[AgPl^6[p6T0qMb%q))]2T=$Vb2Y,,HrG"u5D&]RYL&:#M=aT/2KlP`)3,O<'F\;'?.K;`@j[V]#Uh+VufXYr"XR2^f(=L[,agALMcC7fu)d7%#l`MUY%f.ssVWL^KRmTO[IoBr^!GM`TeBb]D_'9A%-^9@-D8:!KnGA(\fXDNomd;d_Gq3N!HG7BgU/XN:cZSl^Pk0DBT>$FDh9r+W1oXtKP%etT`o@kE\CP@iIq0O%^qCYN]Bbo&e$[OQ]3+h6=[e7hA'Wh#(WI]4IrC1qL_DomutK@*l^@q/U'eKpr5S%ebTGfUTNESRRt\#kLK%\N,ahe?:%[=l";0:3o;USYWl(e'a1Yg/VoYla6,gG/s%JB.#jNXiB;MNB4oZ?+]BtV01Z;=??d]O(%ECXM'M!T5iHT=F29.s((B!%gbiNk-I(8c=dhKH46WhQ['Z$GG+4e0eC(L')HoeWCMA[^29enMC3PZHV(m2F]fYKKh0/lqqLj'``3n3Ag6'&6>2FH\:HP1AIrt(O%rbSn>3G<4Z3`u+g0TD60\4T(k8^Qc8'9eM\+&kl7DkFqBHZo%In(VVN#B"6j/Uah!1U]-dQM0%\J3.JnXe!+gDVrc`i1EB[(nK0(%RlQL<&Obl#]oFeND2Wd/Z!J,)eD:tLJj@0bT()$bH&S;=J"Ei<qkCK%W:>17FD99le8%WEQW/?H<>_(Dre=`HEngG(jL4p>mN7<M%\@1Vo9C?RdQfW,DQ;po8g#jiTXjZrD>ZZ4@"G6BLOl'9SqY7;5OHTrf(?a4ME#(1Z\?a&EP6gh/L0e5epDU>h^:r[3Y:iO`d'QP"%X_-%N2m&!2Wopb//ucbS$MCchYHRWBl2e;-:aujZqST+$;(ENjH:OrleB5n/^(LNGK))Sn$2J@?+Gm?NOn_+@T>gCJjtBkg/9fI;%(Gu/RA19\I%HbE[/EF!K!=d6PQbiP_]RNQTBVIbU$(>o0C]g^LL&CMD<t&^7Xg)4@)mnKbE3':=!^)\E(6oa)p\:-1"/8'.dQIY2%4OUI=WHD/iq%'"j4/1llD;43H!T/*T1DR(5cH8\g-!ss1<G>d/Ma'^XeNBmD$6Y>qobY-&<T`=0>')-qa-PuMrWbA8ogg7,[\0bU%9^u4.9QAqBZkgrIpB?4PRB0LP[RPOT7!.dqK>>,4;b(h>R>Hp#EM:G3(dQtQ'ulU&8r^=EiLa8ofS<;Y"2u<?R4\ph:M:kcjM_BF%:BsI+m)[#S[(3O[3&0jjrY2Bc(r%P^Wn67VR@R0g6u?P/>T&Kg^h+%7n*O>#m;_+:F?#q=Noq"inqE5u(,d(RPOYURM2lZ;I;%9f%#lNn@/#;KK7i8fh#Y3Ic1H$(uolN6.+GKZCGgdaMTlZGg:L,\s?S8I'`):BPe];ILZ;rkVp%'id8@KdXXg-/$Z'0M$^7ni4^>UD>%q;\a2YXF%h@`NHP+d0+m8KMFme-t._5mqQ-Z,ZR3qT`OQO2C>UE:A(T'b/-RPP=)!H)CT;qLn04;h`j%4X5TgY_`,uE=EJ93dL16%G:R)1(DKhH8n[KX*m^s:aB(#@7PUn0]hejR8s-65meZ6ZlnLE/U%uOW7"_SP3,e6%U.lZJ775kB$I\pGL"objj1V\kI?W:s@3R>s%gsuou=s)H(]Y#\;aP'Bkk-[tZ'/jOCicUttNQBsi0?t$EfAVB?g/'8K_Xk+,Oe&&>Ib^??Z*Lh%D[fe5?m?6<,]ugs.l]k=B8&!`%6tZM'^cVVi=R/;"9_FGelN.$_m&b]gWX5$E-MZ4Tju=*`?(B\OX./ceeccH>FfNNZ5Me$eAF+-RkeEII7UpHLQ!:5?rR22tMmQ\a%8&h#.:R#.3//\\ua6_6'e23KQ$gm$tkTk8Eq4*;mr9s&omP@K_phN\NTOpM<CGr$d8Y6k)2'0GNkmc#&:r?&Z6c6t8b89`jk-@sk%^+8MdA[P0Q")!Y?0.e=1]q4"D#Ze6r,fD0=:UO6^^pIMbhq)OZ^Thq,g'[PG(O0;lKKAWA1,ajW/!MEC:^;;!5sd2KOq"#<KBkfl%k`H1'<)Dk3J/JLGOPh,^!?mO1j[_L"'-2fO"]ZtqiWd$)^C\0M-RPVOB]Q6(-$%dl*=:(;K75q^+:1"qkTW0>,\*'$.4,A_6s1pW%*=,$9kBfXZ2l,I#3l>)M^4q<mCm3]RR-h[8T`-%2E.9k,,.Kd!=ca[%VcK$4g\GK3F)gH0p#$C6ok<Z"WB]B*gtjt200K_?q<3:;%pGqNV^OY)5U4n\d>Y*E]2CS*1bX\Q1<o%FlQWiq#Am_fO6e\:s=)`#JO75"PO'1=-ncY0>XRAL4f*tbYP=7.>.'PY@"eCafYc-[&%/66SXQD7;?W2>&_(4F5Oe_W<%,jEDRZP<_Jg-ME66&KWbcOVf^8rddPc;lEQMhb':dR^?TA2^e(WDVi^_fdb&[)Z@h<j,hYj1S/;%k+<^>M/D)V^;7eG=DrSM>ETG84$gEi#0":J3#JK_A5&5ZRZ`k7HN&dW=u)76:OD>?0GuT7\M?<p-3_ok'Ut&'UHG'm6%LYl6(oqp%(?W3E=bPS)E#/\n,`J*<6m`#\+R1o9(.`Ms&Pc3QI8\TOc)fB+jWdhJQcUn"8IC44\[L!mORGs0rT%ebe2gNRBBM*uH8E$>1ERD*%AnT'e`t[`&2F5*'Z>ME=N\Y426mJoS`RtOd7Z]S92Q$ZC#^E7;oC2EZlr*6bl4rp:oAKqmPa<cgXd/0k<7g!\W&BH3FIt[qC\`Dj%2Y#%m%4P5"ReiPdNQ#[XmQ2Io'&=f)]81p&OmGI3S]Z!q,PrHffC-'g?e9WI:sTPBkWM)d8,,:t,H.@CFd/Sk6hEAEm`2eZ%j6r6%K9Z5,A/Jaq,^c"-JOTo&)9#'92bt&]`lbicFHj*V,T^Ce#gF_?rWj8&_$ir'69TN`a@$oZkWq/mfgc>j8Jt,@@n@M26>7'mPE;B-%,Uag),r@(.13U;PVeA5M5f*q%W$`T%7CXcQ>=J<;*M4W&\9*[rKE3kl-o&T$krCOlU?Pc;b-DW5:!^]h@STDC&b8]Cjq2o88,)9#%5KX0CH;Mp(8f0t5.2%e@69>f&;?onlAYd``]@:hg&os2_SU196_MIJ3;E\Va5u^"I8jHED\l'MK#L!gT(8?$nheYd^1(/pfJOtgW%QLE`)h,qQ5YB:LqV(0[/ibltLFu?");oB96%loW?T<?,b;K)FF7K1n/D00Wh.j+<un%-ItOWaAfl*8rp"*tI#/#VSh^DE*Z`65f0%\W0(<'k[<eq``/7okXgaYW^5]4`Oc92>4:`lX?af0ok?@^<j17mBj/ANo`cS.)*3aZRokkPU8ZjlTo:84@4jE"Ms<=YhZedCb29T%6oR!qcofuEQrb^Q#.FT6-+a=",h0<M`*6Y%JOViml?;a.*el?UQe$,Lr:Wb8gmX3^X-E.-cf#<^D>]c"i&QZ&J;Lk,DUb6c-HZh/%jh"m4T<PpH^VOeY^BP_PrPV52FY`M01IGg#VgB]G@FR)r4pG0@k(i=%fga*`o$MY*cfk\m6C]TJC7gW\Gb2q$NHt\>+._q.I4b!l%p)6_.UO!C#'i%l<;7-K<o-Lp0rg=$ihgXU7(-cfGa(<6*b:K$q=oZ\X^',!_0o"Faciiuk4(:&[^-(gF8&lO_YoTqrD$*9<"]s@V%[f[CSC1"It2r(NqOd=lNh9Uua#kVNC"u2qJ0-Z<],2RbmSm]0;hbo0+@+t^l:Bih;:EVF(@E3_gH/aE_Dt:m/MXC.CV=VEt59^BF%T&d@[P1s;17<CG32]2d6?F^`)36p<QmBfp7Nf:MqAlnI::Z%j7-[BO:jqBHPZS]+c/+H^O0?CUcU(:KhK:S;jTUC8hb<2P-I_?hS%cVNR7Gg"qOc$8JMbct[V@T^B*eCfrrgYr:sbH#1kDONSm^K@;UhX:aiDe0kO&hi/8b=+]Jao*cU@4s_%+i=E0WXWN;4.6Wj['<\n%N9(qcf=*39@q9N-#l4j/(K4gd=cg-K)67uX>u4/(YcDU->*%sl%14ccV#)2!apURbf$0@L(tR=g7%\F3X\K!6G6InIo_I%'jS01#%r-%#S:=MT&%uJuX%BY'55(8._4V5joB6B)-\6t@0cD/f[<\u`p?nbV<'Xgc![R:]8F4;ehlM?eK3p[;ADK>oBl$Zg#NC\pf[Y6f.%'uS%AKpGu@GglCK(,rXZD!FfCaBSR-[*lrPL:oVa%(`R@\COQsn%KXMdiY3s][,KqJo2'YGYG;,]rL@:-*EE@;rVaB:0GMHqR>MR%Z[[JNpFB%OIim"GQ+YB@I<X^;7neT?\08G+=^E7[ncn?]kB6?i.J5j^^mVg!qri*,5):sEWmA>)YQ'6'^fu$N`HRJGVVsh=Pr$"e%bEND3MPo2>X7lel"7IroAW1_@W#K/+#*Vp\(r\P]&KTY/d"'rME>)2,;F($L!1'2+e3ME(*&SY@P9mI\/qq"]=rVghHM9,jPPESb%s.$bf"5.bek8.&##*HqM4&]+o+PVS>@20]*6\`LapMF8)m*$N$IgqB8j[=:cECF!NW^6Pc^4pWaC7#mB`^*p[,GqL2kRC%GeXj:c%@aVl6,n%W2L-'GkN'A0:iV2N@/,7`T=+C5:2a@9=]C3N6r;D[@I/DBBIf.+\d/<FghuE3;a038RI468qr:'=Phu)m=Du]h8%tFQ@%msb8F+91o$O8nqQcp,8EH]PMtj%k.Bp5`S\k2T8;Hh`Zr04+Etqq&$dq9+j!kIZd>rpAJ7)*\&_:I"j!^]3GkI/%pcQs[[Js7FWe%pt+F'mc,BQIf98tmsk)p1B%#-+91Pk2#[7Kq=jp%>mAXIL]9R9lC6[LJ,Z>frpkh_s7<jp`c:e(YQ"=a?bcK)T>(:'Dr:LMr:TO9%rnm0.^A[#G++O:`kO8EKrI7$1qU9Y<s7s^-^AI^&^]!s-m)]&Sr:mIEohYVRIgl?!dg70I~>%AI9_PrivateDataEnd